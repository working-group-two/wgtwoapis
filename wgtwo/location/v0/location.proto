// Copyright 2021 Working Group Two AS
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
syntax = "proto3";

package wgtwo.location.v0;

import "google/protobuf/descriptor.proto";
import "google/protobuf/duration.proto";
import "wgtwo/annotations.proto";
import "wgtwo/common/v0/types.proto";

option go_package = "github.com/working-group-two/wgtwoapis/wgtwo/location/v0";
option java_package = "com.wgtwo.api.location";

service SubscriptionTrackingService {
  rpc GetLocation (GetLocationRequest) returns (GetLocationResponse) {
    option (scope) = "subscription.location:read";
  }

  rpc GetCallForwarding (GetCallForwardingStatusRequest) returns (GetCallForwardingStatusResponse) {
    option (scope) = "subscription.call_forwarding:read";
  }

  rpc GetRoutingInfo (GetRoutingInfoRequest) returns (GetRoutingInfoResponse) {
    option (scope) = "subscription.routing_info:read";
  }
}

message GetLocationRequest {
  string msisdn = 1;
  string operator_id = 2;
}

message GetLocationResponse {
  Error error = 1;
  Metadata metadata = 2;
  LocationInformation location_information = 3;
}

message LocationInformation {
  string cell_id = 1;
  common.v0.NetworkIdentity network_identity = 2;
  oneof area_code {
    string tracking_area_code = 3;
    string location_area_code = 4;
  }
}

message GetCallForwardingStatusRequest {
  string msisdn = 1;
  string operator_id = 2;
  SupplementaryService supplementary_service = 3;

  enum SupplementaryService {
    CALL_FORWARDING_UNCONDITIONAL = 0;
    CALL_FORWARDING_NOT_REACHABLE = 1;
    CALL_FORWARDING_NO_REPLY = 2;
    CALL_FORWARDING_BUSY = 3;
  }
}

message GetCallForwardingStatusResponse {
  Error error = 1;
  Metadata metadata = 2;
  ServiceStatus service_status = 3;
  string forwarding_number = 4;
}

// Please lint me, and map me to a CF_STATUS in the SI product
enum ServiceStatus {
  UNUSED = 0;
  DISABLED = 1;
  PROVISIONED = 2;
  PROVISIONED_REGISTERED = 3;
  PROVISIONED_ACTIVE = 4;
  PROVISIONED_ACTIVE_REGISTERED = 5;
}

message GetRoutingInfoRequest {
  string msisdn = 1;
  string operator_id = 2;
}

message GetRoutingInfoResponse {
  Error error = 1;
  Metadata metadata = 2;
  common.v0.Imsi imsi = 3;
  oneof current_node {
    string current_vlr = 4;
    string current_msc = 5;
    string current_mme = 6;
  }
}

message Error {
  enum StatusCode {
    STATUS_CODE_UNKNOWN = 0;
    STATUS_CODE_UNKNOWN_SUBSCRIBER = 1;
    STATUS_CODE_ABSENT_SUBSCRIBER = 2;
  }
  StatusCode status_code = 1;
}

message Metadata {
  Diagnostics diagnostics = 1;
}

message Diagnostics {
  google.protobuf.Duration network_query_time = 1;
}
