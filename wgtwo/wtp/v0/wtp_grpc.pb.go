// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package v0

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// WtpGwClient is the client API for WtpGw service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type WtpGwClient interface {
	Pipe(ctx context.Context, opts ...grpc.CallOption) (WtpGw_PipeClient, error)
}

type wtpGwClient struct {
	cc grpc.ClientConnInterface
}

func NewWtpGwClient(cc grpc.ClientConnInterface) WtpGwClient {
	return &wtpGwClient{cc}
}

func (c *wtpGwClient) Pipe(ctx context.Context, opts ...grpc.CallOption) (WtpGw_PipeClient, error) {
	stream, err := c.cc.NewStream(ctx, &WtpGw_ServiceDesc.Streams[0], "/wgtwo.wtp.v0.WtpGw/pipe", opts...)
	if err != nil {
		return nil, err
	}
	x := &wtpGwPipeClient{stream}
	return x, nil
}

type WtpGw_PipeClient interface {
	Send(*Wtp) error
	Recv() (*Wtp, error)
	grpc.ClientStream
}

type wtpGwPipeClient struct {
	grpc.ClientStream
}

func (x *wtpGwPipeClient) Send(m *Wtp) error {
	return x.ClientStream.SendMsg(m)
}

func (x *wtpGwPipeClient) Recv() (*Wtp, error) {
	m := new(Wtp)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// WtpGwServer is the server API for WtpGw service.
// All implementations should embed UnimplementedWtpGwServer
// for forward compatibility
type WtpGwServer interface {
	Pipe(WtpGw_PipeServer) error
}

// UnimplementedWtpGwServer should be embedded to have forward compatible implementations.
type UnimplementedWtpGwServer struct {
}

func (UnimplementedWtpGwServer) Pipe(WtpGw_PipeServer) error {
	return status.Errorf(codes.Unimplemented, "method Pipe not implemented")
}

// UnsafeWtpGwServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to WtpGwServer will
// result in compilation errors.
type UnsafeWtpGwServer interface {
	mustEmbedUnimplementedWtpGwServer()
}

func RegisterWtpGwServer(s grpc.ServiceRegistrar, srv WtpGwServer) {
	s.RegisterService(&WtpGw_ServiceDesc, srv)
}

func _WtpGw_Pipe_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(WtpGwServer).Pipe(&wtpGwPipeServer{stream})
}

type WtpGw_PipeServer interface {
	Send(*Wtp) error
	Recv() (*Wtp, error)
	grpc.ServerStream
}

type wtpGwPipeServer struct {
	grpc.ServerStream
}

func (x *wtpGwPipeServer) Send(m *Wtp) error {
	return x.ServerStream.SendMsg(m)
}

func (x *wtpGwPipeServer) Recv() (*Wtp, error) {
	m := new(Wtp)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// WtpGw_ServiceDesc is the grpc.ServiceDesc for WtpGw service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var WtpGw_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "wgtwo.wtp.v0.WtpGw",
	HandlerType: (*WtpGwServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "pipe",
			Handler:       _WtpGw_Pipe_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "wgtwo/wtp/v0/wtp.proto",
}
