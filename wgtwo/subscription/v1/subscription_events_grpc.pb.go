// Copyright 2021 [Working Group Two]/[Cisco Systems]
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//

// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             (unknown)
// source: wgtwo/subscription/v1/subscription_events.proto

package v1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	SubscriptionEventService_StreamHandsetChangeEvents_FullMethodName   = "/wgtwo.subscription.v1.SubscriptionEventService/StreamHandsetChangeEvents"
	SubscriptionEventService_AckHandsetChangeEvent_FullMethodName       = "/wgtwo.subscription.v1.SubscriptionEventService/AckHandsetChangeEvent"
	SubscriptionEventService_StreamFirstAttachmentEvents_FullMethodName = "/wgtwo.subscription.v1.SubscriptionEventService/StreamFirstAttachmentEvents"
	SubscriptionEventService_AckFirstAttachmentEvent_FullMethodName     = "/wgtwo.subscription.v1.SubscriptionEventService/AckFirstAttachmentEvent"
	SubscriptionEventService_StreamCountryChangeEvents_FullMethodName   = "/wgtwo.subscription.v1.SubscriptionEventService/StreamCountryChangeEvents"
	SubscriptionEventService_AckCountryChangeEvent_FullMethodName       = "/wgtwo.subscription.v1.SubscriptionEventService/AckCountryChangeEvent"
	SubscriptionEventService_StreamPeriodicCountryEvents_FullMethodName = "/wgtwo.subscription.v1.SubscriptionEventService/StreamPeriodicCountryEvents"
	SubscriptionEventService_AckPeriodicCountryEvent_FullMethodName     = "/wgtwo.subscription.v1.SubscriptionEventService/AckPeriodicCountryEvent"
)

// SubscriptionEventServiceClient is the client API for SubscriptionEventService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// Service to handle events related to a subscription, and where the subscriber
// is located. Each event has two operating methods: Stream\*Event and Ack\*Event.
// See events.proto for details on subscribing.
//
// | Event            | Description                                             |
// | ---------------- | ------------------------------------------------------- |
// | First Attachment | When the subscriber first attaches to the network.      |
// | Periodic Country | While the subscriber is in a country.                   |
// | Country Change   | When the subscriber changes current country location.   |
// | Handset Change   | When the SIM card is moved from one handset to another. |
type SubscriptionEventServiceClient interface {
	// Handset Change events are triggered whenever a SIM card is moved from one handset to another.
	StreamHandsetChangeEvents(ctx context.Context, in *StreamHandsetChangeEventsRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[StreamHandsetChangeEventsResponse], error)
	// Manually ack a handset change event.
	AckHandsetChangeEvent(ctx context.Context, in *AckHandsetChangeEventRequest, opts ...grpc.CallOption) (*AckHandsetChangeEventResponse, error)
	// First Attachment events are triggered whenever a SIM is first attached to the
	// network. It contains the IMSI to distinguish which SIM of the subscriber has
	// been attached.
	StreamFirstAttachmentEvents(ctx context.Context, in *StreamFirstAttachmentEventsRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[StreamFirstAttachmentEventsResponse], error)
	// Manually ack a first attachment event.
	AckFirstAttachmentEvent(ctx context.Context, in *AckFirstAttachmentEventRequest, opts ...grpc.CallOption) (*AckFirstAttachmentEventResponse, error)
	// Country change events are triggered whenever a SIM changes current country
	// location. It has both the current (new) country and the previous (old) country.
	// <p/>
	// This event is triggered when the previously seen country and the currently seen country
	// are different. Note that subscribers being close to borders, or during travels may generate
	// a lot of CountryChange events. See 'PeriodicCountry' events for an alternative.
	// <p/>
	// For subscribers with multiple SIM cards you will see an event for each SIM
	// (IMSI), as they can move between countries individually.
	StreamCountryChangeEvents(ctx context.Context, in *StreamCountryChangeEventsRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[StreamCountryChangeEventsResponse], error)
	// Manually ack a country change event.
	AckCountryChangeEvent(ctx context.Context, in *AckCountryChangeEventRequest, opts ...grpc.CallOption) (*AckCountryChangeEventResponse, error)
	// Periodic country events are triggered on a regular basis for each user for each
	// country where they are seen. It is triggered by knowingly seeing the subscriber
	// & handset in a specific country, and for each tenant will be triggered on a
	// regular interval. E.g. if 'Operator X' is configured for a 2 week interval,
	// there will be an event every 14 days (or 336 hours or 1209600 seconds) as long
	// as the subscriber is still seen in that country.
	// <p/>
	// As this event is not always triggered based on the subscriber moving between
	// countries, it does not contain the previously seen country. For getting the real-time
	// movement of the subscriber between countries, use 'CountryChange' event.
	// <p/>
	// This event is triggered: <br>
	// <br>
	//   - When the subscriber first turns on the device and it connects to a network, it
	//     will be triggered for the country of the connected network at the same time as the
	//     corresponding 'FirstAttachment' event. <br>
	//   - When the subscriber enters a new country (not visited before). This is triggered
	//     at the same time as the corresponding 'CountryChange' event. <br>
	//   - When the subscriber is seen in a country, and the 'PeriodicCountry' event for that
	//     subscriber and country has not been triggered for the configured time delay. <br>
	//
	// <p/>
	// For subscribers with multiple SIM cards you will see an event for each SIM
	// (IMSI), as they can move between countries individually.
	StreamPeriodicCountryEvents(ctx context.Context, in *StreamPeriodicCountryEventsRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[StreamPeriodicCountryEventsResponse], error)
	// Manually ack a periodic country event.
	AckPeriodicCountryEvent(ctx context.Context, in *AckPeriodicCountryEventRequest, opts ...grpc.CallOption) (*AckPeriodicCountryEventResponse, error)
}

type subscriptionEventServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewSubscriptionEventServiceClient(cc grpc.ClientConnInterface) SubscriptionEventServiceClient {
	return &subscriptionEventServiceClient{cc}
}

func (c *subscriptionEventServiceClient) StreamHandsetChangeEvents(ctx context.Context, in *StreamHandsetChangeEventsRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[StreamHandsetChangeEventsResponse], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &SubscriptionEventService_ServiceDesc.Streams[0], SubscriptionEventService_StreamHandsetChangeEvents_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[StreamHandsetChangeEventsRequest, StreamHandsetChangeEventsResponse]{ClientStream: stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type SubscriptionEventService_StreamHandsetChangeEventsClient = grpc.ServerStreamingClient[StreamHandsetChangeEventsResponse]

func (c *subscriptionEventServiceClient) AckHandsetChangeEvent(ctx context.Context, in *AckHandsetChangeEventRequest, opts ...grpc.CallOption) (*AckHandsetChangeEventResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(AckHandsetChangeEventResponse)
	err := c.cc.Invoke(ctx, SubscriptionEventService_AckHandsetChangeEvent_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *subscriptionEventServiceClient) StreamFirstAttachmentEvents(ctx context.Context, in *StreamFirstAttachmentEventsRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[StreamFirstAttachmentEventsResponse], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &SubscriptionEventService_ServiceDesc.Streams[1], SubscriptionEventService_StreamFirstAttachmentEvents_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[StreamFirstAttachmentEventsRequest, StreamFirstAttachmentEventsResponse]{ClientStream: stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type SubscriptionEventService_StreamFirstAttachmentEventsClient = grpc.ServerStreamingClient[StreamFirstAttachmentEventsResponse]

func (c *subscriptionEventServiceClient) AckFirstAttachmentEvent(ctx context.Context, in *AckFirstAttachmentEventRequest, opts ...grpc.CallOption) (*AckFirstAttachmentEventResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(AckFirstAttachmentEventResponse)
	err := c.cc.Invoke(ctx, SubscriptionEventService_AckFirstAttachmentEvent_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *subscriptionEventServiceClient) StreamCountryChangeEvents(ctx context.Context, in *StreamCountryChangeEventsRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[StreamCountryChangeEventsResponse], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &SubscriptionEventService_ServiceDesc.Streams[2], SubscriptionEventService_StreamCountryChangeEvents_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[StreamCountryChangeEventsRequest, StreamCountryChangeEventsResponse]{ClientStream: stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type SubscriptionEventService_StreamCountryChangeEventsClient = grpc.ServerStreamingClient[StreamCountryChangeEventsResponse]

func (c *subscriptionEventServiceClient) AckCountryChangeEvent(ctx context.Context, in *AckCountryChangeEventRequest, opts ...grpc.CallOption) (*AckCountryChangeEventResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(AckCountryChangeEventResponse)
	err := c.cc.Invoke(ctx, SubscriptionEventService_AckCountryChangeEvent_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *subscriptionEventServiceClient) StreamPeriodicCountryEvents(ctx context.Context, in *StreamPeriodicCountryEventsRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[StreamPeriodicCountryEventsResponse], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &SubscriptionEventService_ServiceDesc.Streams[3], SubscriptionEventService_StreamPeriodicCountryEvents_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[StreamPeriodicCountryEventsRequest, StreamPeriodicCountryEventsResponse]{ClientStream: stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type SubscriptionEventService_StreamPeriodicCountryEventsClient = grpc.ServerStreamingClient[StreamPeriodicCountryEventsResponse]

func (c *subscriptionEventServiceClient) AckPeriodicCountryEvent(ctx context.Context, in *AckPeriodicCountryEventRequest, opts ...grpc.CallOption) (*AckPeriodicCountryEventResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(AckPeriodicCountryEventResponse)
	err := c.cc.Invoke(ctx, SubscriptionEventService_AckPeriodicCountryEvent_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// SubscriptionEventServiceServer is the server API for SubscriptionEventService service.
// All implementations should embed UnimplementedSubscriptionEventServiceServer
// for forward compatibility.
//
// Service to handle events related to a subscription, and where the subscriber
// is located. Each event has two operating methods: Stream\*Event and Ack\*Event.
// See events.proto for details on subscribing.
//
// | Event            | Description                                             |
// | ---------------- | ------------------------------------------------------- |
// | First Attachment | When the subscriber first attaches to the network.      |
// | Periodic Country | While the subscriber is in a country.                   |
// | Country Change   | When the subscriber changes current country location.   |
// | Handset Change   | When the SIM card is moved from one handset to another. |
type SubscriptionEventServiceServer interface {
	// Handset Change events are triggered whenever a SIM card is moved from one handset to another.
	StreamHandsetChangeEvents(*StreamHandsetChangeEventsRequest, grpc.ServerStreamingServer[StreamHandsetChangeEventsResponse]) error
	// Manually ack a handset change event.
	AckHandsetChangeEvent(context.Context, *AckHandsetChangeEventRequest) (*AckHandsetChangeEventResponse, error)
	// First Attachment events are triggered whenever a SIM is first attached to the
	// network. It contains the IMSI to distinguish which SIM of the subscriber has
	// been attached.
	StreamFirstAttachmentEvents(*StreamFirstAttachmentEventsRequest, grpc.ServerStreamingServer[StreamFirstAttachmentEventsResponse]) error
	// Manually ack a first attachment event.
	AckFirstAttachmentEvent(context.Context, *AckFirstAttachmentEventRequest) (*AckFirstAttachmentEventResponse, error)
	// Country change events are triggered whenever a SIM changes current country
	// location. It has both the current (new) country and the previous (old) country.
	// <p/>
	// This event is triggered when the previously seen country and the currently seen country
	// are different. Note that subscribers being close to borders, or during travels may generate
	// a lot of CountryChange events. See 'PeriodicCountry' events for an alternative.
	// <p/>
	// For subscribers with multiple SIM cards you will see an event for each SIM
	// (IMSI), as they can move between countries individually.
	StreamCountryChangeEvents(*StreamCountryChangeEventsRequest, grpc.ServerStreamingServer[StreamCountryChangeEventsResponse]) error
	// Manually ack a country change event.
	AckCountryChangeEvent(context.Context, *AckCountryChangeEventRequest) (*AckCountryChangeEventResponse, error)
	// Periodic country events are triggered on a regular basis for each user for each
	// country where they are seen. It is triggered by knowingly seeing the subscriber
	// & handset in a specific country, and for each tenant will be triggered on a
	// regular interval. E.g. if 'Operator X' is configured for a 2 week interval,
	// there will be an event every 14 days (or 336 hours or 1209600 seconds) as long
	// as the subscriber is still seen in that country.
	// <p/>
	// As this event is not always triggered based on the subscriber moving between
	// countries, it does not contain the previously seen country. For getting the real-time
	// movement of the subscriber between countries, use 'CountryChange' event.
	// <p/>
	// This event is triggered: <br>
	// <br>
	//   - When the subscriber first turns on the device and it connects to a network, it
	//     will be triggered for the country of the connected network at the same time as the
	//     corresponding 'FirstAttachment' event. <br>
	//   - When the subscriber enters a new country (not visited before). This is triggered
	//     at the same time as the corresponding 'CountryChange' event. <br>
	//   - When the subscriber is seen in a country, and the 'PeriodicCountry' event for that
	//     subscriber and country has not been triggered for the configured time delay. <br>
	//
	// <p/>
	// For subscribers with multiple SIM cards you will see an event for each SIM
	// (IMSI), as they can move between countries individually.
	StreamPeriodicCountryEvents(*StreamPeriodicCountryEventsRequest, grpc.ServerStreamingServer[StreamPeriodicCountryEventsResponse]) error
	// Manually ack a periodic country event.
	AckPeriodicCountryEvent(context.Context, *AckPeriodicCountryEventRequest) (*AckPeriodicCountryEventResponse, error)
}

// UnimplementedSubscriptionEventServiceServer should be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedSubscriptionEventServiceServer struct{}

func (UnimplementedSubscriptionEventServiceServer) StreamHandsetChangeEvents(*StreamHandsetChangeEventsRequest, grpc.ServerStreamingServer[StreamHandsetChangeEventsResponse]) error {
	return status.Errorf(codes.Unimplemented, "method StreamHandsetChangeEvents not implemented")
}
func (UnimplementedSubscriptionEventServiceServer) AckHandsetChangeEvent(context.Context, *AckHandsetChangeEventRequest) (*AckHandsetChangeEventResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AckHandsetChangeEvent not implemented")
}
func (UnimplementedSubscriptionEventServiceServer) StreamFirstAttachmentEvents(*StreamFirstAttachmentEventsRequest, grpc.ServerStreamingServer[StreamFirstAttachmentEventsResponse]) error {
	return status.Errorf(codes.Unimplemented, "method StreamFirstAttachmentEvents not implemented")
}
func (UnimplementedSubscriptionEventServiceServer) AckFirstAttachmentEvent(context.Context, *AckFirstAttachmentEventRequest) (*AckFirstAttachmentEventResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AckFirstAttachmentEvent not implemented")
}
func (UnimplementedSubscriptionEventServiceServer) StreamCountryChangeEvents(*StreamCountryChangeEventsRequest, grpc.ServerStreamingServer[StreamCountryChangeEventsResponse]) error {
	return status.Errorf(codes.Unimplemented, "method StreamCountryChangeEvents not implemented")
}
func (UnimplementedSubscriptionEventServiceServer) AckCountryChangeEvent(context.Context, *AckCountryChangeEventRequest) (*AckCountryChangeEventResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AckCountryChangeEvent not implemented")
}
func (UnimplementedSubscriptionEventServiceServer) StreamPeriodicCountryEvents(*StreamPeriodicCountryEventsRequest, grpc.ServerStreamingServer[StreamPeriodicCountryEventsResponse]) error {
	return status.Errorf(codes.Unimplemented, "method StreamPeriodicCountryEvents not implemented")
}
func (UnimplementedSubscriptionEventServiceServer) AckPeriodicCountryEvent(context.Context, *AckPeriodicCountryEventRequest) (*AckPeriodicCountryEventResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AckPeriodicCountryEvent not implemented")
}
func (UnimplementedSubscriptionEventServiceServer) testEmbeddedByValue() {}

// UnsafeSubscriptionEventServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to SubscriptionEventServiceServer will
// result in compilation errors.
type UnsafeSubscriptionEventServiceServer interface {
	mustEmbedUnimplementedSubscriptionEventServiceServer()
}

func RegisterSubscriptionEventServiceServer(s grpc.ServiceRegistrar, srv SubscriptionEventServiceServer) {
	// If the following call pancis, it indicates UnimplementedSubscriptionEventServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&SubscriptionEventService_ServiceDesc, srv)
}

func _SubscriptionEventService_StreamHandsetChangeEvents_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(StreamHandsetChangeEventsRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(SubscriptionEventServiceServer).StreamHandsetChangeEvents(m, &grpc.GenericServerStream[StreamHandsetChangeEventsRequest, StreamHandsetChangeEventsResponse]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type SubscriptionEventService_StreamHandsetChangeEventsServer = grpc.ServerStreamingServer[StreamHandsetChangeEventsResponse]

func _SubscriptionEventService_AckHandsetChangeEvent_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AckHandsetChangeEventRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SubscriptionEventServiceServer).AckHandsetChangeEvent(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SubscriptionEventService_AckHandsetChangeEvent_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SubscriptionEventServiceServer).AckHandsetChangeEvent(ctx, req.(*AckHandsetChangeEventRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SubscriptionEventService_StreamFirstAttachmentEvents_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(StreamFirstAttachmentEventsRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(SubscriptionEventServiceServer).StreamFirstAttachmentEvents(m, &grpc.GenericServerStream[StreamFirstAttachmentEventsRequest, StreamFirstAttachmentEventsResponse]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type SubscriptionEventService_StreamFirstAttachmentEventsServer = grpc.ServerStreamingServer[StreamFirstAttachmentEventsResponse]

func _SubscriptionEventService_AckFirstAttachmentEvent_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AckFirstAttachmentEventRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SubscriptionEventServiceServer).AckFirstAttachmentEvent(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SubscriptionEventService_AckFirstAttachmentEvent_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SubscriptionEventServiceServer).AckFirstAttachmentEvent(ctx, req.(*AckFirstAttachmentEventRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SubscriptionEventService_StreamCountryChangeEvents_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(StreamCountryChangeEventsRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(SubscriptionEventServiceServer).StreamCountryChangeEvents(m, &grpc.GenericServerStream[StreamCountryChangeEventsRequest, StreamCountryChangeEventsResponse]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type SubscriptionEventService_StreamCountryChangeEventsServer = grpc.ServerStreamingServer[StreamCountryChangeEventsResponse]

func _SubscriptionEventService_AckCountryChangeEvent_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AckCountryChangeEventRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SubscriptionEventServiceServer).AckCountryChangeEvent(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SubscriptionEventService_AckCountryChangeEvent_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SubscriptionEventServiceServer).AckCountryChangeEvent(ctx, req.(*AckCountryChangeEventRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SubscriptionEventService_StreamPeriodicCountryEvents_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(StreamPeriodicCountryEventsRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(SubscriptionEventServiceServer).StreamPeriodicCountryEvents(m, &grpc.GenericServerStream[StreamPeriodicCountryEventsRequest, StreamPeriodicCountryEventsResponse]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type SubscriptionEventService_StreamPeriodicCountryEventsServer = grpc.ServerStreamingServer[StreamPeriodicCountryEventsResponse]

func _SubscriptionEventService_AckPeriodicCountryEvent_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AckPeriodicCountryEventRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SubscriptionEventServiceServer).AckPeriodicCountryEvent(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SubscriptionEventService_AckPeriodicCountryEvent_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SubscriptionEventServiceServer).AckPeriodicCountryEvent(ctx, req.(*AckPeriodicCountryEventRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// SubscriptionEventService_ServiceDesc is the grpc.ServiceDesc for SubscriptionEventService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var SubscriptionEventService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "wgtwo.subscription.v1.SubscriptionEventService",
	HandlerType: (*SubscriptionEventServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "AckHandsetChangeEvent",
			Handler:    _SubscriptionEventService_AckHandsetChangeEvent_Handler,
		},
		{
			MethodName: "AckFirstAttachmentEvent",
			Handler:    _SubscriptionEventService_AckFirstAttachmentEvent_Handler,
		},
		{
			MethodName: "AckCountryChangeEvent",
			Handler:    _SubscriptionEventService_AckCountryChangeEvent_Handler,
		},
		{
			MethodName: "AckPeriodicCountryEvent",
			Handler:    _SubscriptionEventService_AckPeriodicCountryEvent_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "StreamHandsetChangeEvents",
			Handler:       _SubscriptionEventService_StreamHandsetChangeEvents_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "StreamFirstAttachmentEvents",
			Handler:       _SubscriptionEventService_StreamFirstAttachmentEvents_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "StreamCountryChangeEvents",
			Handler:       _SubscriptionEventService_StreamCountryChangeEvents_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "StreamPeriodicCountryEvents",
			Handler:       _SubscriptionEventService_StreamPeriodicCountryEvents_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "wgtwo/subscription/v1/subscription_events.proto",
}
