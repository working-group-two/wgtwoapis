// Copyright 2021 [Working Group Two]/[Cisco Systems]
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.8
// 	protoc        (unknown)
// source: wgtwo/subscription/v1/subscription_events.proto

package v1

import (
	_ "github.com/working-group-two/wgtwoapis/wgtwo/annotations"
	v11 "github.com/working-group-two/wgtwoapis/wgtwo/common/v1"
	v1 "github.com/working-group-two/wgtwoapis/wgtwo/events/v1"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// Request message for streaming of handset change events.
type StreamHandsetChangeEventsRequest struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Configuration for the stream.
	StreamConfiguration *v1.StreamConfiguration `protobuf:"bytes,1,opt,name=stream_configuration,json=streamConfiguration,proto3" json:"stream_configuration,omitempty"`
	unknownFields       protoimpl.UnknownFields
	sizeCache           protoimpl.SizeCache
}

func (x *StreamHandsetChangeEventsRequest) Reset() {
	*x = StreamHandsetChangeEventsRequest{}
	mi := &file_wgtwo_subscription_v1_subscription_events_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *StreamHandsetChangeEventsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StreamHandsetChangeEventsRequest) ProtoMessage() {}

func (x *StreamHandsetChangeEventsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_wgtwo_subscription_v1_subscription_events_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StreamHandsetChangeEventsRequest.ProtoReflect.Descriptor instead.
func (*StreamHandsetChangeEventsRequest) Descriptor() ([]byte, []int) {
	return file_wgtwo_subscription_v1_subscription_events_proto_rawDescGZIP(), []int{0}
}

func (x *StreamHandsetChangeEventsRequest) GetStreamConfiguration() *v1.StreamConfiguration {
	if x != nil {
		return x.StreamConfiguration
	}
	return nil
}

// Response message for streaming of handset change events.
type StreamHandsetChangeEventsResponse struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Metadata for the stream.
	Metadata *v1.Metadata `protobuf:"bytes,1,opt,name=metadata,proto3" json:"metadata,omitempty"`
	// The handset change event.
	HandsetChangeEvent *HandsetChangeEvent `protobuf:"bytes,2,opt,name=handset_change_event,json=handsetChangeEvent,proto3" json:"handset_change_event,omitempty"`
	unknownFields      protoimpl.UnknownFields
	sizeCache          protoimpl.SizeCache
}

func (x *StreamHandsetChangeEventsResponse) Reset() {
	*x = StreamHandsetChangeEventsResponse{}
	mi := &file_wgtwo_subscription_v1_subscription_events_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *StreamHandsetChangeEventsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StreamHandsetChangeEventsResponse) ProtoMessage() {}

func (x *StreamHandsetChangeEventsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_wgtwo_subscription_v1_subscription_events_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StreamHandsetChangeEventsResponse.ProtoReflect.Descriptor instead.
func (*StreamHandsetChangeEventsResponse) Descriptor() ([]byte, []int) {
	return file_wgtwo_subscription_v1_subscription_events_proto_rawDescGZIP(), []int{1}
}

func (x *StreamHandsetChangeEventsResponse) GetMetadata() *v1.Metadata {
	if x != nil {
		return x.Metadata
	}
	return nil
}

func (x *StreamHandsetChangeEventsResponse) GetHandsetChangeEvent() *HandsetChangeEvent {
	if x != nil {
		return x.HandsetChangeEvent
	}
	return nil
}

// Request message for acknowledging a handset change event.
type AckHandsetChangeEventRequest struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Used to identify the event to acknowledge.
	AckInfo       *v1.AckInfo `protobuf:"bytes,1,opt,name=ack_info,json=ackInfo,proto3" json:"ack_info,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *AckHandsetChangeEventRequest) Reset() {
	*x = AckHandsetChangeEventRequest{}
	mi := &file_wgtwo_subscription_v1_subscription_events_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *AckHandsetChangeEventRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AckHandsetChangeEventRequest) ProtoMessage() {}

func (x *AckHandsetChangeEventRequest) ProtoReflect() protoreflect.Message {
	mi := &file_wgtwo_subscription_v1_subscription_events_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AckHandsetChangeEventRequest.ProtoReflect.Descriptor instead.
func (*AckHandsetChangeEventRequest) Descriptor() ([]byte, []int) {
	return file_wgtwo_subscription_v1_subscription_events_proto_rawDescGZIP(), []int{2}
}

func (x *AckHandsetChangeEventRequest) GetAckInfo() *v1.AckInfo {
	if x != nil {
		return x.AckInfo
	}
	return nil
}

// Response message for acknowledging a handset change event.
type AckHandsetChangeEventResponse struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// The status response (success/failure) of the acknowledgement.
	AckStatus     *v1.AckStatus `protobuf:"bytes,1,opt,name=ack_status,json=ackStatus,proto3" json:"ack_status,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *AckHandsetChangeEventResponse) Reset() {
	*x = AckHandsetChangeEventResponse{}
	mi := &file_wgtwo_subscription_v1_subscription_events_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *AckHandsetChangeEventResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AckHandsetChangeEventResponse) ProtoMessage() {}

func (x *AckHandsetChangeEventResponse) ProtoReflect() protoreflect.Message {
	mi := &file_wgtwo_subscription_v1_subscription_events_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AckHandsetChangeEventResponse.ProtoReflect.Descriptor instead.
func (*AckHandsetChangeEventResponse) Descriptor() ([]byte, []int) {
	return file_wgtwo_subscription_v1_subscription_events_proto_rawDescGZIP(), []int{3}
}

func (x *AckHandsetChangeEventResponse) GetAckStatus() *v1.AckStatus {
	if x != nil {
		return x.AckStatus
	}
	return nil
}

// Request message for streaming of country change events.
type StreamCountryChangeEventsRequest struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Configuration for the stream.
	StreamConfiguration *v1.StreamConfiguration `protobuf:"bytes,1,opt,name=stream_configuration,json=streamConfiguration,proto3" json:"stream_configuration,omitempty"`
	unknownFields       protoimpl.UnknownFields
	sizeCache           protoimpl.SizeCache
}

func (x *StreamCountryChangeEventsRequest) Reset() {
	*x = StreamCountryChangeEventsRequest{}
	mi := &file_wgtwo_subscription_v1_subscription_events_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *StreamCountryChangeEventsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StreamCountryChangeEventsRequest) ProtoMessage() {}

func (x *StreamCountryChangeEventsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_wgtwo_subscription_v1_subscription_events_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StreamCountryChangeEventsRequest.ProtoReflect.Descriptor instead.
func (*StreamCountryChangeEventsRequest) Descriptor() ([]byte, []int) {
	return file_wgtwo_subscription_v1_subscription_events_proto_rawDescGZIP(), []int{4}
}

func (x *StreamCountryChangeEventsRequest) GetStreamConfiguration() *v1.StreamConfiguration {
	if x != nil {
		return x.StreamConfiguration
	}
	return nil
}

// Response message for streaming of country change events.
type StreamCountryChangeEventsResponse struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Metadata for the stream.
	Metadata *v1.Metadata `protobuf:"bytes,1,opt,name=metadata,proto3" json:"metadata,omitempty"`
	// The country change event.
	CountryChangeEvent *CountryChangeEvent `protobuf:"bytes,2,opt,name=country_change_event,json=countryChangeEvent,proto3" json:"country_change_event,omitempty"`
	unknownFields      protoimpl.UnknownFields
	sizeCache          protoimpl.SizeCache
}

func (x *StreamCountryChangeEventsResponse) Reset() {
	*x = StreamCountryChangeEventsResponse{}
	mi := &file_wgtwo_subscription_v1_subscription_events_proto_msgTypes[5]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *StreamCountryChangeEventsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StreamCountryChangeEventsResponse) ProtoMessage() {}

func (x *StreamCountryChangeEventsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_wgtwo_subscription_v1_subscription_events_proto_msgTypes[5]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StreamCountryChangeEventsResponse.ProtoReflect.Descriptor instead.
func (*StreamCountryChangeEventsResponse) Descriptor() ([]byte, []int) {
	return file_wgtwo_subscription_v1_subscription_events_proto_rawDescGZIP(), []int{5}
}

func (x *StreamCountryChangeEventsResponse) GetMetadata() *v1.Metadata {
	if x != nil {
		return x.Metadata
	}
	return nil
}

func (x *StreamCountryChangeEventsResponse) GetCountryChangeEvent() *CountryChangeEvent {
	if x != nil {
		return x.CountryChangeEvent
	}
	return nil
}

// Request message for acknowledging a country change event.
type AckCountryChangeEventRequest struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Used to identify the event to acknowledge.
	AckInfo       *v1.AckInfo `protobuf:"bytes,1,opt,name=ack_info,json=ackInfo,proto3" json:"ack_info,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *AckCountryChangeEventRequest) Reset() {
	*x = AckCountryChangeEventRequest{}
	mi := &file_wgtwo_subscription_v1_subscription_events_proto_msgTypes[6]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *AckCountryChangeEventRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AckCountryChangeEventRequest) ProtoMessage() {}

func (x *AckCountryChangeEventRequest) ProtoReflect() protoreflect.Message {
	mi := &file_wgtwo_subscription_v1_subscription_events_proto_msgTypes[6]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AckCountryChangeEventRequest.ProtoReflect.Descriptor instead.
func (*AckCountryChangeEventRequest) Descriptor() ([]byte, []int) {
	return file_wgtwo_subscription_v1_subscription_events_proto_rawDescGZIP(), []int{6}
}

func (x *AckCountryChangeEventRequest) GetAckInfo() *v1.AckInfo {
	if x != nil {
		return x.AckInfo
	}
	return nil
}

// Response message for acknowledging a country change event.
type AckCountryChangeEventResponse struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// The status response (success/failure) of the acknowledgement.
	AckStatus     *v1.AckStatus `protobuf:"bytes,1,opt,name=ack_status,json=ackStatus,proto3" json:"ack_status,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *AckCountryChangeEventResponse) Reset() {
	*x = AckCountryChangeEventResponse{}
	mi := &file_wgtwo_subscription_v1_subscription_events_proto_msgTypes[7]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *AckCountryChangeEventResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AckCountryChangeEventResponse) ProtoMessage() {}

func (x *AckCountryChangeEventResponse) ProtoReflect() protoreflect.Message {
	mi := &file_wgtwo_subscription_v1_subscription_events_proto_msgTypes[7]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AckCountryChangeEventResponse.ProtoReflect.Descriptor instead.
func (*AckCountryChangeEventResponse) Descriptor() ([]byte, []int) {
	return file_wgtwo_subscription_v1_subscription_events_proto_rawDescGZIP(), []int{7}
}

func (x *AckCountryChangeEventResponse) GetAckStatus() *v1.AckStatus {
	if x != nil {
		return x.AckStatus
	}
	return nil
}

// Request message for streaming of first attachment events.
type StreamFirstAttachmentEventsRequest struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Configuration for the stream.
	StreamConfiguration *v1.StreamConfiguration `protobuf:"bytes,1,opt,name=stream_configuration,json=streamConfiguration,proto3" json:"stream_configuration,omitempty"`
	unknownFields       protoimpl.UnknownFields
	sizeCache           protoimpl.SizeCache
}

func (x *StreamFirstAttachmentEventsRequest) Reset() {
	*x = StreamFirstAttachmentEventsRequest{}
	mi := &file_wgtwo_subscription_v1_subscription_events_proto_msgTypes[8]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *StreamFirstAttachmentEventsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StreamFirstAttachmentEventsRequest) ProtoMessage() {}

func (x *StreamFirstAttachmentEventsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_wgtwo_subscription_v1_subscription_events_proto_msgTypes[8]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StreamFirstAttachmentEventsRequest.ProtoReflect.Descriptor instead.
func (*StreamFirstAttachmentEventsRequest) Descriptor() ([]byte, []int) {
	return file_wgtwo_subscription_v1_subscription_events_proto_rawDescGZIP(), []int{8}
}

func (x *StreamFirstAttachmentEventsRequest) GetStreamConfiguration() *v1.StreamConfiguration {
	if x != nil {
		return x.StreamConfiguration
	}
	return nil
}

// Response message for streaming of first attachment events.
type StreamFirstAttachmentEventsResponse struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Metadata for the stream.
	Metadata *v1.Metadata `protobuf:"bytes,1,opt,name=metadata,proto3" json:"metadata,omitempty"`
	// The first attachment event.
	FirstAttachmentEvent *FirstAttachmentEvent `protobuf:"bytes,2,opt,name=first_attachment_event,json=firstAttachmentEvent,proto3" json:"first_attachment_event,omitempty"`
	unknownFields        protoimpl.UnknownFields
	sizeCache            protoimpl.SizeCache
}

func (x *StreamFirstAttachmentEventsResponse) Reset() {
	*x = StreamFirstAttachmentEventsResponse{}
	mi := &file_wgtwo_subscription_v1_subscription_events_proto_msgTypes[9]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *StreamFirstAttachmentEventsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StreamFirstAttachmentEventsResponse) ProtoMessage() {}

func (x *StreamFirstAttachmentEventsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_wgtwo_subscription_v1_subscription_events_proto_msgTypes[9]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StreamFirstAttachmentEventsResponse.ProtoReflect.Descriptor instead.
func (*StreamFirstAttachmentEventsResponse) Descriptor() ([]byte, []int) {
	return file_wgtwo_subscription_v1_subscription_events_proto_rawDescGZIP(), []int{9}
}

func (x *StreamFirstAttachmentEventsResponse) GetMetadata() *v1.Metadata {
	if x != nil {
		return x.Metadata
	}
	return nil
}

func (x *StreamFirstAttachmentEventsResponse) GetFirstAttachmentEvent() *FirstAttachmentEvent {
	if x != nil {
		return x.FirstAttachmentEvent
	}
	return nil
}

// Request message for acknowledging a first attachment event.
type AckFirstAttachmentEventRequest struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Used to identify the event to acknowledge.
	AckInfo       *v1.AckInfo `protobuf:"bytes,1,opt,name=ack_info,json=ackInfo,proto3" json:"ack_info,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *AckFirstAttachmentEventRequest) Reset() {
	*x = AckFirstAttachmentEventRequest{}
	mi := &file_wgtwo_subscription_v1_subscription_events_proto_msgTypes[10]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *AckFirstAttachmentEventRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AckFirstAttachmentEventRequest) ProtoMessage() {}

func (x *AckFirstAttachmentEventRequest) ProtoReflect() protoreflect.Message {
	mi := &file_wgtwo_subscription_v1_subscription_events_proto_msgTypes[10]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AckFirstAttachmentEventRequest.ProtoReflect.Descriptor instead.
func (*AckFirstAttachmentEventRequest) Descriptor() ([]byte, []int) {
	return file_wgtwo_subscription_v1_subscription_events_proto_rawDescGZIP(), []int{10}
}

func (x *AckFirstAttachmentEventRequest) GetAckInfo() *v1.AckInfo {
	if x != nil {
		return x.AckInfo
	}
	return nil
}

// Response message for acknowledging a first attachment event.
type AckFirstAttachmentEventResponse struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// The status response (success/failure) of the acknowledgement.
	AckStatus     *v1.AckStatus `protobuf:"bytes,1,opt,name=ack_status,json=ackStatus,proto3" json:"ack_status,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *AckFirstAttachmentEventResponse) Reset() {
	*x = AckFirstAttachmentEventResponse{}
	mi := &file_wgtwo_subscription_v1_subscription_events_proto_msgTypes[11]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *AckFirstAttachmentEventResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AckFirstAttachmentEventResponse) ProtoMessage() {}

func (x *AckFirstAttachmentEventResponse) ProtoReflect() protoreflect.Message {
	mi := &file_wgtwo_subscription_v1_subscription_events_proto_msgTypes[11]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AckFirstAttachmentEventResponse.ProtoReflect.Descriptor instead.
func (*AckFirstAttachmentEventResponse) Descriptor() ([]byte, []int) {
	return file_wgtwo_subscription_v1_subscription_events_proto_rawDescGZIP(), []int{11}
}

func (x *AckFirstAttachmentEventResponse) GetAckStatus() *v1.AckStatus {
	if x != nil {
		return x.AckStatus
	}
	return nil
}

// Request message for streaming of periodic country events.
type StreamPeriodicCountryEventsRequest struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Configuration for the stream.
	StreamConfiguration *v1.StreamConfiguration `protobuf:"bytes,1,opt,name=stream_configuration,json=streamConfiguration,proto3" json:"stream_configuration,omitempty"`
	unknownFields       protoimpl.UnknownFields
	sizeCache           protoimpl.SizeCache
}

func (x *StreamPeriodicCountryEventsRequest) Reset() {
	*x = StreamPeriodicCountryEventsRequest{}
	mi := &file_wgtwo_subscription_v1_subscription_events_proto_msgTypes[12]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *StreamPeriodicCountryEventsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StreamPeriodicCountryEventsRequest) ProtoMessage() {}

func (x *StreamPeriodicCountryEventsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_wgtwo_subscription_v1_subscription_events_proto_msgTypes[12]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StreamPeriodicCountryEventsRequest.ProtoReflect.Descriptor instead.
func (*StreamPeriodicCountryEventsRequest) Descriptor() ([]byte, []int) {
	return file_wgtwo_subscription_v1_subscription_events_proto_rawDescGZIP(), []int{12}
}

func (x *StreamPeriodicCountryEventsRequest) GetStreamConfiguration() *v1.StreamConfiguration {
	if x != nil {
		return x.StreamConfiguration
	}
	return nil
}

// Response message for streaming of periodic country events.
type StreamPeriodicCountryEventsResponse struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Metadata for the stream.
	Metadata *v1.Metadata `protobuf:"bytes,1,opt,name=metadata,proto3" json:"metadata,omitempty"`
	// The periodic country event.
	PeriodicCountryEvent *PeriodicCountryEvent `protobuf:"bytes,2,opt,name=periodic_country_event,json=periodicCountryEvent,proto3" json:"periodic_country_event,omitempty"`
	unknownFields        protoimpl.UnknownFields
	sizeCache            protoimpl.SizeCache
}

func (x *StreamPeriodicCountryEventsResponse) Reset() {
	*x = StreamPeriodicCountryEventsResponse{}
	mi := &file_wgtwo_subscription_v1_subscription_events_proto_msgTypes[13]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *StreamPeriodicCountryEventsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StreamPeriodicCountryEventsResponse) ProtoMessage() {}

func (x *StreamPeriodicCountryEventsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_wgtwo_subscription_v1_subscription_events_proto_msgTypes[13]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StreamPeriodicCountryEventsResponse.ProtoReflect.Descriptor instead.
func (*StreamPeriodicCountryEventsResponse) Descriptor() ([]byte, []int) {
	return file_wgtwo_subscription_v1_subscription_events_proto_rawDescGZIP(), []int{13}
}

func (x *StreamPeriodicCountryEventsResponse) GetMetadata() *v1.Metadata {
	if x != nil {
		return x.Metadata
	}
	return nil
}

func (x *StreamPeriodicCountryEventsResponse) GetPeriodicCountryEvent() *PeriodicCountryEvent {
	if x != nil {
		return x.PeriodicCountryEvent
	}
	return nil
}

// Request message for acknowledging a periodic country event.
type AckPeriodicCountryEventRequest struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Used to identify the event to acknowledge.
	AckInfo       *v1.AckInfo `protobuf:"bytes,1,opt,name=ack_info,json=ackInfo,proto3" json:"ack_info,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *AckPeriodicCountryEventRequest) Reset() {
	*x = AckPeriodicCountryEventRequest{}
	mi := &file_wgtwo_subscription_v1_subscription_events_proto_msgTypes[14]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *AckPeriodicCountryEventRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AckPeriodicCountryEventRequest) ProtoMessage() {}

func (x *AckPeriodicCountryEventRequest) ProtoReflect() protoreflect.Message {
	mi := &file_wgtwo_subscription_v1_subscription_events_proto_msgTypes[14]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AckPeriodicCountryEventRequest.ProtoReflect.Descriptor instead.
func (*AckPeriodicCountryEventRequest) Descriptor() ([]byte, []int) {
	return file_wgtwo_subscription_v1_subscription_events_proto_rawDescGZIP(), []int{14}
}

func (x *AckPeriodicCountryEventRequest) GetAckInfo() *v1.AckInfo {
	if x != nil {
		return x.AckInfo
	}
	return nil
}

// Response message for acknowledging a periodic country event.
type AckPeriodicCountryEventResponse struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// The status response (success/failure) of the acknowledgement.
	AckStatus     *v1.AckStatus `protobuf:"bytes,1,opt,name=ack_status,json=ackStatus,proto3" json:"ack_status,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *AckPeriodicCountryEventResponse) Reset() {
	*x = AckPeriodicCountryEventResponse{}
	mi := &file_wgtwo_subscription_v1_subscription_events_proto_msgTypes[15]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *AckPeriodicCountryEventResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AckPeriodicCountryEventResponse) ProtoMessage() {}

func (x *AckPeriodicCountryEventResponse) ProtoReflect() protoreflect.Message {
	mi := &file_wgtwo_subscription_v1_subscription_events_proto_msgTypes[15]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AckPeriodicCountryEventResponse.ProtoReflect.Descriptor instead.
func (*AckPeriodicCountryEventResponse) Descriptor() ([]byte, []int) {
	return file_wgtwo_subscription_v1_subscription_events_proto_rawDescGZIP(), []int{15}
}

func (x *AckPeriodicCountryEventResponse) GetAckStatus() *v1.AckStatus {
	if x != nil {
		return x.AckStatus
	}
	return nil
}

// Handset message
type Handset struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// The International Mobile station Equipment Identity and Software Version number.
	ImeiSv        *v11.ImeiSv `protobuf:"bytes,1,opt,name=imei_sv,json=imeiSv,proto3" json:"imei_sv,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Handset) Reset() {
	*x = Handset{}
	mi := &file_wgtwo_subscription_v1_subscription_events_proto_msgTypes[16]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Handset) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Handset) ProtoMessage() {}

func (x *Handset) ProtoReflect() protoreflect.Message {
	mi := &file_wgtwo_subscription_v1_subscription_events_proto_msgTypes[16]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Handset.ProtoReflect.Descriptor instead.
func (*Handset) Descriptor() ([]byte, []int) {
	return file_wgtwo_subscription_v1_subscription_events_proto_rawDescGZIP(), []int{16}
}

func (x *Handset) GetImeiSv() *v11.ImeiSv {
	if x != nil {
		return x.ImeiSv
	}
	return nil
}

// The handset change event message
type HandsetChangeEvent struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// The international number of the subscriber.
	Number *v11.E164 `protobuf:"bytes,4,opt,name=number,proto3" json:"number,omitempty"`
	// The IMSI for the SIM card that has been observed. This is PII sensitive information, and
	// needs to be handled with care.
	Imsi *v11.Imsi `protobuf:"bytes,3,opt,name=imsi,proto3" json:"imsi,omitempty"`
	// The previously stored handset info, may be empty.
	Previous *Handset `protobuf:"bytes,1,opt,name=previous,proto3" json:"previous,omitempty"`
	// The updated handset info
	Current       *Handset `protobuf:"bytes,2,opt,name=current,proto3" json:"current,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *HandsetChangeEvent) Reset() {
	*x = HandsetChangeEvent{}
	mi := &file_wgtwo_subscription_v1_subscription_events_proto_msgTypes[17]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *HandsetChangeEvent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HandsetChangeEvent) ProtoMessage() {}

func (x *HandsetChangeEvent) ProtoReflect() protoreflect.Message {
	mi := &file_wgtwo_subscription_v1_subscription_events_proto_msgTypes[17]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HandsetChangeEvent.ProtoReflect.Descriptor instead.
func (*HandsetChangeEvent) Descriptor() ([]byte, []int) {
	return file_wgtwo_subscription_v1_subscription_events_proto_rawDescGZIP(), []int{17}
}

func (x *HandsetChangeEvent) GetNumber() *v11.E164 {
	if x != nil {
		return x.Number
	}
	return nil
}

func (x *HandsetChangeEvent) GetImsi() *v11.Imsi {
	if x != nil {
		return x.Imsi
	}
	return nil
}

func (x *HandsetChangeEvent) GetPrevious() *Handset {
	if x != nil {
		return x.Previous
	}
	return nil
}

func (x *HandsetChangeEvent) GetCurrent() *Handset {
	if x != nil {
		return x.Current
	}
	return nil
}

// The country change event message
type CountryChangeEvent struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// The international number of the subscriber.
	Number *v11.E164 `protobuf:"bytes,3,opt,name=number,proto3" json:"number,omitempty"`
	// The country the subscriber moved from.
	Previous *v11.Country `protobuf:"bytes,1,opt,name=previous,proto3" json:"previous,omitempty"`
	// The country the subscriber moved to.
	Current       *v11.Country `protobuf:"bytes,2,opt,name=current,proto3" json:"current,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CountryChangeEvent) Reset() {
	*x = CountryChangeEvent{}
	mi := &file_wgtwo_subscription_v1_subscription_events_proto_msgTypes[18]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CountryChangeEvent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CountryChangeEvent) ProtoMessage() {}

func (x *CountryChangeEvent) ProtoReflect() protoreflect.Message {
	mi := &file_wgtwo_subscription_v1_subscription_events_proto_msgTypes[18]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CountryChangeEvent.ProtoReflect.Descriptor instead.
func (*CountryChangeEvent) Descriptor() ([]byte, []int) {
	return file_wgtwo_subscription_v1_subscription_events_proto_rawDescGZIP(), []int{18}
}

func (x *CountryChangeEvent) GetNumber() *v11.E164 {
	if x != nil {
		return x.Number
	}
	return nil
}

func (x *CountryChangeEvent) GetPrevious() *v11.Country {
	if x != nil {
		return x.Previous
	}
	return nil
}

func (x *CountryChangeEvent) GetCurrent() *v11.Country {
	if x != nil {
		return x.Current
	}
	return nil
}

// The first attachment event message
type FirstAttachmentEvent struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// The international number of the subscriber.
	Number *v11.E164 `protobuf:"bytes,1,opt,name=number,proto3" json:"number,omitempty"`
	// The IMSI for the SIM card that has been observed. This is PII sensitive information, and
	// needs to be handled with care.
	Imsi          *v11.Imsi `protobuf:"bytes,2,opt,name=imsi,proto3" json:"imsi,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *FirstAttachmentEvent) Reset() {
	*x = FirstAttachmentEvent{}
	mi := &file_wgtwo_subscription_v1_subscription_events_proto_msgTypes[19]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *FirstAttachmentEvent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FirstAttachmentEvent) ProtoMessage() {}

func (x *FirstAttachmentEvent) ProtoReflect() protoreflect.Message {
	mi := &file_wgtwo_subscription_v1_subscription_events_proto_msgTypes[19]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FirstAttachmentEvent.ProtoReflect.Descriptor instead.
func (*FirstAttachmentEvent) Descriptor() ([]byte, []int) {
	return file_wgtwo_subscription_v1_subscription_events_proto_rawDescGZIP(), []int{19}
}

func (x *FirstAttachmentEvent) GetNumber() *v11.E164 {
	if x != nil {
		return x.Number
	}
	return nil
}

func (x *FirstAttachmentEvent) GetImsi() *v11.Imsi {
	if x != nil {
		return x.Imsi
	}
	return nil
}

// The periodic country event message
type PeriodicCountryEvent struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// The international number of the subscriber.
	Number *v11.E164 `protobuf:"bytes,1,opt,name=number,proto3" json:"number,omitempty"`
	// The IMSI for the SIM card that has been observed. This is PII sensitive information, and
	// needs to be handled with care.
	Imsi *v11.Imsi `protobuf:"bytes,2,opt,name=imsi,proto3" json:"imsi,omitempty"`
	// The country for which the SIM card is observed.
	Country       *v11.Country `protobuf:"bytes,3,opt,name=country,proto3" json:"country,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *PeriodicCountryEvent) Reset() {
	*x = PeriodicCountryEvent{}
	mi := &file_wgtwo_subscription_v1_subscription_events_proto_msgTypes[20]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *PeriodicCountryEvent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PeriodicCountryEvent) ProtoMessage() {}

func (x *PeriodicCountryEvent) ProtoReflect() protoreflect.Message {
	mi := &file_wgtwo_subscription_v1_subscription_events_proto_msgTypes[20]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PeriodicCountryEvent.ProtoReflect.Descriptor instead.
func (*PeriodicCountryEvent) Descriptor() ([]byte, []int) {
	return file_wgtwo_subscription_v1_subscription_events_proto_rawDescGZIP(), []int{20}
}

func (x *PeriodicCountryEvent) GetNumber() *v11.E164 {
	if x != nil {
		return x.Number
	}
	return nil
}

func (x *PeriodicCountryEvent) GetImsi() *v11.Imsi {
	if x != nil {
		return x.Imsi
	}
	return nil
}

func (x *PeriodicCountryEvent) GetCountry() *v11.Country {
	if x != nil {
		return x.Country
	}
	return nil
}

var File_wgtwo_subscription_v1_subscription_events_proto protoreflect.FileDescriptor

const file_wgtwo_subscription_v1_subscription_events_proto_rawDesc = "" +
	"\n" +
	"/wgtwo/subscription/v1/subscription_events.proto\x12\x15wgtwo.subscription.v1\x1a#wgtwo/annotations/annotations.proto\x1a!wgtwo/common/v1/phonenumber.proto\x1a\x1bwgtwo/common/v1/types.proto\x1a\x1cwgtwo/events/v1/events.proto\"{\n" +
	" StreamHandsetChangeEventsRequest\x12W\n" +
	"\x14stream_configuration\x18\x01 \x01(\v2$.wgtwo.events.v1.StreamConfigurationR\x13streamConfiguration\"\xb7\x01\n" +
	"!StreamHandsetChangeEventsResponse\x125\n" +
	"\bmetadata\x18\x01 \x01(\v2\x19.wgtwo.events.v1.MetadataR\bmetadata\x12[\n" +
	"\x14handset_change_event\x18\x02 \x01(\v2).wgtwo.subscription.v1.HandsetChangeEventR\x12handsetChangeEvent\"S\n" +
	"\x1cAckHandsetChangeEventRequest\x123\n" +
	"\back_info\x18\x01 \x01(\v2\x18.wgtwo.events.v1.AckInfoR\aackInfo\"Z\n" +
	"\x1dAckHandsetChangeEventResponse\x129\n" +
	"\n" +
	"ack_status\x18\x01 \x01(\v2\x1a.wgtwo.events.v1.AckStatusR\tackStatus\"{\n" +
	" StreamCountryChangeEventsRequest\x12W\n" +
	"\x14stream_configuration\x18\x01 \x01(\v2$.wgtwo.events.v1.StreamConfigurationR\x13streamConfiguration\"\xb7\x01\n" +
	"!StreamCountryChangeEventsResponse\x125\n" +
	"\bmetadata\x18\x01 \x01(\v2\x19.wgtwo.events.v1.MetadataR\bmetadata\x12[\n" +
	"\x14country_change_event\x18\x02 \x01(\v2).wgtwo.subscription.v1.CountryChangeEventR\x12countryChangeEvent\"S\n" +
	"\x1cAckCountryChangeEventRequest\x123\n" +
	"\back_info\x18\x01 \x01(\v2\x18.wgtwo.events.v1.AckInfoR\aackInfo\"Z\n" +
	"\x1dAckCountryChangeEventResponse\x129\n" +
	"\n" +
	"ack_status\x18\x01 \x01(\v2\x1a.wgtwo.events.v1.AckStatusR\tackStatus\"}\n" +
	"\"StreamFirstAttachmentEventsRequest\x12W\n" +
	"\x14stream_configuration\x18\x01 \x01(\v2$.wgtwo.events.v1.StreamConfigurationR\x13streamConfiguration\"\xbf\x01\n" +
	"#StreamFirstAttachmentEventsResponse\x125\n" +
	"\bmetadata\x18\x01 \x01(\v2\x19.wgtwo.events.v1.MetadataR\bmetadata\x12a\n" +
	"\x16first_attachment_event\x18\x02 \x01(\v2+.wgtwo.subscription.v1.FirstAttachmentEventR\x14firstAttachmentEvent\"U\n" +
	"\x1eAckFirstAttachmentEventRequest\x123\n" +
	"\back_info\x18\x01 \x01(\v2\x18.wgtwo.events.v1.AckInfoR\aackInfo\"\\\n" +
	"\x1fAckFirstAttachmentEventResponse\x129\n" +
	"\n" +
	"ack_status\x18\x01 \x01(\v2\x1a.wgtwo.events.v1.AckStatusR\tackStatus\"}\n" +
	"\"StreamPeriodicCountryEventsRequest\x12W\n" +
	"\x14stream_configuration\x18\x01 \x01(\v2$.wgtwo.events.v1.StreamConfigurationR\x13streamConfiguration\"\xbf\x01\n" +
	"#StreamPeriodicCountryEventsResponse\x125\n" +
	"\bmetadata\x18\x01 \x01(\v2\x19.wgtwo.events.v1.MetadataR\bmetadata\x12a\n" +
	"\x16periodic_country_event\x18\x02 \x01(\v2+.wgtwo.subscription.v1.PeriodicCountryEventR\x14periodicCountryEvent\"U\n" +
	"\x1eAckPeriodicCountryEventRequest\x123\n" +
	"\back_info\x18\x01 \x01(\v2\x18.wgtwo.events.v1.AckInfoR\aackInfo\"\\\n" +
	"\x1fAckPeriodicCountryEventResponse\x129\n" +
	"\n" +
	"ack_status\x18\x01 \x01(\v2\x1a.wgtwo.events.v1.AckStatusR\tackStatus\";\n" +
	"\aHandset\x120\n" +
	"\aimei_sv\x18\x01 \x01(\v2\x17.wgtwo.common.v1.ImeiSvR\x06imeiSv\"\xe4\x01\n" +
	"\x12HandsetChangeEvent\x12-\n" +
	"\x06number\x18\x04 \x01(\v2\x15.wgtwo.common.v1.E164R\x06number\x12)\n" +
	"\x04imsi\x18\x03 \x01(\v2\x15.wgtwo.common.v1.ImsiR\x04imsi\x12:\n" +
	"\bprevious\x18\x01 \x01(\v2\x1e.wgtwo.subscription.v1.HandsetR\bprevious\x128\n" +
	"\acurrent\x18\x02 \x01(\v2\x1e.wgtwo.subscription.v1.HandsetR\acurrent\"\xad\x01\n" +
	"\x12CountryChangeEvent\x12-\n" +
	"\x06number\x18\x03 \x01(\v2\x15.wgtwo.common.v1.E164R\x06number\x124\n" +
	"\bprevious\x18\x01 \x01(\v2\x18.wgtwo.common.v1.CountryR\bprevious\x122\n" +
	"\acurrent\x18\x02 \x01(\v2\x18.wgtwo.common.v1.CountryR\acurrent\"p\n" +
	"\x14FirstAttachmentEvent\x12-\n" +
	"\x06number\x18\x01 \x01(\v2\x15.wgtwo.common.v1.E164R\x06number\x12)\n" +
	"\x04imsi\x18\x02 \x01(\v2\x15.wgtwo.common.v1.ImsiR\x04imsi\"\xa4\x01\n" +
	"\x14PeriodicCountryEvent\x12-\n" +
	"\x06number\x18\x01 \x01(\v2\x15.wgtwo.common.v1.E164R\x06number\x12)\n" +
	"\x04imsi\x18\x02 \x01(\v2\x15.wgtwo.common.v1.ImsiR\x04imsi\x122\n" +
	"\acountry\x18\x03 \x01(\v2\x18.wgtwo.common.v1.CountryR\acountry2\xcc\v\n" +
	"\x18SubscriptionEventService\x12\xb7\x01\n" +
	"\x19StreamHandsetChangeEvents\x127.wgtwo.subscription.v1.StreamHandsetChangeEventsRequest\x1a8.wgtwo.subscription.v1.StreamHandsetChangeEventsResponse\"%\xea\xb5\x18!subscription.handset_details:read0\x01\x12\xa9\x01\n" +
	"\x15AckHandsetChangeEvent\x123.wgtwo.subscription.v1.AckHandsetChangeEventRequest\x1a4.wgtwo.subscription.v1.AckHandsetChangeEventResponse\"%\xea\xb5\x18!subscription.handset_details:read\x12\xbe\x01\n" +
	"\x1bStreamFirstAttachmentEvents\x129.wgtwo.subscription.v1.StreamFirstAttachmentEventsRequest\x1a:.wgtwo.subscription.v1.StreamFirstAttachmentEventsResponse\"&\xea\xb5\x18\"subscription.first_attachment:read0\x01\x12\xb0\x01\n" +
	"\x17AckFirstAttachmentEvent\x125.wgtwo.subscription.v1.AckFirstAttachmentEventRequest\x1a6.wgtwo.subscription.v1.AckFirstAttachmentEventResponse\"&\xea\xb5\x18\"subscription.first_attachment:read\x12\xb6\x01\n" +
	"\x19StreamCountryChangeEvents\x127.wgtwo.subscription.v1.StreamCountryChangeEventsRequest\x1a8.wgtwo.subscription.v1.StreamCountryChangeEventsResponse\"$\xea\xb5\x18 subscription.country_change:read0\x01\x12\xa8\x01\n" +
	"\x15AckCountryChangeEvent\x123.wgtwo.subscription.v1.AckCountryChangeEventRequest\x1a4.wgtwo.subscription.v1.AckCountryChangeEventResponse\"$\xea\xb5\x18 subscription.country_change:read\x12\xbe\x01\n" +
	"\x1bStreamPeriodicCountryEvents\x129.wgtwo.subscription.v1.StreamPeriodicCountryEventsRequest\x1a:.wgtwo.subscription.v1.StreamPeriodicCountryEventsResponse\"&\xea\xb5\x18\"subscription.periodic_country:read0\x01\x12\xb0\x01\n" +
	"\x17AckPeriodicCountryEvent\x125.wgtwo.subscription.v1.AckPeriodicCountryEventRequest\x1a6.wgtwo.subscription.v1.AckPeriodicCountryEventResponse\"&\xea\xb5\x18\"subscription.periodic_country:readB\xe9\x01\n" +
	"\x19com.wgtwo.subscription.v1B\x17SubscriptionEventsProtoP\x01Z=github.com/working-group-two/wgtwoapis/wgtwo/subscriptions/v1\xa2\x02\x03WSX\xaa\x02\x15Wgtwo.Subscription.V1\xca\x02\x15Wgtwo\\Subscription\\V1\xe2\x02!Wgtwo\\Subscription\\V1\\GPBMetadata\xea\x02\x17Wgtwo::Subscription::V1b\x06proto3"

var (
	file_wgtwo_subscription_v1_subscription_events_proto_rawDescOnce sync.Once
	file_wgtwo_subscription_v1_subscription_events_proto_rawDescData []byte
)

func file_wgtwo_subscription_v1_subscription_events_proto_rawDescGZIP() []byte {
	file_wgtwo_subscription_v1_subscription_events_proto_rawDescOnce.Do(func() {
		file_wgtwo_subscription_v1_subscription_events_proto_rawDescData = protoimpl.X.CompressGZIP(unsafe.Slice(unsafe.StringData(file_wgtwo_subscription_v1_subscription_events_proto_rawDesc), len(file_wgtwo_subscription_v1_subscription_events_proto_rawDesc)))
	})
	return file_wgtwo_subscription_v1_subscription_events_proto_rawDescData
}

var file_wgtwo_subscription_v1_subscription_events_proto_msgTypes = make([]protoimpl.MessageInfo, 21)
var file_wgtwo_subscription_v1_subscription_events_proto_goTypes = []any{
	(*StreamHandsetChangeEventsRequest)(nil),    // 0: wgtwo.subscription.v1.StreamHandsetChangeEventsRequest
	(*StreamHandsetChangeEventsResponse)(nil),   // 1: wgtwo.subscription.v1.StreamHandsetChangeEventsResponse
	(*AckHandsetChangeEventRequest)(nil),        // 2: wgtwo.subscription.v1.AckHandsetChangeEventRequest
	(*AckHandsetChangeEventResponse)(nil),       // 3: wgtwo.subscription.v1.AckHandsetChangeEventResponse
	(*StreamCountryChangeEventsRequest)(nil),    // 4: wgtwo.subscription.v1.StreamCountryChangeEventsRequest
	(*StreamCountryChangeEventsResponse)(nil),   // 5: wgtwo.subscription.v1.StreamCountryChangeEventsResponse
	(*AckCountryChangeEventRequest)(nil),        // 6: wgtwo.subscription.v1.AckCountryChangeEventRequest
	(*AckCountryChangeEventResponse)(nil),       // 7: wgtwo.subscription.v1.AckCountryChangeEventResponse
	(*StreamFirstAttachmentEventsRequest)(nil),  // 8: wgtwo.subscription.v1.StreamFirstAttachmentEventsRequest
	(*StreamFirstAttachmentEventsResponse)(nil), // 9: wgtwo.subscription.v1.StreamFirstAttachmentEventsResponse
	(*AckFirstAttachmentEventRequest)(nil),      // 10: wgtwo.subscription.v1.AckFirstAttachmentEventRequest
	(*AckFirstAttachmentEventResponse)(nil),     // 11: wgtwo.subscription.v1.AckFirstAttachmentEventResponse
	(*StreamPeriodicCountryEventsRequest)(nil),  // 12: wgtwo.subscription.v1.StreamPeriodicCountryEventsRequest
	(*StreamPeriodicCountryEventsResponse)(nil), // 13: wgtwo.subscription.v1.StreamPeriodicCountryEventsResponse
	(*AckPeriodicCountryEventRequest)(nil),      // 14: wgtwo.subscription.v1.AckPeriodicCountryEventRequest
	(*AckPeriodicCountryEventResponse)(nil),     // 15: wgtwo.subscription.v1.AckPeriodicCountryEventResponse
	(*Handset)(nil),                             // 16: wgtwo.subscription.v1.Handset
	(*HandsetChangeEvent)(nil),                  // 17: wgtwo.subscription.v1.HandsetChangeEvent
	(*CountryChangeEvent)(nil),                  // 18: wgtwo.subscription.v1.CountryChangeEvent
	(*FirstAttachmentEvent)(nil),                // 19: wgtwo.subscription.v1.FirstAttachmentEvent
	(*PeriodicCountryEvent)(nil),                // 20: wgtwo.subscription.v1.PeriodicCountryEvent
	(*v1.StreamConfiguration)(nil),              // 21: wgtwo.events.v1.StreamConfiguration
	(*v1.Metadata)(nil),                         // 22: wgtwo.events.v1.Metadata
	(*v1.AckInfo)(nil),                          // 23: wgtwo.events.v1.AckInfo
	(*v1.AckStatus)(nil),                        // 24: wgtwo.events.v1.AckStatus
	(*v11.ImeiSv)(nil),                          // 25: wgtwo.common.v1.ImeiSv
	(*v11.E164)(nil),                            // 26: wgtwo.common.v1.E164
	(*v11.Imsi)(nil),                            // 27: wgtwo.common.v1.Imsi
	(*v11.Country)(nil),                         // 28: wgtwo.common.v1.Country
}
var file_wgtwo_subscription_v1_subscription_events_proto_depIdxs = []int32{
	21, // 0: wgtwo.subscription.v1.StreamHandsetChangeEventsRequest.stream_configuration:type_name -> wgtwo.events.v1.StreamConfiguration
	22, // 1: wgtwo.subscription.v1.StreamHandsetChangeEventsResponse.metadata:type_name -> wgtwo.events.v1.Metadata
	17, // 2: wgtwo.subscription.v1.StreamHandsetChangeEventsResponse.handset_change_event:type_name -> wgtwo.subscription.v1.HandsetChangeEvent
	23, // 3: wgtwo.subscription.v1.AckHandsetChangeEventRequest.ack_info:type_name -> wgtwo.events.v1.AckInfo
	24, // 4: wgtwo.subscription.v1.AckHandsetChangeEventResponse.ack_status:type_name -> wgtwo.events.v1.AckStatus
	21, // 5: wgtwo.subscription.v1.StreamCountryChangeEventsRequest.stream_configuration:type_name -> wgtwo.events.v1.StreamConfiguration
	22, // 6: wgtwo.subscription.v1.StreamCountryChangeEventsResponse.metadata:type_name -> wgtwo.events.v1.Metadata
	18, // 7: wgtwo.subscription.v1.StreamCountryChangeEventsResponse.country_change_event:type_name -> wgtwo.subscription.v1.CountryChangeEvent
	23, // 8: wgtwo.subscription.v1.AckCountryChangeEventRequest.ack_info:type_name -> wgtwo.events.v1.AckInfo
	24, // 9: wgtwo.subscription.v1.AckCountryChangeEventResponse.ack_status:type_name -> wgtwo.events.v1.AckStatus
	21, // 10: wgtwo.subscription.v1.StreamFirstAttachmentEventsRequest.stream_configuration:type_name -> wgtwo.events.v1.StreamConfiguration
	22, // 11: wgtwo.subscription.v1.StreamFirstAttachmentEventsResponse.metadata:type_name -> wgtwo.events.v1.Metadata
	19, // 12: wgtwo.subscription.v1.StreamFirstAttachmentEventsResponse.first_attachment_event:type_name -> wgtwo.subscription.v1.FirstAttachmentEvent
	23, // 13: wgtwo.subscription.v1.AckFirstAttachmentEventRequest.ack_info:type_name -> wgtwo.events.v1.AckInfo
	24, // 14: wgtwo.subscription.v1.AckFirstAttachmentEventResponse.ack_status:type_name -> wgtwo.events.v1.AckStatus
	21, // 15: wgtwo.subscription.v1.StreamPeriodicCountryEventsRequest.stream_configuration:type_name -> wgtwo.events.v1.StreamConfiguration
	22, // 16: wgtwo.subscription.v1.StreamPeriodicCountryEventsResponse.metadata:type_name -> wgtwo.events.v1.Metadata
	20, // 17: wgtwo.subscription.v1.StreamPeriodicCountryEventsResponse.periodic_country_event:type_name -> wgtwo.subscription.v1.PeriodicCountryEvent
	23, // 18: wgtwo.subscription.v1.AckPeriodicCountryEventRequest.ack_info:type_name -> wgtwo.events.v1.AckInfo
	24, // 19: wgtwo.subscription.v1.AckPeriodicCountryEventResponse.ack_status:type_name -> wgtwo.events.v1.AckStatus
	25, // 20: wgtwo.subscription.v1.Handset.imei_sv:type_name -> wgtwo.common.v1.ImeiSv
	26, // 21: wgtwo.subscription.v1.HandsetChangeEvent.number:type_name -> wgtwo.common.v1.E164
	27, // 22: wgtwo.subscription.v1.HandsetChangeEvent.imsi:type_name -> wgtwo.common.v1.Imsi
	16, // 23: wgtwo.subscription.v1.HandsetChangeEvent.previous:type_name -> wgtwo.subscription.v1.Handset
	16, // 24: wgtwo.subscription.v1.HandsetChangeEvent.current:type_name -> wgtwo.subscription.v1.Handset
	26, // 25: wgtwo.subscription.v1.CountryChangeEvent.number:type_name -> wgtwo.common.v1.E164
	28, // 26: wgtwo.subscription.v1.CountryChangeEvent.previous:type_name -> wgtwo.common.v1.Country
	28, // 27: wgtwo.subscription.v1.CountryChangeEvent.current:type_name -> wgtwo.common.v1.Country
	26, // 28: wgtwo.subscription.v1.FirstAttachmentEvent.number:type_name -> wgtwo.common.v1.E164
	27, // 29: wgtwo.subscription.v1.FirstAttachmentEvent.imsi:type_name -> wgtwo.common.v1.Imsi
	26, // 30: wgtwo.subscription.v1.PeriodicCountryEvent.number:type_name -> wgtwo.common.v1.E164
	27, // 31: wgtwo.subscription.v1.PeriodicCountryEvent.imsi:type_name -> wgtwo.common.v1.Imsi
	28, // 32: wgtwo.subscription.v1.PeriodicCountryEvent.country:type_name -> wgtwo.common.v1.Country
	0,  // 33: wgtwo.subscription.v1.SubscriptionEventService.StreamHandsetChangeEvents:input_type -> wgtwo.subscription.v1.StreamHandsetChangeEventsRequest
	2,  // 34: wgtwo.subscription.v1.SubscriptionEventService.AckHandsetChangeEvent:input_type -> wgtwo.subscription.v1.AckHandsetChangeEventRequest
	8,  // 35: wgtwo.subscription.v1.SubscriptionEventService.StreamFirstAttachmentEvents:input_type -> wgtwo.subscription.v1.StreamFirstAttachmentEventsRequest
	10, // 36: wgtwo.subscription.v1.SubscriptionEventService.AckFirstAttachmentEvent:input_type -> wgtwo.subscription.v1.AckFirstAttachmentEventRequest
	4,  // 37: wgtwo.subscription.v1.SubscriptionEventService.StreamCountryChangeEvents:input_type -> wgtwo.subscription.v1.StreamCountryChangeEventsRequest
	6,  // 38: wgtwo.subscription.v1.SubscriptionEventService.AckCountryChangeEvent:input_type -> wgtwo.subscription.v1.AckCountryChangeEventRequest
	12, // 39: wgtwo.subscription.v1.SubscriptionEventService.StreamPeriodicCountryEvents:input_type -> wgtwo.subscription.v1.StreamPeriodicCountryEventsRequest
	14, // 40: wgtwo.subscription.v1.SubscriptionEventService.AckPeriodicCountryEvent:input_type -> wgtwo.subscription.v1.AckPeriodicCountryEventRequest
	1,  // 41: wgtwo.subscription.v1.SubscriptionEventService.StreamHandsetChangeEvents:output_type -> wgtwo.subscription.v1.StreamHandsetChangeEventsResponse
	3,  // 42: wgtwo.subscription.v1.SubscriptionEventService.AckHandsetChangeEvent:output_type -> wgtwo.subscription.v1.AckHandsetChangeEventResponse
	9,  // 43: wgtwo.subscription.v1.SubscriptionEventService.StreamFirstAttachmentEvents:output_type -> wgtwo.subscription.v1.StreamFirstAttachmentEventsResponse
	11, // 44: wgtwo.subscription.v1.SubscriptionEventService.AckFirstAttachmentEvent:output_type -> wgtwo.subscription.v1.AckFirstAttachmentEventResponse
	5,  // 45: wgtwo.subscription.v1.SubscriptionEventService.StreamCountryChangeEvents:output_type -> wgtwo.subscription.v1.StreamCountryChangeEventsResponse
	7,  // 46: wgtwo.subscription.v1.SubscriptionEventService.AckCountryChangeEvent:output_type -> wgtwo.subscription.v1.AckCountryChangeEventResponse
	13, // 47: wgtwo.subscription.v1.SubscriptionEventService.StreamPeriodicCountryEvents:output_type -> wgtwo.subscription.v1.StreamPeriodicCountryEventsResponse
	15, // 48: wgtwo.subscription.v1.SubscriptionEventService.AckPeriodicCountryEvent:output_type -> wgtwo.subscription.v1.AckPeriodicCountryEventResponse
	41, // [41:49] is the sub-list for method output_type
	33, // [33:41] is the sub-list for method input_type
	33, // [33:33] is the sub-list for extension type_name
	33, // [33:33] is the sub-list for extension extendee
	0,  // [0:33] is the sub-list for field type_name
}

func init() { file_wgtwo_subscription_v1_subscription_events_proto_init() }
func file_wgtwo_subscription_v1_subscription_events_proto_init() {
	if File_wgtwo_subscription_v1_subscription_events_proto != nil {
		return
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_wgtwo_subscription_v1_subscription_events_proto_rawDesc), len(file_wgtwo_subscription_v1_subscription_events_proto_rawDesc)),
			NumEnums:      0,
			NumMessages:   21,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_wgtwo_subscription_v1_subscription_events_proto_goTypes,
		DependencyIndexes: file_wgtwo_subscription_v1_subscription_events_proto_depIdxs,
		MessageInfos:      file_wgtwo_subscription_v1_subscription_events_proto_msgTypes,
	}.Build()
	File_wgtwo_subscription_v1_subscription_events_proto = out.File
	file_wgtwo_subscription_v1_subscription_events_proto_goTypes = nil
	file_wgtwo_subscription_v1_subscription_events_proto_depIdxs = nil
}
