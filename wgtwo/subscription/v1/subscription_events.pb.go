// Copyright 2021 Working Group Two AS
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.28.1
// 	protoc        (unknown)
// source: wgtwo/subscription/v1/subscription_events.proto

package v1

import (
	_ "github.com/working-group-two/wgtwoapis/wgtwo/annotations"
	v11 "github.com/working-group-two/wgtwoapis/wgtwo/common/v1"
	v1 "github.com/working-group-two/wgtwoapis/wgtwo/events/v1"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type StreamHandsetChangeEventsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	StreamConfiguration *v1.StreamConfiguration `protobuf:"bytes,1,opt,name=stream_configuration,json=streamConfiguration,proto3" json:"stream_configuration,omitempty"`
}

func (x *StreamHandsetChangeEventsRequest) Reset() {
	*x = StreamHandsetChangeEventsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_wgtwo_subscription_v1_subscription_events_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StreamHandsetChangeEventsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StreamHandsetChangeEventsRequest) ProtoMessage() {}

func (x *StreamHandsetChangeEventsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_wgtwo_subscription_v1_subscription_events_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StreamHandsetChangeEventsRequest.ProtoReflect.Descriptor instead.
func (*StreamHandsetChangeEventsRequest) Descriptor() ([]byte, []int) {
	return file_wgtwo_subscription_v1_subscription_events_proto_rawDescGZIP(), []int{0}
}

func (x *StreamHandsetChangeEventsRequest) GetStreamConfiguration() *v1.StreamConfiguration {
	if x != nil {
		return x.StreamConfiguration
	}
	return nil
}

type StreamHandsetChangeEventsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Metadata           *v1.Metadata        `protobuf:"bytes,1,opt,name=metadata,proto3" json:"metadata,omitempty"`
	HandsetChangeEvent *HandsetChangeEvent `protobuf:"bytes,2,opt,name=handset_change_event,json=handsetChangeEvent,proto3" json:"handset_change_event,omitempty"`
}

func (x *StreamHandsetChangeEventsResponse) Reset() {
	*x = StreamHandsetChangeEventsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_wgtwo_subscription_v1_subscription_events_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StreamHandsetChangeEventsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StreamHandsetChangeEventsResponse) ProtoMessage() {}

func (x *StreamHandsetChangeEventsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_wgtwo_subscription_v1_subscription_events_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StreamHandsetChangeEventsResponse.ProtoReflect.Descriptor instead.
func (*StreamHandsetChangeEventsResponse) Descriptor() ([]byte, []int) {
	return file_wgtwo_subscription_v1_subscription_events_proto_rawDescGZIP(), []int{1}
}

func (x *StreamHandsetChangeEventsResponse) GetMetadata() *v1.Metadata {
	if x != nil {
		return x.Metadata
	}
	return nil
}

func (x *StreamHandsetChangeEventsResponse) GetHandsetChangeEvent() *HandsetChangeEvent {
	if x != nil {
		return x.HandsetChangeEvent
	}
	return nil
}

type AckHandsetChangeEventRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AckInfo *v1.AckInfo `protobuf:"bytes,1,opt,name=ack_info,json=ackInfo,proto3" json:"ack_info,omitempty"`
}

func (x *AckHandsetChangeEventRequest) Reset() {
	*x = AckHandsetChangeEventRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_wgtwo_subscription_v1_subscription_events_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AckHandsetChangeEventRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AckHandsetChangeEventRequest) ProtoMessage() {}

func (x *AckHandsetChangeEventRequest) ProtoReflect() protoreflect.Message {
	mi := &file_wgtwo_subscription_v1_subscription_events_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AckHandsetChangeEventRequest.ProtoReflect.Descriptor instead.
func (*AckHandsetChangeEventRequest) Descriptor() ([]byte, []int) {
	return file_wgtwo_subscription_v1_subscription_events_proto_rawDescGZIP(), []int{2}
}

func (x *AckHandsetChangeEventRequest) GetAckInfo() *v1.AckInfo {
	if x != nil {
		return x.AckInfo
	}
	return nil
}

type AckHandsetChangeEventResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AckStatus *v1.AckStatus `protobuf:"bytes,1,opt,name=ack_status,json=ackStatus,proto3" json:"ack_status,omitempty"`
}

func (x *AckHandsetChangeEventResponse) Reset() {
	*x = AckHandsetChangeEventResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_wgtwo_subscription_v1_subscription_events_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AckHandsetChangeEventResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AckHandsetChangeEventResponse) ProtoMessage() {}

func (x *AckHandsetChangeEventResponse) ProtoReflect() protoreflect.Message {
	mi := &file_wgtwo_subscription_v1_subscription_events_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AckHandsetChangeEventResponse.ProtoReflect.Descriptor instead.
func (*AckHandsetChangeEventResponse) Descriptor() ([]byte, []int) {
	return file_wgtwo_subscription_v1_subscription_events_proto_rawDescGZIP(), []int{3}
}

func (x *AckHandsetChangeEventResponse) GetAckStatus() *v1.AckStatus {
	if x != nil {
		return x.AckStatus
	}
	return nil
}

type StreamCountryChangeEventsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	StreamConfiguration *v1.StreamConfiguration `protobuf:"bytes,1,opt,name=stream_configuration,json=streamConfiguration,proto3" json:"stream_configuration,omitempty"`
}

func (x *StreamCountryChangeEventsRequest) Reset() {
	*x = StreamCountryChangeEventsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_wgtwo_subscription_v1_subscription_events_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StreamCountryChangeEventsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StreamCountryChangeEventsRequest) ProtoMessage() {}

func (x *StreamCountryChangeEventsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_wgtwo_subscription_v1_subscription_events_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StreamCountryChangeEventsRequest.ProtoReflect.Descriptor instead.
func (*StreamCountryChangeEventsRequest) Descriptor() ([]byte, []int) {
	return file_wgtwo_subscription_v1_subscription_events_proto_rawDescGZIP(), []int{4}
}

func (x *StreamCountryChangeEventsRequest) GetStreamConfiguration() *v1.StreamConfiguration {
	if x != nil {
		return x.StreamConfiguration
	}
	return nil
}

type StreamCountryChangeEventsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Metadata           *v1.Metadata        `protobuf:"bytes,1,opt,name=metadata,proto3" json:"metadata,omitempty"`
	CountryChangeEvent *CountryChangeEvent `protobuf:"bytes,2,opt,name=country_change_event,json=countryChangeEvent,proto3" json:"country_change_event,omitempty"`
}

func (x *StreamCountryChangeEventsResponse) Reset() {
	*x = StreamCountryChangeEventsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_wgtwo_subscription_v1_subscription_events_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StreamCountryChangeEventsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StreamCountryChangeEventsResponse) ProtoMessage() {}

func (x *StreamCountryChangeEventsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_wgtwo_subscription_v1_subscription_events_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StreamCountryChangeEventsResponse.ProtoReflect.Descriptor instead.
func (*StreamCountryChangeEventsResponse) Descriptor() ([]byte, []int) {
	return file_wgtwo_subscription_v1_subscription_events_proto_rawDescGZIP(), []int{5}
}

func (x *StreamCountryChangeEventsResponse) GetMetadata() *v1.Metadata {
	if x != nil {
		return x.Metadata
	}
	return nil
}

func (x *StreamCountryChangeEventsResponse) GetCountryChangeEvent() *CountryChangeEvent {
	if x != nil {
		return x.CountryChangeEvent
	}
	return nil
}

type AckCountryChangeEventRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AckInfo *v1.AckInfo `protobuf:"bytes,1,opt,name=ack_info,json=ackInfo,proto3" json:"ack_info,omitempty"`
}

func (x *AckCountryChangeEventRequest) Reset() {
	*x = AckCountryChangeEventRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_wgtwo_subscription_v1_subscription_events_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AckCountryChangeEventRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AckCountryChangeEventRequest) ProtoMessage() {}

func (x *AckCountryChangeEventRequest) ProtoReflect() protoreflect.Message {
	mi := &file_wgtwo_subscription_v1_subscription_events_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AckCountryChangeEventRequest.ProtoReflect.Descriptor instead.
func (*AckCountryChangeEventRequest) Descriptor() ([]byte, []int) {
	return file_wgtwo_subscription_v1_subscription_events_proto_rawDescGZIP(), []int{6}
}

func (x *AckCountryChangeEventRequest) GetAckInfo() *v1.AckInfo {
	if x != nil {
		return x.AckInfo
	}
	return nil
}

type AckCountryChangeEventResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AckStatus *v1.AckStatus `protobuf:"bytes,1,opt,name=ack_status,json=ackStatus,proto3" json:"ack_status,omitempty"`
}

func (x *AckCountryChangeEventResponse) Reset() {
	*x = AckCountryChangeEventResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_wgtwo_subscription_v1_subscription_events_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AckCountryChangeEventResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AckCountryChangeEventResponse) ProtoMessage() {}

func (x *AckCountryChangeEventResponse) ProtoReflect() protoreflect.Message {
	mi := &file_wgtwo_subscription_v1_subscription_events_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AckCountryChangeEventResponse.ProtoReflect.Descriptor instead.
func (*AckCountryChangeEventResponse) Descriptor() ([]byte, []int) {
	return file_wgtwo_subscription_v1_subscription_events_proto_rawDescGZIP(), []int{7}
}

func (x *AckCountryChangeEventResponse) GetAckStatus() *v1.AckStatus {
	if x != nil {
		return x.AckStatus
	}
	return nil
}

type StreamFirstAttachmentEventsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	StreamConfiguration *v1.StreamConfiguration `protobuf:"bytes,1,opt,name=stream_configuration,json=streamConfiguration,proto3" json:"stream_configuration,omitempty"`
}

func (x *StreamFirstAttachmentEventsRequest) Reset() {
	*x = StreamFirstAttachmentEventsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_wgtwo_subscription_v1_subscription_events_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StreamFirstAttachmentEventsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StreamFirstAttachmentEventsRequest) ProtoMessage() {}

func (x *StreamFirstAttachmentEventsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_wgtwo_subscription_v1_subscription_events_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StreamFirstAttachmentEventsRequest.ProtoReflect.Descriptor instead.
func (*StreamFirstAttachmentEventsRequest) Descriptor() ([]byte, []int) {
	return file_wgtwo_subscription_v1_subscription_events_proto_rawDescGZIP(), []int{8}
}

func (x *StreamFirstAttachmentEventsRequest) GetStreamConfiguration() *v1.StreamConfiguration {
	if x != nil {
		return x.StreamConfiguration
	}
	return nil
}

type StreamFirstAttachmentEventsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Metadata             *v1.Metadata          `protobuf:"bytes,1,opt,name=metadata,proto3" json:"metadata,omitempty"`
	FirstAttachmentEvent *FirstAttachmentEvent `protobuf:"bytes,2,opt,name=first_attachment_event,json=firstAttachmentEvent,proto3" json:"first_attachment_event,omitempty"`
}

func (x *StreamFirstAttachmentEventsResponse) Reset() {
	*x = StreamFirstAttachmentEventsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_wgtwo_subscription_v1_subscription_events_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StreamFirstAttachmentEventsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StreamFirstAttachmentEventsResponse) ProtoMessage() {}

func (x *StreamFirstAttachmentEventsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_wgtwo_subscription_v1_subscription_events_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StreamFirstAttachmentEventsResponse.ProtoReflect.Descriptor instead.
func (*StreamFirstAttachmentEventsResponse) Descriptor() ([]byte, []int) {
	return file_wgtwo_subscription_v1_subscription_events_proto_rawDescGZIP(), []int{9}
}

func (x *StreamFirstAttachmentEventsResponse) GetMetadata() *v1.Metadata {
	if x != nil {
		return x.Metadata
	}
	return nil
}

func (x *StreamFirstAttachmentEventsResponse) GetFirstAttachmentEvent() *FirstAttachmentEvent {
	if x != nil {
		return x.FirstAttachmentEvent
	}
	return nil
}

type AckFirstAttachmentEventRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AckInfo *v1.AckInfo `protobuf:"bytes,1,opt,name=ack_info,json=ackInfo,proto3" json:"ack_info,omitempty"`
}

func (x *AckFirstAttachmentEventRequest) Reset() {
	*x = AckFirstAttachmentEventRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_wgtwo_subscription_v1_subscription_events_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AckFirstAttachmentEventRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AckFirstAttachmentEventRequest) ProtoMessage() {}

func (x *AckFirstAttachmentEventRequest) ProtoReflect() protoreflect.Message {
	mi := &file_wgtwo_subscription_v1_subscription_events_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AckFirstAttachmentEventRequest.ProtoReflect.Descriptor instead.
func (*AckFirstAttachmentEventRequest) Descriptor() ([]byte, []int) {
	return file_wgtwo_subscription_v1_subscription_events_proto_rawDescGZIP(), []int{10}
}

func (x *AckFirstAttachmentEventRequest) GetAckInfo() *v1.AckInfo {
	if x != nil {
		return x.AckInfo
	}
	return nil
}

type AckFirstAttachmentEventResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AckStatus *v1.AckStatus `protobuf:"bytes,1,opt,name=ack_status,json=ackStatus,proto3" json:"ack_status,omitempty"`
}

func (x *AckFirstAttachmentEventResponse) Reset() {
	*x = AckFirstAttachmentEventResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_wgtwo_subscription_v1_subscription_events_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AckFirstAttachmentEventResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AckFirstAttachmentEventResponse) ProtoMessage() {}

func (x *AckFirstAttachmentEventResponse) ProtoReflect() protoreflect.Message {
	mi := &file_wgtwo_subscription_v1_subscription_events_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AckFirstAttachmentEventResponse.ProtoReflect.Descriptor instead.
func (*AckFirstAttachmentEventResponse) Descriptor() ([]byte, []int) {
	return file_wgtwo_subscription_v1_subscription_events_proto_rawDescGZIP(), []int{11}
}

func (x *AckFirstAttachmentEventResponse) GetAckStatus() *v1.AckStatus {
	if x != nil {
		return x.AckStatus
	}
	return nil
}

type StreamPeriodicCountryEventsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	StreamConfiguration *v1.StreamConfiguration `protobuf:"bytes,1,opt,name=stream_configuration,json=streamConfiguration,proto3" json:"stream_configuration,omitempty"`
}

func (x *StreamPeriodicCountryEventsRequest) Reset() {
	*x = StreamPeriodicCountryEventsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_wgtwo_subscription_v1_subscription_events_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StreamPeriodicCountryEventsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StreamPeriodicCountryEventsRequest) ProtoMessage() {}

func (x *StreamPeriodicCountryEventsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_wgtwo_subscription_v1_subscription_events_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StreamPeriodicCountryEventsRequest.ProtoReflect.Descriptor instead.
func (*StreamPeriodicCountryEventsRequest) Descriptor() ([]byte, []int) {
	return file_wgtwo_subscription_v1_subscription_events_proto_rawDescGZIP(), []int{12}
}

func (x *StreamPeriodicCountryEventsRequest) GetStreamConfiguration() *v1.StreamConfiguration {
	if x != nil {
		return x.StreamConfiguration
	}
	return nil
}

type StreamPeriodicCountryEventsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Metadata             *v1.Metadata          `protobuf:"bytes,1,opt,name=metadata,proto3" json:"metadata,omitempty"`
	PeriodicCountryEvent *PeriodicCountryEvent `protobuf:"bytes,2,opt,name=periodic_country_event,json=periodicCountryEvent,proto3" json:"periodic_country_event,omitempty"`
}

func (x *StreamPeriodicCountryEventsResponse) Reset() {
	*x = StreamPeriodicCountryEventsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_wgtwo_subscription_v1_subscription_events_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StreamPeriodicCountryEventsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StreamPeriodicCountryEventsResponse) ProtoMessage() {}

func (x *StreamPeriodicCountryEventsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_wgtwo_subscription_v1_subscription_events_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StreamPeriodicCountryEventsResponse.ProtoReflect.Descriptor instead.
func (*StreamPeriodicCountryEventsResponse) Descriptor() ([]byte, []int) {
	return file_wgtwo_subscription_v1_subscription_events_proto_rawDescGZIP(), []int{13}
}

func (x *StreamPeriodicCountryEventsResponse) GetMetadata() *v1.Metadata {
	if x != nil {
		return x.Metadata
	}
	return nil
}

func (x *StreamPeriodicCountryEventsResponse) GetPeriodicCountryEvent() *PeriodicCountryEvent {
	if x != nil {
		return x.PeriodicCountryEvent
	}
	return nil
}

type AckPeriodicCountryEventRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AckInfo *v1.AckInfo `protobuf:"bytes,1,opt,name=ack_info,json=ackInfo,proto3" json:"ack_info,omitempty"`
}

func (x *AckPeriodicCountryEventRequest) Reset() {
	*x = AckPeriodicCountryEventRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_wgtwo_subscription_v1_subscription_events_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AckPeriodicCountryEventRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AckPeriodicCountryEventRequest) ProtoMessage() {}

func (x *AckPeriodicCountryEventRequest) ProtoReflect() protoreflect.Message {
	mi := &file_wgtwo_subscription_v1_subscription_events_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AckPeriodicCountryEventRequest.ProtoReflect.Descriptor instead.
func (*AckPeriodicCountryEventRequest) Descriptor() ([]byte, []int) {
	return file_wgtwo_subscription_v1_subscription_events_proto_rawDescGZIP(), []int{14}
}

func (x *AckPeriodicCountryEventRequest) GetAckInfo() *v1.AckInfo {
	if x != nil {
		return x.AckInfo
	}
	return nil
}

type AckPeriodicCountryEventResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AckStatus *v1.AckStatus `protobuf:"bytes,1,opt,name=ack_status,json=ackStatus,proto3" json:"ack_status,omitempty"`
}

func (x *AckPeriodicCountryEventResponse) Reset() {
	*x = AckPeriodicCountryEventResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_wgtwo_subscription_v1_subscription_events_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AckPeriodicCountryEventResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AckPeriodicCountryEventResponse) ProtoMessage() {}

func (x *AckPeriodicCountryEventResponse) ProtoReflect() protoreflect.Message {
	mi := &file_wgtwo_subscription_v1_subscription_events_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AckPeriodicCountryEventResponse.ProtoReflect.Descriptor instead.
func (*AckPeriodicCountryEventResponse) Descriptor() ([]byte, []int) {
	return file_wgtwo_subscription_v1_subscription_events_proto_rawDescGZIP(), []int{15}
}

func (x *AckPeriodicCountryEventResponse) GetAckStatus() *v1.AckStatus {
	if x != nil {
		return x.AckStatus
	}
	return nil
}

type Handset struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ImeiSv *v11.ImeiSv `protobuf:"bytes,1,opt,name=imei_sv,json=imeiSv,proto3" json:"imei_sv,omitempty"`
}

func (x *Handset) Reset() {
	*x = Handset{}
	if protoimpl.UnsafeEnabled {
		mi := &file_wgtwo_subscription_v1_subscription_events_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Handset) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Handset) ProtoMessage() {}

func (x *Handset) ProtoReflect() protoreflect.Message {
	mi := &file_wgtwo_subscription_v1_subscription_events_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Handset.ProtoReflect.Descriptor instead.
func (*Handset) Descriptor() ([]byte, []int) {
	return file_wgtwo_subscription_v1_subscription_events_proto_rawDescGZIP(), []int{16}
}

func (x *Handset) GetImeiSv() *v11.ImeiSv {
	if x != nil {
		return x.ImeiSv
	}
	return nil
}

type HandsetChangeEvent struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The international number of the subscriber.
	Number *v11.E164 `protobuf:"bytes,4,opt,name=number,proto3" json:"number,omitempty"`
	// The IMSI for the SIM card that has been observed. This is PII sensitive information, and
	// needs to be handled with care.
	Imsi *v11.Imsi `protobuf:"bytes,3,opt,name=imsi,proto3" json:"imsi,omitempty"`
	// The previously stored handset info, may be empty.
	Previous *Handset `protobuf:"bytes,1,opt,name=previous,proto3" json:"previous,omitempty"`
	// The updated handset info
	Current *Handset `protobuf:"bytes,2,opt,name=current,proto3" json:"current,omitempty"`
}

func (x *HandsetChangeEvent) Reset() {
	*x = HandsetChangeEvent{}
	if protoimpl.UnsafeEnabled {
		mi := &file_wgtwo_subscription_v1_subscription_events_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *HandsetChangeEvent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HandsetChangeEvent) ProtoMessage() {}

func (x *HandsetChangeEvent) ProtoReflect() protoreflect.Message {
	mi := &file_wgtwo_subscription_v1_subscription_events_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HandsetChangeEvent.ProtoReflect.Descriptor instead.
func (*HandsetChangeEvent) Descriptor() ([]byte, []int) {
	return file_wgtwo_subscription_v1_subscription_events_proto_rawDescGZIP(), []int{17}
}

func (x *HandsetChangeEvent) GetNumber() *v11.E164 {
	if x != nil {
		return x.Number
	}
	return nil
}

func (x *HandsetChangeEvent) GetImsi() *v11.Imsi {
	if x != nil {
		return x.Imsi
	}
	return nil
}

func (x *HandsetChangeEvent) GetPrevious() *Handset {
	if x != nil {
		return x.Previous
	}
	return nil
}

func (x *HandsetChangeEvent) GetCurrent() *Handset {
	if x != nil {
		return x.Current
	}
	return nil
}

type CountryChangeEvent struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The international number of the subscriber.
	Number *v11.E164 `protobuf:"bytes,3,opt,name=number,proto3" json:"number,omitempty"`
	// The country the subscriber moved from.
	Previous *v11.Country `protobuf:"bytes,1,opt,name=previous,proto3" json:"previous,omitempty"`
	// The country the subscriber moved to.
	Current *v11.Country `protobuf:"bytes,2,opt,name=current,proto3" json:"current,omitempty"`
}

func (x *CountryChangeEvent) Reset() {
	*x = CountryChangeEvent{}
	if protoimpl.UnsafeEnabled {
		mi := &file_wgtwo_subscription_v1_subscription_events_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CountryChangeEvent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CountryChangeEvent) ProtoMessage() {}

func (x *CountryChangeEvent) ProtoReflect() protoreflect.Message {
	mi := &file_wgtwo_subscription_v1_subscription_events_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CountryChangeEvent.ProtoReflect.Descriptor instead.
func (*CountryChangeEvent) Descriptor() ([]byte, []int) {
	return file_wgtwo_subscription_v1_subscription_events_proto_rawDescGZIP(), []int{18}
}

func (x *CountryChangeEvent) GetNumber() *v11.E164 {
	if x != nil {
		return x.Number
	}
	return nil
}

func (x *CountryChangeEvent) GetPrevious() *v11.Country {
	if x != nil {
		return x.Previous
	}
	return nil
}

func (x *CountryChangeEvent) GetCurrent() *v11.Country {
	if x != nil {
		return x.Current
	}
	return nil
}

type FirstAttachmentEvent struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The international number of the subscriber.
	Number *v11.E164 `protobuf:"bytes,1,opt,name=number,proto3" json:"number,omitempty"`
	// The IMSI for the SIM card that has been observed. This is PII sensitive information, and
	// needs to be handled with care.
	Imsi *v11.Imsi `protobuf:"bytes,2,opt,name=imsi,proto3" json:"imsi,omitempty"`
}

func (x *FirstAttachmentEvent) Reset() {
	*x = FirstAttachmentEvent{}
	if protoimpl.UnsafeEnabled {
		mi := &file_wgtwo_subscription_v1_subscription_events_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FirstAttachmentEvent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FirstAttachmentEvent) ProtoMessage() {}

func (x *FirstAttachmentEvent) ProtoReflect() protoreflect.Message {
	mi := &file_wgtwo_subscription_v1_subscription_events_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FirstAttachmentEvent.ProtoReflect.Descriptor instead.
func (*FirstAttachmentEvent) Descriptor() ([]byte, []int) {
	return file_wgtwo_subscription_v1_subscription_events_proto_rawDescGZIP(), []int{19}
}

func (x *FirstAttachmentEvent) GetNumber() *v11.E164 {
	if x != nil {
		return x.Number
	}
	return nil
}

func (x *FirstAttachmentEvent) GetImsi() *v11.Imsi {
	if x != nil {
		return x.Imsi
	}
	return nil
}

type PeriodicCountryEvent struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The international number of the subscriber.
	Number *v11.E164 `protobuf:"bytes,1,opt,name=number,proto3" json:"number,omitempty"`
	// The IMSI for the SIM card that has been observed. This is PII sensitive information, and
	// needs to be handled with care.
	Imsi *v11.Imsi `protobuf:"bytes,2,opt,name=imsi,proto3" json:"imsi,omitempty"`
	// The country for which the SIM card is observed.
	Country *v11.Country `protobuf:"bytes,3,opt,name=country,proto3" json:"country,omitempty"`
}

func (x *PeriodicCountryEvent) Reset() {
	*x = PeriodicCountryEvent{}
	if protoimpl.UnsafeEnabled {
		mi := &file_wgtwo_subscription_v1_subscription_events_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PeriodicCountryEvent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PeriodicCountryEvent) ProtoMessage() {}

func (x *PeriodicCountryEvent) ProtoReflect() protoreflect.Message {
	mi := &file_wgtwo_subscription_v1_subscription_events_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PeriodicCountryEvent.ProtoReflect.Descriptor instead.
func (*PeriodicCountryEvent) Descriptor() ([]byte, []int) {
	return file_wgtwo_subscription_v1_subscription_events_proto_rawDescGZIP(), []int{20}
}

func (x *PeriodicCountryEvent) GetNumber() *v11.E164 {
	if x != nil {
		return x.Number
	}
	return nil
}

func (x *PeriodicCountryEvent) GetImsi() *v11.Imsi {
	if x != nil {
		return x.Imsi
	}
	return nil
}

func (x *PeriodicCountryEvent) GetCountry() *v11.Country {
	if x != nil {
		return x.Country
	}
	return nil
}

var File_wgtwo_subscription_v1_subscription_events_proto protoreflect.FileDescriptor

var file_wgtwo_subscription_v1_subscription_events_proto_rawDesc = []byte{
	0x0a, 0x2f, 0x77, 0x67, 0x74, 0x77, 0x6f, 0x2f, 0x73, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x70,
	0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x76, 0x31, 0x2f, 0x73, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x70,
	0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x12, 0x15, 0x77, 0x67, 0x74, 0x77, 0x6f, 0x2e, 0x73, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69,
	0x70, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x1a, 0x23, 0x77, 0x67, 0x74, 0x77, 0x6f, 0x2f,
	0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x61, 0x6e, 0x6e, 0x6f,
	0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x21, 0x77,
	0x67, 0x74, 0x77, 0x6f, 0x2f, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2f, 0x76, 0x31, 0x2f, 0x70,
	0x68, 0x6f, 0x6e, 0x65, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x1a, 0x1b, 0x77, 0x67, 0x74, 0x77, 0x6f, 0x2f, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2f, 0x76,
	0x31, 0x2f, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1c, 0x77,
	0x67, 0x74, 0x77, 0x6f, 0x2f, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x76, 0x31, 0x2f, 0x65,
	0x76, 0x65, 0x6e, 0x74, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x7b, 0x0a, 0x20, 0x53,
	0x74, 0x72, 0x65, 0x61, 0x6d, 0x48, 0x61, 0x6e, 0x64, 0x73, 0x65, 0x74, 0x43, 0x68, 0x61, 0x6e,
	0x67, 0x65, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x57, 0x0a, 0x14, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e,
	0x77, 0x67, 0x74, 0x77, 0x6f, 0x2e, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x2e, 0x76, 0x31, 0x2e,
	0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x52, 0x13, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x43, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0xb7, 0x01, 0x0a, 0x21, 0x53, 0x74, 0x72,
	0x65, 0x61, 0x6d, 0x48, 0x61, 0x6e, 0x64, 0x73, 0x65, 0x74, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65,
	0x45, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x35,
	0x0a, 0x08, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x19, 0x2e, 0x77, 0x67, 0x74, 0x77, 0x6f, 0x2e, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x2e,
	0x76, 0x31, 0x2e, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x52, 0x08, 0x6d, 0x65, 0x74,
	0x61, 0x64, 0x61, 0x74, 0x61, 0x12, 0x5b, 0x0a, 0x14, 0x68, 0x61, 0x6e, 0x64, 0x73, 0x65, 0x74,
	0x5f, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x5f, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x77, 0x67, 0x74, 0x77, 0x6f, 0x2e, 0x73, 0x75, 0x62, 0x73,
	0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x48, 0x61, 0x6e, 0x64,
	0x73, 0x65, 0x74, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x52, 0x12,
	0x68, 0x61, 0x6e, 0x64, 0x73, 0x65, 0x74, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x45, 0x76, 0x65,
	0x6e, 0x74, 0x22, 0x53, 0x0a, 0x1c, 0x41, 0x63, 0x6b, 0x48, 0x61, 0x6e, 0x64, 0x73, 0x65, 0x74,
	0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x33, 0x0a, 0x08, 0x61, 0x63, 0x6b, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x77, 0x67, 0x74, 0x77, 0x6f, 0x2e, 0x65, 0x76, 0x65,
	0x6e, 0x74, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x63, 0x6b, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x07,
	0x61, 0x63, 0x6b, 0x49, 0x6e, 0x66, 0x6f, 0x22, 0x5a, 0x0a, 0x1d, 0x41, 0x63, 0x6b, 0x48, 0x61,
	0x6e, 0x64, 0x73, 0x65, 0x74, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x45, 0x76, 0x65, 0x6e, 0x74,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x39, 0x0a, 0x0a, 0x61, 0x63, 0x6b, 0x5f,
	0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x77,
	0x67, 0x74, 0x77, 0x6f, 0x2e, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x41,
	0x63, 0x6b, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x09, 0x61, 0x63, 0x6b, 0x53, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x22, 0x7b, 0x0a, 0x20, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x43, 0x6f, 0x75,
	0x6e, 0x74, 0x72, 0x79, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x73,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x57, 0x0a, 0x14, 0x73, 0x74, 0x72, 0x65, 0x61,
	0x6d, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x77, 0x67, 0x74, 0x77, 0x6f, 0x2e, 0x65, 0x76,
	0x65, 0x6e, 0x74, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x43, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x13, 0x73, 0x74, 0x72,
	0x65, 0x61, 0x6d, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x22, 0xb7, 0x01, 0x0a, 0x21, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x43, 0x6f, 0x75, 0x6e, 0x74,
	0x72, 0x79, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x35, 0x0a, 0x08, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61,
	0x74, 0x61, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x77, 0x67, 0x74, 0x77, 0x6f,
	0x2e, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x4d, 0x65, 0x74, 0x61, 0x64,
	0x61, 0x74, 0x61, 0x52, 0x08, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x12, 0x5b, 0x0a,
	0x14, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x72, 0x79, 0x5f, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x5f,
	0x65, 0x76, 0x65, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x77, 0x67,
	0x74, 0x77, 0x6f, 0x2e, 0x73, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e,
	0x2e, 0x76, 0x31, 0x2e, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x72, 0x79, 0x43, 0x68, 0x61, 0x6e, 0x67,
	0x65, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x52, 0x12, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x72, 0x79, 0x43,
	0x68, 0x61, 0x6e, 0x67, 0x65, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x22, 0x53, 0x0a, 0x1c, 0x41, 0x63,
	0x6b, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x72, 0x79, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x45, 0x76,
	0x65, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x33, 0x0a, 0x08, 0x61, 0x63,
	0x6b, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x77,
	0x67, 0x74, 0x77, 0x6f, 0x2e, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x41,
	0x63, 0x6b, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x07, 0x61, 0x63, 0x6b, 0x49, 0x6e, 0x66, 0x6f, 0x22,
	0x5a, 0x0a, 0x1d, 0x41, 0x63, 0x6b, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x72, 0x79, 0x43, 0x68, 0x61,
	0x6e, 0x67, 0x65, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x39, 0x0a, 0x0a, 0x61, 0x63, 0x6b, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x77, 0x67, 0x74, 0x77, 0x6f, 0x2e, 0x65, 0x76, 0x65,
	0x6e, 0x74, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x63, 0x6b, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x52, 0x09, 0x61, 0x63, 0x6b, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x22, 0x7d, 0x0a, 0x22, 0x53,
	0x74, 0x72, 0x65, 0x61, 0x6d, 0x46, 0x69, 0x72, 0x73, 0x74, 0x41, 0x74, 0x74, 0x61, 0x63, 0x68,
	0x6d, 0x65, 0x6e, 0x74, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x57, 0x0a, 0x14, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x5f, 0x63, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x24, 0x2e, 0x77, 0x67, 0x74, 0x77, 0x6f, 0x2e, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x2e, 0x76,
	0x31, 0x2e, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x13, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x43, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0xbf, 0x01, 0x0a, 0x23, 0x53,
	0x74, 0x72, 0x65, 0x61, 0x6d, 0x46, 0x69, 0x72, 0x73, 0x74, 0x41, 0x74, 0x74, 0x61, 0x63, 0x68,
	0x6d, 0x65, 0x6e, 0x74, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x35, 0x0a, 0x08, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x77, 0x67, 0x74, 0x77, 0x6f, 0x2e, 0x65, 0x76, 0x65,
	0x6e, 0x74, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x52,
	0x08, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x12, 0x61, 0x0a, 0x16, 0x66, 0x69, 0x72,
	0x73, 0x74, 0x5f, 0x61, 0x74, 0x74, 0x61, 0x63, 0x68, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x65, 0x76,
	0x65, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2b, 0x2e, 0x77, 0x67, 0x74, 0x77,
	0x6f, 0x2e, 0x73, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x76,
	0x31, 0x2e, 0x46, 0x69, 0x72, 0x73, 0x74, 0x41, 0x74, 0x74, 0x61, 0x63, 0x68, 0x6d, 0x65, 0x6e,
	0x74, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x52, 0x14, 0x66, 0x69, 0x72, 0x73, 0x74, 0x41, 0x74, 0x74,
	0x61, 0x63, 0x68, 0x6d, 0x65, 0x6e, 0x74, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x22, 0x55, 0x0a, 0x1e,
	0x41, 0x63, 0x6b, 0x46, 0x69, 0x72, 0x73, 0x74, 0x41, 0x74, 0x74, 0x61, 0x63, 0x68, 0x6d, 0x65,
	0x6e, 0x74, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x33,
	0x0a, 0x08, 0x61, 0x63, 0x6b, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x18, 0x2e, 0x77, 0x67, 0x74, 0x77, 0x6f, 0x2e, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x2e,
	0x76, 0x31, 0x2e, 0x41, 0x63, 0x6b, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x07, 0x61, 0x63, 0x6b, 0x49,
	0x6e, 0x66, 0x6f, 0x22, 0x5c, 0x0a, 0x1f, 0x41, 0x63, 0x6b, 0x46, 0x69, 0x72, 0x73, 0x74, 0x41,
	0x74, 0x74, 0x61, 0x63, 0x68, 0x6d, 0x65, 0x6e, 0x74, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x39, 0x0a, 0x0a, 0x61, 0x63, 0x6b, 0x5f, 0x73, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x77, 0x67, 0x74,
	0x77, 0x6f, 0x2e, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x63, 0x6b,
	0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x09, 0x61, 0x63, 0x6b, 0x53, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x22, 0x7d, 0x0a, 0x22, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x50, 0x65, 0x72, 0x69, 0x6f,
	0x64, 0x69, 0x63, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x72, 0x79, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x73,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x57, 0x0a, 0x14, 0x73, 0x74, 0x72, 0x65, 0x61,
	0x6d, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x77, 0x67, 0x74, 0x77, 0x6f, 0x2e, 0x65, 0x76,
	0x65, 0x6e, 0x74, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x43, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x13, 0x73, 0x74, 0x72,
	0x65, 0x61, 0x6d, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x22, 0xbf, 0x01, 0x0a, 0x23, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x50, 0x65, 0x72, 0x69, 0x6f,
	0x64, 0x69, 0x63, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x72, 0x79, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x73,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x35, 0x0a, 0x08, 0x6d, 0x65, 0x74, 0x61,
	0x64, 0x61, 0x74, 0x61, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x77, 0x67, 0x74,
	0x77, 0x6f, 0x2e, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x4d, 0x65, 0x74,
	0x61, 0x64, 0x61, 0x74, 0x61, 0x52, 0x08, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x12,
	0x61, 0x0a, 0x16, 0x70, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x69, 0x63, 0x5f, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x72, 0x79, 0x5f, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x2b, 0x2e, 0x77, 0x67, 0x74, 0x77, 0x6f, 0x2e, 0x73, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x70,
	0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x69, 0x63,
	0x43, 0x6f, 0x75, 0x6e, 0x74, 0x72, 0x79, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x52, 0x14, 0x70, 0x65,
	0x72, 0x69, 0x6f, 0x64, 0x69, 0x63, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x72, 0x79, 0x45, 0x76, 0x65,
	0x6e, 0x74, 0x22, 0x55, 0x0a, 0x1e, 0x41, 0x63, 0x6b, 0x50, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x69,
	0x63, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x72, 0x79, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x33, 0x0a, 0x08, 0x61, 0x63, 0x6b, 0x5f, 0x69, 0x6e, 0x66, 0x6f,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x77, 0x67, 0x74, 0x77, 0x6f, 0x2e, 0x65,
	0x76, 0x65, 0x6e, 0x74, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x63, 0x6b, 0x49, 0x6e, 0x66, 0x6f,
	0x52, 0x07, 0x61, 0x63, 0x6b, 0x49, 0x6e, 0x66, 0x6f, 0x22, 0x5c, 0x0a, 0x1f, 0x41, 0x63, 0x6b,
	0x50, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x69, 0x63, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x72, 0x79, 0x45,
	0x76, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x39, 0x0a, 0x0a,
	0x61, 0x63, 0x6b, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1a, 0x2e, 0x77, 0x67, 0x74, 0x77, 0x6f, 0x2e, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x2e,
	0x76, 0x31, 0x2e, 0x41, 0x63, 0x6b, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x09, 0x61, 0x63,
	0x6b, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x22, 0x3b, 0x0a, 0x07, 0x48, 0x61, 0x6e, 0x64, 0x73,
	0x65, 0x74, 0x12, 0x30, 0x0a, 0x07, 0x69, 0x6d, 0x65, 0x69, 0x5f, 0x73, 0x76, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x77, 0x67, 0x74, 0x77, 0x6f, 0x2e, 0x63, 0x6f, 0x6d, 0x6d,
	0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x49, 0x6d, 0x65, 0x69, 0x53, 0x76, 0x52, 0x06, 0x69, 0x6d,
	0x65, 0x69, 0x53, 0x76, 0x22, 0xe4, 0x01, 0x0a, 0x12, 0x48, 0x61, 0x6e, 0x64, 0x73, 0x65, 0x74,
	0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x12, 0x2d, 0x0a, 0x06, 0x6e,
	0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x77, 0x67,
	0x74, 0x77, 0x6f, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x45, 0x31,
	0x36, 0x34, 0x52, 0x06, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x29, 0x0a, 0x04, 0x69, 0x6d,
	0x73, 0x69, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x77, 0x67, 0x74, 0x77, 0x6f,
	0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x49, 0x6d, 0x73, 0x69, 0x52,
	0x04, 0x69, 0x6d, 0x73, 0x69, 0x12, 0x3a, 0x0a, 0x08, 0x70, 0x72, 0x65, 0x76, 0x69, 0x6f, 0x75,
	0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x77, 0x67, 0x74, 0x77, 0x6f, 0x2e,
	0x73, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x2e,
	0x48, 0x61, 0x6e, 0x64, 0x73, 0x65, 0x74, 0x52, 0x08, 0x70, 0x72, 0x65, 0x76, 0x69, 0x6f, 0x75,
	0x73, 0x12, 0x38, 0x0a, 0x07, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x77, 0x67, 0x74, 0x77, 0x6f, 0x2e, 0x73, 0x75, 0x62, 0x73, 0x63,
	0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x48, 0x61, 0x6e, 0x64, 0x73,
	0x65, 0x74, 0x52, 0x07, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x22, 0xad, 0x01, 0x0a, 0x12,
	0x43, 0x6f, 0x75, 0x6e, 0x74, 0x72, 0x79, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x45, 0x76, 0x65,
	0x6e, 0x74, 0x12, 0x2d, 0x0a, 0x06, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x15, 0x2e, 0x77, 0x67, 0x74, 0x77, 0x6f, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f,
	0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x45, 0x31, 0x36, 0x34, 0x52, 0x06, 0x6e, 0x75, 0x6d, 0x62, 0x65,
	0x72, 0x12, 0x34, 0x0a, 0x08, 0x70, 0x72, 0x65, 0x76, 0x69, 0x6f, 0x75, 0x73, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x77, 0x67, 0x74, 0x77, 0x6f, 0x2e, 0x63, 0x6f, 0x6d, 0x6d,
	0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x08, 0x70,
	0x72, 0x65, 0x76, 0x69, 0x6f, 0x75, 0x73, 0x12, 0x32, 0x0a, 0x07, 0x63, 0x75, 0x72, 0x72, 0x65,
	0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x77, 0x67, 0x74, 0x77, 0x6f,
	0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x6f, 0x75, 0x6e, 0x74,
	0x72, 0x79, 0x52, 0x07, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x22, 0x70, 0x0a, 0x14, 0x46,
	0x69, 0x72, 0x73, 0x74, 0x41, 0x74, 0x74, 0x61, 0x63, 0x68, 0x6d, 0x65, 0x6e, 0x74, 0x45, 0x76,
	0x65, 0x6e, 0x74, 0x12, 0x2d, 0x0a, 0x06, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x77, 0x67, 0x74, 0x77, 0x6f, 0x2e, 0x63, 0x6f, 0x6d, 0x6d,
	0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x45, 0x31, 0x36, 0x34, 0x52, 0x06, 0x6e, 0x75, 0x6d, 0x62,
	0x65, 0x72, 0x12, 0x29, 0x0a, 0x04, 0x69, 0x6d, 0x73, 0x69, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x15, 0x2e, 0x77, 0x67, 0x74, 0x77, 0x6f, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e,
	0x76, 0x31, 0x2e, 0x49, 0x6d, 0x73, 0x69, 0x52, 0x04, 0x69, 0x6d, 0x73, 0x69, 0x22, 0xa4, 0x01,
	0x0a, 0x14, 0x50, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x69, 0x63, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x72,
	0x79, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x12, 0x2d, 0x0a, 0x06, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x77, 0x67, 0x74, 0x77, 0x6f, 0x2e, 0x63,
	0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x45, 0x31, 0x36, 0x34, 0x52, 0x06, 0x6e,
	0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x29, 0x0a, 0x04, 0x69, 0x6d, 0x73, 0x69, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x77, 0x67, 0x74, 0x77, 0x6f, 0x2e, 0x63, 0x6f, 0x6d, 0x6d,
	0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x49, 0x6d, 0x73, 0x69, 0x52, 0x04, 0x69, 0x6d, 0x73, 0x69,
	0x12, 0x32, 0x0a, 0x07, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x72, 0x79, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x18, 0x2e, 0x77, 0x67, 0x74, 0x77, 0x6f, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e,
	0x2e, 0x76, 0x31, 0x2e, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x07, 0x63, 0x6f, 0x75,
	0x6e, 0x74, 0x72, 0x79, 0x32, 0xcc, 0x0b, 0x0a, 0x18, 0x53, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69,
	0x70, 0x74, 0x69, 0x6f, 0x6e, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x12, 0xb7, 0x01, 0x0a, 0x19, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x48, 0x61, 0x6e, 0x64,
	0x73, 0x65, 0x74, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x12,
	0x37, 0x2e, 0x77, 0x67, 0x74, 0x77, 0x6f, 0x2e, 0x73, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x70,
	0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x48, 0x61,
	0x6e, 0x64, 0x73, 0x65, 0x74, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x45, 0x76, 0x65, 0x6e, 0x74,
	0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x38, 0x2e, 0x77, 0x67, 0x74, 0x77, 0x6f,
	0x2e, 0x73, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x76, 0x31,
	0x2e, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x48, 0x61, 0x6e, 0x64, 0x73, 0x65, 0x74, 0x43, 0x68,
	0x61, 0x6e, 0x67, 0x65, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x22, 0x25, 0xea, 0xb5, 0x18, 0x21, 0x73, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x70,
	0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x68, 0x61, 0x6e, 0x64, 0x73, 0x65, 0x74, 0x5f, 0x64, 0x65, 0x74,
	0x61, 0x69, 0x6c, 0x73, 0x3a, 0x72, 0x65, 0x61, 0x64, 0x30, 0x01, 0x12, 0xa9, 0x01, 0x0a, 0x15,
	0x41, 0x63, 0x6b, 0x48, 0x61, 0x6e, 0x64, 0x73, 0x65, 0x74, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65,
	0x45, 0x76, 0x65, 0x6e, 0x74, 0x12, 0x33, 0x2e, 0x77, 0x67, 0x74, 0x77, 0x6f, 0x2e, 0x73, 0x75,
	0x62, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x63,
	0x6b, 0x48, 0x61, 0x6e, 0x64, 0x73, 0x65, 0x74, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x45, 0x76,
	0x65, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x34, 0x2e, 0x77, 0x67, 0x74,
	0x77, 0x6f, 0x2e, 0x73, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x2e,
	0x76, 0x31, 0x2e, 0x41, 0x63, 0x6b, 0x48, 0x61, 0x6e, 0x64, 0x73, 0x65, 0x74, 0x43, 0x68, 0x61,
	0x6e, 0x67, 0x65, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x22, 0x25, 0xea, 0xb5, 0x18, 0x21, 0x73, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69,
	0x6f, 0x6e, 0x2e, 0x68, 0x61, 0x6e, 0x64, 0x73, 0x65, 0x74, 0x5f, 0x64, 0x65, 0x74, 0x61, 0x69,
	0x6c, 0x73, 0x3a, 0x72, 0x65, 0x61, 0x64, 0x12, 0xbe, 0x01, 0x0a, 0x1b, 0x53, 0x74, 0x72, 0x65,
	0x61, 0x6d, 0x46, 0x69, 0x72, 0x73, 0x74, 0x41, 0x74, 0x74, 0x61, 0x63, 0x68, 0x6d, 0x65, 0x6e,
	0x74, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x12, 0x39, 0x2e, 0x77, 0x67, 0x74, 0x77, 0x6f, 0x2e,
	0x73, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x2e,
	0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x46, 0x69, 0x72, 0x73, 0x74, 0x41, 0x74, 0x74, 0x61, 0x63,
	0x68, 0x6d, 0x65, 0x6e, 0x74, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x3a, 0x2e, 0x77, 0x67, 0x74, 0x77, 0x6f, 0x2e, 0x73, 0x75, 0x62, 0x73, 0x63,
	0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x74, 0x72, 0x65, 0x61,
	0x6d, 0x46, 0x69, 0x72, 0x73, 0x74, 0x41, 0x74, 0x74, 0x61, 0x63, 0x68, 0x6d, 0x65, 0x6e, 0x74,
	0x45, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x26,
	0xea, 0xb5, 0x18, 0x22, 0x73, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e,
	0x2e, 0x66, 0x69, 0x72, 0x73, 0x74, 0x5f, 0x61, 0x74, 0x74, 0x61, 0x63, 0x68, 0x6d, 0x65, 0x6e,
	0x74, 0x3a, 0x72, 0x65, 0x61, 0x64, 0x30, 0x01, 0x12, 0xb0, 0x01, 0x0a, 0x17, 0x41, 0x63, 0x6b,
	0x46, 0x69, 0x72, 0x73, 0x74, 0x41, 0x74, 0x74, 0x61, 0x63, 0x68, 0x6d, 0x65, 0x6e, 0x74, 0x45,
	0x76, 0x65, 0x6e, 0x74, 0x12, 0x35, 0x2e, 0x77, 0x67, 0x74, 0x77, 0x6f, 0x2e, 0x73, 0x75, 0x62,
	0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x63, 0x6b,
	0x46, 0x69, 0x72, 0x73, 0x74, 0x41, 0x74, 0x74, 0x61, 0x63, 0x68, 0x6d, 0x65, 0x6e, 0x74, 0x45,
	0x76, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x36, 0x2e, 0x77, 0x67,
	0x74, 0x77, 0x6f, 0x2e, 0x73, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e,
	0x2e, 0x76, 0x31, 0x2e, 0x41, 0x63, 0x6b, 0x46, 0x69, 0x72, 0x73, 0x74, 0x41, 0x74, 0x74, 0x61,
	0x63, 0x68, 0x6d, 0x65, 0x6e, 0x74, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x22, 0x26, 0xea, 0xb5, 0x18, 0x22, 0x73, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69,
	0x70, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x66, 0x69, 0x72, 0x73, 0x74, 0x5f, 0x61, 0x74, 0x74, 0x61,
	0x63, 0x68, 0x6d, 0x65, 0x6e, 0x74, 0x3a, 0x72, 0x65, 0x61, 0x64, 0x12, 0xb6, 0x01, 0x0a, 0x19,
	0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x72, 0x79, 0x43, 0x68, 0x61,
	0x6e, 0x67, 0x65, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x12, 0x37, 0x2e, 0x77, 0x67, 0x74, 0x77,
	0x6f, 0x2e, 0x73, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x76,
	0x31, 0x2e, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x72, 0x79, 0x43,
	0x68, 0x61, 0x6e, 0x67, 0x65, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x38, 0x2e, 0x77, 0x67, 0x74, 0x77, 0x6f, 0x2e, 0x73, 0x75, 0x62, 0x73, 0x63,
	0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x74, 0x72, 0x65, 0x61,
	0x6d, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x72, 0x79, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x45, 0x76,
	0x65, 0x6e, 0x74, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x24, 0xea, 0xb5,
	0x18, 0x20, 0x73, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x72, 0x79, 0x5f, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x3a, 0x72, 0x65,
	0x61, 0x64, 0x30, 0x01, 0x12, 0xa8, 0x01, 0x0a, 0x15, 0x41, 0x63, 0x6b, 0x43, 0x6f, 0x75, 0x6e,
	0x74, 0x72, 0x79, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x12, 0x33,
	0x2e, 0x77, 0x67, 0x74, 0x77, 0x6f, 0x2e, 0x73, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74,
	0x69, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x63, 0x6b, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x72,
	0x79, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x34, 0x2e, 0x77, 0x67, 0x74, 0x77, 0x6f, 0x2e, 0x73, 0x75, 0x62, 0x73,
	0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x63, 0x6b, 0x43,
	0x6f, 0x75, 0x6e, 0x74, 0x72, 0x79, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x45, 0x76, 0x65, 0x6e,
	0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x24, 0xea, 0xb5, 0x18, 0x20, 0x73,
	0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x72, 0x79, 0x5f, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x3a, 0x72, 0x65, 0x61, 0x64, 0x12,
	0xbe, 0x01, 0x0a, 0x1b, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x50, 0x65, 0x72, 0x69, 0x6f, 0x64,
	0x69, 0x63, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x72, 0x79, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x12,
	0x39, 0x2e, 0x77, 0x67, 0x74, 0x77, 0x6f, 0x2e, 0x73, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x70,
	0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x50, 0x65,
	0x72, 0x69, 0x6f, 0x64, 0x69, 0x63, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x72, 0x79, 0x45, 0x76, 0x65,
	0x6e, 0x74, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x3a, 0x2e, 0x77, 0x67, 0x74,
	0x77, 0x6f, 0x2e, 0x73, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x2e,
	0x76, 0x31, 0x2e, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x50, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x69,
	0x63, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x72, 0x79, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x26, 0xea, 0xb5, 0x18, 0x22, 0x73, 0x75, 0x62, 0x73,
	0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x70, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x69,
	0x63, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x72, 0x79, 0x3a, 0x72, 0x65, 0x61, 0x64, 0x30, 0x01,
	0x12, 0xb0, 0x01, 0x0a, 0x17, 0x41, 0x63, 0x6b, 0x50, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x69, 0x63,
	0x43, 0x6f, 0x75, 0x6e, 0x74, 0x72, 0x79, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x12, 0x35, 0x2e, 0x77,
	0x67, 0x74, 0x77, 0x6f, 0x2e, 0x73, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f,
	0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x63, 0x6b, 0x50, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x69, 0x63,
	0x43, 0x6f, 0x75, 0x6e, 0x74, 0x72, 0x79, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x36, 0x2e, 0x77, 0x67, 0x74, 0x77, 0x6f, 0x2e, 0x73, 0x75, 0x62, 0x73,
	0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x63, 0x6b, 0x50,
	0x65, 0x72, 0x69, 0x6f, 0x64, 0x69, 0x63, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x72, 0x79, 0x45, 0x76,
	0x65, 0x6e, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x26, 0xea, 0xb5, 0x18,
	0x22, 0x73, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x70, 0x65,
	0x72, 0x69, 0x6f, 0x64, 0x69, 0x63, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x72, 0x79, 0x3a, 0x72,
	0x65, 0x61, 0x64, 0x42, 0x77, 0x0a, 0x1d, 0x63, 0x6f, 0x6d, 0x2e, 0x77, 0x67, 0x74, 0x77, 0x6f,
	0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x73, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x70,
	0x74, 0x69, 0x6f, 0x6e, 0x42, 0x17, 0x53, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69,
	0x6f, 0x6e, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x5a, 0x3d, 0x67,
	0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x77, 0x6f, 0x72, 0x6b, 0x69, 0x6e,
	0x67, 0x2d, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x2d, 0x74, 0x77, 0x6f, 0x2f, 0x77, 0x67, 0x74, 0x77,
	0x6f, 0x61, 0x70, 0x69, 0x73, 0x2f, 0x77, 0x67, 0x74, 0x77, 0x6f, 0x2f, 0x73, 0x75, 0x62, 0x73,
	0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x76, 0x31, 0x62, 0x06, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_wgtwo_subscription_v1_subscription_events_proto_rawDescOnce sync.Once
	file_wgtwo_subscription_v1_subscription_events_proto_rawDescData = file_wgtwo_subscription_v1_subscription_events_proto_rawDesc
)

func file_wgtwo_subscription_v1_subscription_events_proto_rawDescGZIP() []byte {
	file_wgtwo_subscription_v1_subscription_events_proto_rawDescOnce.Do(func() {
		file_wgtwo_subscription_v1_subscription_events_proto_rawDescData = protoimpl.X.CompressGZIP(file_wgtwo_subscription_v1_subscription_events_proto_rawDescData)
	})
	return file_wgtwo_subscription_v1_subscription_events_proto_rawDescData
}

var file_wgtwo_subscription_v1_subscription_events_proto_msgTypes = make([]protoimpl.MessageInfo, 21)
var file_wgtwo_subscription_v1_subscription_events_proto_goTypes = []interface{}{
	(*StreamHandsetChangeEventsRequest)(nil),    // 0: wgtwo.subscription.v1.StreamHandsetChangeEventsRequest
	(*StreamHandsetChangeEventsResponse)(nil),   // 1: wgtwo.subscription.v1.StreamHandsetChangeEventsResponse
	(*AckHandsetChangeEventRequest)(nil),        // 2: wgtwo.subscription.v1.AckHandsetChangeEventRequest
	(*AckHandsetChangeEventResponse)(nil),       // 3: wgtwo.subscription.v1.AckHandsetChangeEventResponse
	(*StreamCountryChangeEventsRequest)(nil),    // 4: wgtwo.subscription.v1.StreamCountryChangeEventsRequest
	(*StreamCountryChangeEventsResponse)(nil),   // 5: wgtwo.subscription.v1.StreamCountryChangeEventsResponse
	(*AckCountryChangeEventRequest)(nil),        // 6: wgtwo.subscription.v1.AckCountryChangeEventRequest
	(*AckCountryChangeEventResponse)(nil),       // 7: wgtwo.subscription.v1.AckCountryChangeEventResponse
	(*StreamFirstAttachmentEventsRequest)(nil),  // 8: wgtwo.subscription.v1.StreamFirstAttachmentEventsRequest
	(*StreamFirstAttachmentEventsResponse)(nil), // 9: wgtwo.subscription.v1.StreamFirstAttachmentEventsResponse
	(*AckFirstAttachmentEventRequest)(nil),      // 10: wgtwo.subscription.v1.AckFirstAttachmentEventRequest
	(*AckFirstAttachmentEventResponse)(nil),     // 11: wgtwo.subscription.v1.AckFirstAttachmentEventResponse
	(*StreamPeriodicCountryEventsRequest)(nil),  // 12: wgtwo.subscription.v1.StreamPeriodicCountryEventsRequest
	(*StreamPeriodicCountryEventsResponse)(nil), // 13: wgtwo.subscription.v1.StreamPeriodicCountryEventsResponse
	(*AckPeriodicCountryEventRequest)(nil),      // 14: wgtwo.subscription.v1.AckPeriodicCountryEventRequest
	(*AckPeriodicCountryEventResponse)(nil),     // 15: wgtwo.subscription.v1.AckPeriodicCountryEventResponse
	(*Handset)(nil),                             // 16: wgtwo.subscription.v1.Handset
	(*HandsetChangeEvent)(nil),                  // 17: wgtwo.subscription.v1.HandsetChangeEvent
	(*CountryChangeEvent)(nil),                  // 18: wgtwo.subscription.v1.CountryChangeEvent
	(*FirstAttachmentEvent)(nil),                // 19: wgtwo.subscription.v1.FirstAttachmentEvent
	(*PeriodicCountryEvent)(nil),                // 20: wgtwo.subscription.v1.PeriodicCountryEvent
	(*v1.StreamConfiguration)(nil),              // 21: wgtwo.events.v1.StreamConfiguration
	(*v1.Metadata)(nil),                         // 22: wgtwo.events.v1.Metadata
	(*v1.AckInfo)(nil),                          // 23: wgtwo.events.v1.AckInfo
	(*v1.AckStatus)(nil),                        // 24: wgtwo.events.v1.AckStatus
	(*v11.ImeiSv)(nil),                          // 25: wgtwo.common.v1.ImeiSv
	(*v11.E164)(nil),                            // 26: wgtwo.common.v1.E164
	(*v11.Imsi)(nil),                            // 27: wgtwo.common.v1.Imsi
	(*v11.Country)(nil),                         // 28: wgtwo.common.v1.Country
}
var file_wgtwo_subscription_v1_subscription_events_proto_depIdxs = []int32{
	21, // 0: wgtwo.subscription.v1.StreamHandsetChangeEventsRequest.stream_configuration:type_name -> wgtwo.events.v1.StreamConfiguration
	22, // 1: wgtwo.subscription.v1.StreamHandsetChangeEventsResponse.metadata:type_name -> wgtwo.events.v1.Metadata
	17, // 2: wgtwo.subscription.v1.StreamHandsetChangeEventsResponse.handset_change_event:type_name -> wgtwo.subscription.v1.HandsetChangeEvent
	23, // 3: wgtwo.subscription.v1.AckHandsetChangeEventRequest.ack_info:type_name -> wgtwo.events.v1.AckInfo
	24, // 4: wgtwo.subscription.v1.AckHandsetChangeEventResponse.ack_status:type_name -> wgtwo.events.v1.AckStatus
	21, // 5: wgtwo.subscription.v1.StreamCountryChangeEventsRequest.stream_configuration:type_name -> wgtwo.events.v1.StreamConfiguration
	22, // 6: wgtwo.subscription.v1.StreamCountryChangeEventsResponse.metadata:type_name -> wgtwo.events.v1.Metadata
	18, // 7: wgtwo.subscription.v1.StreamCountryChangeEventsResponse.country_change_event:type_name -> wgtwo.subscription.v1.CountryChangeEvent
	23, // 8: wgtwo.subscription.v1.AckCountryChangeEventRequest.ack_info:type_name -> wgtwo.events.v1.AckInfo
	24, // 9: wgtwo.subscription.v1.AckCountryChangeEventResponse.ack_status:type_name -> wgtwo.events.v1.AckStatus
	21, // 10: wgtwo.subscription.v1.StreamFirstAttachmentEventsRequest.stream_configuration:type_name -> wgtwo.events.v1.StreamConfiguration
	22, // 11: wgtwo.subscription.v1.StreamFirstAttachmentEventsResponse.metadata:type_name -> wgtwo.events.v1.Metadata
	19, // 12: wgtwo.subscription.v1.StreamFirstAttachmentEventsResponse.first_attachment_event:type_name -> wgtwo.subscription.v1.FirstAttachmentEvent
	23, // 13: wgtwo.subscription.v1.AckFirstAttachmentEventRequest.ack_info:type_name -> wgtwo.events.v1.AckInfo
	24, // 14: wgtwo.subscription.v1.AckFirstAttachmentEventResponse.ack_status:type_name -> wgtwo.events.v1.AckStatus
	21, // 15: wgtwo.subscription.v1.StreamPeriodicCountryEventsRequest.stream_configuration:type_name -> wgtwo.events.v1.StreamConfiguration
	22, // 16: wgtwo.subscription.v1.StreamPeriodicCountryEventsResponse.metadata:type_name -> wgtwo.events.v1.Metadata
	20, // 17: wgtwo.subscription.v1.StreamPeriodicCountryEventsResponse.periodic_country_event:type_name -> wgtwo.subscription.v1.PeriodicCountryEvent
	23, // 18: wgtwo.subscription.v1.AckPeriodicCountryEventRequest.ack_info:type_name -> wgtwo.events.v1.AckInfo
	24, // 19: wgtwo.subscription.v1.AckPeriodicCountryEventResponse.ack_status:type_name -> wgtwo.events.v1.AckStatus
	25, // 20: wgtwo.subscription.v1.Handset.imei_sv:type_name -> wgtwo.common.v1.ImeiSv
	26, // 21: wgtwo.subscription.v1.HandsetChangeEvent.number:type_name -> wgtwo.common.v1.E164
	27, // 22: wgtwo.subscription.v1.HandsetChangeEvent.imsi:type_name -> wgtwo.common.v1.Imsi
	16, // 23: wgtwo.subscription.v1.HandsetChangeEvent.previous:type_name -> wgtwo.subscription.v1.Handset
	16, // 24: wgtwo.subscription.v1.HandsetChangeEvent.current:type_name -> wgtwo.subscription.v1.Handset
	26, // 25: wgtwo.subscription.v1.CountryChangeEvent.number:type_name -> wgtwo.common.v1.E164
	28, // 26: wgtwo.subscription.v1.CountryChangeEvent.previous:type_name -> wgtwo.common.v1.Country
	28, // 27: wgtwo.subscription.v1.CountryChangeEvent.current:type_name -> wgtwo.common.v1.Country
	26, // 28: wgtwo.subscription.v1.FirstAttachmentEvent.number:type_name -> wgtwo.common.v1.E164
	27, // 29: wgtwo.subscription.v1.FirstAttachmentEvent.imsi:type_name -> wgtwo.common.v1.Imsi
	26, // 30: wgtwo.subscription.v1.PeriodicCountryEvent.number:type_name -> wgtwo.common.v1.E164
	27, // 31: wgtwo.subscription.v1.PeriodicCountryEvent.imsi:type_name -> wgtwo.common.v1.Imsi
	28, // 32: wgtwo.subscription.v1.PeriodicCountryEvent.country:type_name -> wgtwo.common.v1.Country
	0,  // 33: wgtwo.subscription.v1.SubscriptionEventService.StreamHandsetChangeEvents:input_type -> wgtwo.subscription.v1.StreamHandsetChangeEventsRequest
	2,  // 34: wgtwo.subscription.v1.SubscriptionEventService.AckHandsetChangeEvent:input_type -> wgtwo.subscription.v1.AckHandsetChangeEventRequest
	8,  // 35: wgtwo.subscription.v1.SubscriptionEventService.StreamFirstAttachmentEvents:input_type -> wgtwo.subscription.v1.StreamFirstAttachmentEventsRequest
	10, // 36: wgtwo.subscription.v1.SubscriptionEventService.AckFirstAttachmentEvent:input_type -> wgtwo.subscription.v1.AckFirstAttachmentEventRequest
	4,  // 37: wgtwo.subscription.v1.SubscriptionEventService.StreamCountryChangeEvents:input_type -> wgtwo.subscription.v1.StreamCountryChangeEventsRequest
	6,  // 38: wgtwo.subscription.v1.SubscriptionEventService.AckCountryChangeEvent:input_type -> wgtwo.subscription.v1.AckCountryChangeEventRequest
	12, // 39: wgtwo.subscription.v1.SubscriptionEventService.StreamPeriodicCountryEvents:input_type -> wgtwo.subscription.v1.StreamPeriodicCountryEventsRequest
	14, // 40: wgtwo.subscription.v1.SubscriptionEventService.AckPeriodicCountryEvent:input_type -> wgtwo.subscription.v1.AckPeriodicCountryEventRequest
	1,  // 41: wgtwo.subscription.v1.SubscriptionEventService.StreamHandsetChangeEvents:output_type -> wgtwo.subscription.v1.StreamHandsetChangeEventsResponse
	3,  // 42: wgtwo.subscription.v1.SubscriptionEventService.AckHandsetChangeEvent:output_type -> wgtwo.subscription.v1.AckHandsetChangeEventResponse
	9,  // 43: wgtwo.subscription.v1.SubscriptionEventService.StreamFirstAttachmentEvents:output_type -> wgtwo.subscription.v1.StreamFirstAttachmentEventsResponse
	11, // 44: wgtwo.subscription.v1.SubscriptionEventService.AckFirstAttachmentEvent:output_type -> wgtwo.subscription.v1.AckFirstAttachmentEventResponse
	5,  // 45: wgtwo.subscription.v1.SubscriptionEventService.StreamCountryChangeEvents:output_type -> wgtwo.subscription.v1.StreamCountryChangeEventsResponse
	7,  // 46: wgtwo.subscription.v1.SubscriptionEventService.AckCountryChangeEvent:output_type -> wgtwo.subscription.v1.AckCountryChangeEventResponse
	13, // 47: wgtwo.subscription.v1.SubscriptionEventService.StreamPeriodicCountryEvents:output_type -> wgtwo.subscription.v1.StreamPeriodicCountryEventsResponse
	15, // 48: wgtwo.subscription.v1.SubscriptionEventService.AckPeriodicCountryEvent:output_type -> wgtwo.subscription.v1.AckPeriodicCountryEventResponse
	41, // [41:49] is the sub-list for method output_type
	33, // [33:41] is the sub-list for method input_type
	33, // [33:33] is the sub-list for extension type_name
	33, // [33:33] is the sub-list for extension extendee
	0,  // [0:33] is the sub-list for field type_name
}

func init() { file_wgtwo_subscription_v1_subscription_events_proto_init() }
func file_wgtwo_subscription_v1_subscription_events_proto_init() {
	if File_wgtwo_subscription_v1_subscription_events_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_wgtwo_subscription_v1_subscription_events_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StreamHandsetChangeEventsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_wgtwo_subscription_v1_subscription_events_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StreamHandsetChangeEventsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_wgtwo_subscription_v1_subscription_events_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AckHandsetChangeEventRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_wgtwo_subscription_v1_subscription_events_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AckHandsetChangeEventResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_wgtwo_subscription_v1_subscription_events_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StreamCountryChangeEventsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_wgtwo_subscription_v1_subscription_events_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StreamCountryChangeEventsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_wgtwo_subscription_v1_subscription_events_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AckCountryChangeEventRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_wgtwo_subscription_v1_subscription_events_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AckCountryChangeEventResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_wgtwo_subscription_v1_subscription_events_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StreamFirstAttachmentEventsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_wgtwo_subscription_v1_subscription_events_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StreamFirstAttachmentEventsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_wgtwo_subscription_v1_subscription_events_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AckFirstAttachmentEventRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_wgtwo_subscription_v1_subscription_events_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AckFirstAttachmentEventResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_wgtwo_subscription_v1_subscription_events_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StreamPeriodicCountryEventsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_wgtwo_subscription_v1_subscription_events_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StreamPeriodicCountryEventsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_wgtwo_subscription_v1_subscription_events_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AckPeriodicCountryEventRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_wgtwo_subscription_v1_subscription_events_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AckPeriodicCountryEventResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_wgtwo_subscription_v1_subscription_events_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Handset); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_wgtwo_subscription_v1_subscription_events_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*HandsetChangeEvent); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_wgtwo_subscription_v1_subscription_events_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CountryChangeEvent); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_wgtwo_subscription_v1_subscription_events_proto_msgTypes[19].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FirstAttachmentEvent); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_wgtwo_subscription_v1_subscription_events_proto_msgTypes[20].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PeriodicCountryEvent); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_wgtwo_subscription_v1_subscription_events_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   21,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_wgtwo_subscription_v1_subscription_events_proto_goTypes,
		DependencyIndexes: file_wgtwo_subscription_v1_subscription_events_proto_depIdxs,
		MessageInfos:      file_wgtwo_subscription_v1_subscription_events_proto_msgTypes,
	}.Build()
	File_wgtwo_subscription_v1_subscription_events_proto = out.File
	file_wgtwo_subscription_v1_subscription_events_proto_rawDesc = nil
	file_wgtwo_subscription_v1_subscription_events_proto_goTypes = nil
	file_wgtwo_subscription_v1_subscription_events_proto_depIdxs = nil
}
