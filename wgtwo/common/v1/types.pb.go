// Copyright 2021 [Working Group Two]/[Cisco Systems]
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.8
// 	protoc        (unknown)
// source: wgtwo/common/v1/types.proto

package v1

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// Country information
//
// All programmatic use should depend on the alpha-2 code, and NOT the human readable name
type Country struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// ISO 3166-1 alpha-2 code. Examples: US, NO, SE
	Code string `protobuf:"bytes,1,opt,name=code,proto3" json:"code,omitempty"`
	// Human readable name
	Name          string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Country) Reset() {
	*x = Country{}
	mi := &file_wgtwo_common_v1_types_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Country) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Country) ProtoMessage() {}

func (x *Country) ProtoReflect() protoreflect.Message {
	mi := &file_wgtwo_common_v1_types_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Country.ProtoReflect.Descriptor instead.
func (*Country) Descriptor() ([]byte, []int) {
	return file_wgtwo_common_v1_types_proto_rawDescGZIP(), []int{0}
}

func (x *Country) GetCode() string {
	if x != nil {
		return x.Code
	}
	return ""
}

func (x *Country) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

// Subscription Identification:
// The `wg2rn` field follows the format `{tenant}:{region}:{id}`, where:
// - `tenant`: The tenant to which this subscription belongs
// - `region`: The region code of the subscription's MSISDN
// - `id`: A static identifier for the subscription
//
// The `wg2rn` uniquely identifies a subscription.
//
// Note: Our OAuth 2.0 server supports Pairwise Pseudonymous Identifiers for the 'sub' field.
// All clients of a product share the same identifier for a single subscription, stored in the 'value' field.
// Please be aware that the 'value' field is deprecated and will be removed in the future.
type SubscriptionIdentifier struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Deprecated: Marked as deprecated in wgtwo/common/v1/types.proto.
	Value string `protobuf:"bytes,1,opt,name=value,proto3" json:"value,omitempty"`
	// The value of the Subscription identifier as a string
	Wg2Rn         string `protobuf:"bytes,2,opt,name=wg2rn,proto3" json:"wg2rn,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *SubscriptionIdentifier) Reset() {
	*x = SubscriptionIdentifier{}
	mi := &file_wgtwo_common_v1_types_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SubscriptionIdentifier) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SubscriptionIdentifier) ProtoMessage() {}

func (x *SubscriptionIdentifier) ProtoReflect() protoreflect.Message {
	mi := &file_wgtwo_common_v1_types_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SubscriptionIdentifier.ProtoReflect.Descriptor instead.
func (*SubscriptionIdentifier) Descriptor() ([]byte, []int) {
	return file_wgtwo_common_v1_types_proto_rawDescGZIP(), []int{1}
}

// Deprecated: Marked as deprecated in wgtwo/common/v1/types.proto.
func (x *SubscriptionIdentifier) GetValue() string {
	if x != nil {
		return x.Value
	}
	return ""
}

func (x *SubscriptionIdentifier) GetWg2Rn() string {
	if x != nil {
		return x.Wg2Rn
	}
	return ""
}

// International Mobile Subscription Identity
// An IMSI is composed of three parts:
//  1. Mobile Country Code (MCC) consisting of three digits. The MCC is 3 digits long and identifies
//     uniquely the country of domicile of the mobile subscription;
//  2. Mobile Network Code (MNC), 2 or 3 digits for 3GPP network applications. The MNC identifies
//     the home PLMN of the mobile subscription. The length of the MNC depends on the value of the
//     MCC. A mixture of two and three digit MNC codes within a single MCC area is not recommended.
//  3. Mobile Subscriber Identification Number (MSIN) identifying the mobile subscription within a
//     PLMN. Normally there are 10 digits, but can be fewer in the case of a 3-digit MNC or if
//     national regulations indicate that the total length of the IMSI should be less than 15 digits.
type Imsi struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// The value of the imsi as a string.
	Value         string `protobuf:"bytes,1,opt,name=value,proto3" json:"value,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Imsi) Reset() {
	*x = Imsi{}
	mi := &file_wgtwo_common_v1_types_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Imsi) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Imsi) ProtoMessage() {}

func (x *Imsi) ProtoReflect() protoreflect.Message {
	mi := &file_wgtwo_common_v1_types_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Imsi.ProtoReflect.Descriptor instead.
func (*Imsi) Descriptor() ([]byte, []int) {
	return file_wgtwo_common_v1_types_proto_rawDescGZIP(), []int{2}
}

func (x *Imsi) GetValue() string {
	if x != nil {
		return x.Value
	}
	return ""
}

// International Mobile station Equipment Identity and Software Version number
// An IMEI is composed of four parts:
//  1. an 8 digit Type Allocation Code (TAC);
//  2. a 6 digit Serial Number (SNR);
//  3. an optional Check Digit (CD); and
//  4. an optional 2 digit Software Version Number (handled separately).
//
// For more information see ETSI 123.003 Chapter 6 and Appendix B.
type ImeiSv struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// The imei as a string.
	Imei string `protobuf:"bytes,1,opt,name=imei,proto3" json:"imei,omitempty"`
	// The software version as a string.
	SoftwareVersion string `protobuf:"bytes,2,opt,name=software_version,json=softwareVersion,proto3" json:"software_version,omitempty"`
	unknownFields   protoimpl.UnknownFields
	sizeCache       protoimpl.SizeCache
}

func (x *ImeiSv) Reset() {
	*x = ImeiSv{}
	mi := &file_wgtwo_common_v1_types_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ImeiSv) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ImeiSv) ProtoMessage() {}

func (x *ImeiSv) ProtoReflect() protoreflect.Message {
	mi := &file_wgtwo_common_v1_types_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ImeiSv.ProtoReflect.Descriptor instead.
func (*ImeiSv) Descriptor() ([]byte, []int) {
	return file_wgtwo_common_v1_types_proto_rawDescGZIP(), []int{3}
}

func (x *ImeiSv) GetImei() string {
	if x != nil {
		return x.Imei
	}
	return ""
}

func (x *ImeiSv) GetSoftwareVersion() string {
	if x != nil {
		return x.SoftwareVersion
	}
	return ""
}

// Home network identity; composed of a Mobile Country Code (MCC) and a Mobile Network Code (MNC).
type NetworkIdentity struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Mobile Country Code, e.g. `"262"` for Germany.
	Mcc string `protobuf:"bytes,1,opt,name=mcc,proto3" json:"mcc,omitempty"`
	// Mobile Network Code, e.g. `"01"` for T-Mobile Germany, when mcc is `"262"`.
	Mnc           string `protobuf:"bytes,2,opt,name=mnc,proto3" json:"mnc,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *NetworkIdentity) Reset() {
	*x = NetworkIdentity{}
	mi := &file_wgtwo_common_v1_types_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *NetworkIdentity) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NetworkIdentity) ProtoMessage() {}

func (x *NetworkIdentity) ProtoReflect() protoreflect.Message {
	mi := &file_wgtwo_common_v1_types_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NetworkIdentity.ProtoReflect.Descriptor instead.
func (*NetworkIdentity) Descriptor() ([]byte, []int) {
	return file_wgtwo_common_v1_types_proto_rawDescGZIP(), []int{4}
}

func (x *NetworkIdentity) GetMcc() string {
	if x != nil {
		return x.Mcc
	}
	return ""
}

func (x *NetworkIdentity) GetMnc() string {
	if x != nil {
		return x.Mnc
	}
	return ""
}

// IpAddress v4
type IpAddressV4 struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// The ip address as a string.
	Value         string `protobuf:"bytes,1,opt,name=value,proto3" json:"value,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *IpAddressV4) Reset() {
	*x = IpAddressV4{}
	mi := &file_wgtwo_common_v1_types_proto_msgTypes[5]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *IpAddressV4) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IpAddressV4) ProtoMessage() {}

func (x *IpAddressV4) ProtoReflect() protoreflect.Message {
	mi := &file_wgtwo_common_v1_types_proto_msgTypes[5]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IpAddressV4.ProtoReflect.Descriptor instead.
func (*IpAddressV4) Descriptor() ([]byte, []int) {
	return file_wgtwo_common_v1_types_proto_rawDescGZIP(), []int{5}
}

func (x *IpAddressV4) GetValue() string {
	if x != nil {
		return x.Value
	}
	return ""
}

var File_wgtwo_common_v1_types_proto protoreflect.FileDescriptor

const file_wgtwo_common_v1_types_proto_rawDesc = "" +
	"\n" +
	"\x1bwgtwo/common/v1/types.proto\x12\x0fwgtwo.common.v1\"1\n" +
	"\aCountry\x12\x12\n" +
	"\x04code\x18\x01 \x01(\tR\x04code\x12\x12\n" +
	"\x04name\x18\x02 \x01(\tR\x04name\"H\n" +
	"\x16SubscriptionIdentifier\x12\x18\n" +
	"\x05value\x18\x01 \x01(\tB\x02\x18\x01R\x05value\x12\x14\n" +
	"\x05wg2rn\x18\x02 \x01(\tR\x05wg2rn\"\x1c\n" +
	"\x04Imsi\x12\x14\n" +
	"\x05value\x18\x01 \x01(\tR\x05value\"G\n" +
	"\x06ImeiSv\x12\x12\n" +
	"\x04imei\x18\x01 \x01(\tR\x04imei\x12)\n" +
	"\x10software_version\x18\x02 \x01(\tR\x0fsoftwareVersion\"5\n" +
	"\x0fNetworkIdentity\x12\x10\n" +
	"\x03mcc\x18\x01 \x01(\tR\x03mcc\x12\x10\n" +
	"\x03mnc\x18\x02 \x01(\tR\x03mnc\"#\n" +
	"\vIpAddressV4\x12\x14\n" +
	"\x05value\x18\x01 \x01(\tR\x05valueB\xb7\x01\n" +
	"\x13com.wgtwo.common.v1B\n" +
	"TypesProtoP\x01Z6github.com/working-group-two/wgtwoapis/wgtwo/common/v1\xa2\x02\x03WCX\xaa\x02\x0fWgtwo.Common.V1\xca\x02\x0fWgtwo\\Common\\V1\xe2\x02\x1bWgtwo\\Common\\V1\\GPBMetadata\xea\x02\x11Wgtwo::Common::V1b\x06proto3"

var (
	file_wgtwo_common_v1_types_proto_rawDescOnce sync.Once
	file_wgtwo_common_v1_types_proto_rawDescData []byte
)

func file_wgtwo_common_v1_types_proto_rawDescGZIP() []byte {
	file_wgtwo_common_v1_types_proto_rawDescOnce.Do(func() {
		file_wgtwo_common_v1_types_proto_rawDescData = protoimpl.X.CompressGZIP(unsafe.Slice(unsafe.StringData(file_wgtwo_common_v1_types_proto_rawDesc), len(file_wgtwo_common_v1_types_proto_rawDesc)))
	})
	return file_wgtwo_common_v1_types_proto_rawDescData
}

var file_wgtwo_common_v1_types_proto_msgTypes = make([]protoimpl.MessageInfo, 6)
var file_wgtwo_common_v1_types_proto_goTypes = []any{
	(*Country)(nil),                // 0: wgtwo.common.v1.Country
	(*SubscriptionIdentifier)(nil), // 1: wgtwo.common.v1.SubscriptionIdentifier
	(*Imsi)(nil),                   // 2: wgtwo.common.v1.Imsi
	(*ImeiSv)(nil),                 // 3: wgtwo.common.v1.ImeiSv
	(*NetworkIdentity)(nil),        // 4: wgtwo.common.v1.NetworkIdentity
	(*IpAddressV4)(nil),            // 5: wgtwo.common.v1.IpAddressV4
}
var file_wgtwo_common_v1_types_proto_depIdxs = []int32{
	0, // [0:0] is the sub-list for method output_type
	0, // [0:0] is the sub-list for method input_type
	0, // [0:0] is the sub-list for extension type_name
	0, // [0:0] is the sub-list for extension extendee
	0, // [0:0] is the sub-list for field type_name
}

func init() { file_wgtwo_common_v1_types_proto_init() }
func file_wgtwo_common_v1_types_proto_init() {
	if File_wgtwo_common_v1_types_proto != nil {
		return
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_wgtwo_common_v1_types_proto_rawDesc), len(file_wgtwo_common_v1_types_proto_rawDesc)),
			NumEnums:      0,
			NumMessages:   6,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_wgtwo_common_v1_types_proto_goTypes,
		DependencyIndexes: file_wgtwo_common_v1_types_proto_depIdxs,
		MessageInfos:      file_wgtwo_common_v1_types_proto_msgTypes,
	}.Build()
	File_wgtwo_common_v1_types_proto = out.File
	file_wgtwo_common_v1_types_proto_goTypes = nil
	file_wgtwo_common_v1_types_proto_depIdxs = nil
}
