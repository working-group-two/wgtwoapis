// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             (unknown)
// source: wgtwo/data/v0/data.proto

package v0

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// DataServiceClient is the client API for DataService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type DataServiceClient interface {
	SetCustomDns(ctx context.Context, in *SetCustomDnsRequest, opts ...grpc.CallOption) (*CustomDnsResponse, error)
	ClearCustomDns(ctx context.Context, in *ClearCustomDnsRequest, opts ...grpc.CallOption) (*CustomDnsResponse, error)
	GetCustomDns(ctx context.Context, in *GetCustomDnsRequest, opts ...grpc.CallOption) (*GetCustomDnsResponse, error)
}

type dataServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewDataServiceClient(cc grpc.ClientConnInterface) DataServiceClient {
	return &dataServiceClient{cc}
}

func (c *dataServiceClient) SetCustomDns(ctx context.Context, in *SetCustomDnsRequest, opts ...grpc.CallOption) (*CustomDnsResponse, error) {
	out := new(CustomDnsResponse)
	err := c.cc.Invoke(ctx, "/wgtwo.data.v0.DataService/SetCustomDns", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dataServiceClient) ClearCustomDns(ctx context.Context, in *ClearCustomDnsRequest, opts ...grpc.CallOption) (*CustomDnsResponse, error) {
	out := new(CustomDnsResponse)
	err := c.cc.Invoke(ctx, "/wgtwo.data.v0.DataService/ClearCustomDns", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dataServiceClient) GetCustomDns(ctx context.Context, in *GetCustomDnsRequest, opts ...grpc.CallOption) (*GetCustomDnsResponse, error) {
	out := new(GetCustomDnsResponse)
	err := c.cc.Invoke(ctx, "/wgtwo.data.v0.DataService/GetCustomDns", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// DataServiceServer is the server API for DataService service.
// All implementations should embed UnimplementedDataServiceServer
// for forward compatibility
type DataServiceServer interface {
	SetCustomDns(context.Context, *SetCustomDnsRequest) (*CustomDnsResponse, error)
	ClearCustomDns(context.Context, *ClearCustomDnsRequest) (*CustomDnsResponse, error)
	GetCustomDns(context.Context, *GetCustomDnsRequest) (*GetCustomDnsResponse, error)
}

// UnimplementedDataServiceServer should be embedded to have forward compatible implementations.
type UnimplementedDataServiceServer struct {
}

func (UnimplementedDataServiceServer) SetCustomDns(context.Context, *SetCustomDnsRequest) (*CustomDnsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetCustomDns not implemented")
}
func (UnimplementedDataServiceServer) ClearCustomDns(context.Context, *ClearCustomDnsRequest) (*CustomDnsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ClearCustomDns not implemented")
}
func (UnimplementedDataServiceServer) GetCustomDns(context.Context, *GetCustomDnsRequest) (*GetCustomDnsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCustomDns not implemented")
}

// UnsafeDataServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to DataServiceServer will
// result in compilation errors.
type UnsafeDataServiceServer interface {
	mustEmbedUnimplementedDataServiceServer()
}

func RegisterDataServiceServer(s grpc.ServiceRegistrar, srv DataServiceServer) {
	s.RegisterService(&DataService_ServiceDesc, srv)
}

func _DataService_SetCustomDns_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetCustomDnsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DataServiceServer).SetCustomDns(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/wgtwo.data.v0.DataService/SetCustomDns",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DataServiceServer).SetCustomDns(ctx, req.(*SetCustomDnsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DataService_ClearCustomDns_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ClearCustomDnsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DataServiceServer).ClearCustomDns(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/wgtwo.data.v0.DataService/ClearCustomDns",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DataServiceServer).ClearCustomDns(ctx, req.(*ClearCustomDnsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DataService_GetCustomDns_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetCustomDnsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DataServiceServer).GetCustomDns(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/wgtwo.data.v0.DataService/GetCustomDns",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DataServiceServer).GetCustomDns(ctx, req.(*GetCustomDnsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// DataService_ServiceDesc is the grpc.ServiceDesc for DataService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var DataService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "wgtwo.data.v0.DataService",
	HandlerType: (*DataServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "SetCustomDns",
			Handler:    _DataService_SetCustomDns_Handler,
		},
		{
			MethodName: "ClearCustomDns",
			Handler:    _DataService_ClearCustomDns_Handler,
		},
		{
			MethodName: "GetCustomDns",
			Handler:    _DataService_GetCustomDns_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "wgtwo/data/v0/data.proto",
}
