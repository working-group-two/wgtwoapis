// Copyright 2022 Working Group Two AS
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
syntax = "proto3";

package wgtwo.data.v1;

import "wgtwo/annotations/annotations.proto";
import "wgtwo/common/v1/types.proto";

option go_package = "github.com/working-group-two/wgtwoapis/wgtwo/content_filtering/v1";
option java_package = "com.wgtwo.api.v1.contentFiltering";
option java_outer_classname = "ContentFiltering";

// Service for configuring content filtering
service ContentFilteringService {

  // Set filter for all subscriptions using the product
  rpc SetGlobalFilter (SetGlobalFilterRequest) returns (SetGlobalFilterResponse) {
    option (scope) = "data.content_filtering:write";
  }

  // Get the current configured global filter
  rpc GetGlobalFilter (GetGlobalFilterRequest) returns (GetGlobalFilterResponse) {
    option (scope) = "data.content_filtering:read";
  }
}

message SetGlobalFilterRequest {
  // The filter to enable
  // Not setting a filter will disable the current filter
  Filter filter = 1;
}


message SetGlobalFilterResponse {
  // The response status for setting the filter
  SetFilterStatus status = 1;

  // Human readable description provided in case of a unsuccessful update
  string description = 2;
}

enum SetFilterStatus {
  SET_FILTER_STATUS_UNSPECIFIED = 0;
  // Filter has been successfully updated
  SET_FILTER_STATUS_OK = 1;
  // Update failed
  SET_FILTER_STATUS_ERROR = 2;
}

message GetGlobalFilterRequest {
}

message GetGlobalFilterResponse {
  Filter active_filter = 1;
}

message Filter {
  repeated Category blocked_categories = 1;
  // The ip to redirect to if the category is blocked
  oneof block_mode {
    BlockModeIp block_mode_ip = 2;
  }
}

enum Category {
  // Not specified
  // Using this category will be rejected with the error INVALID_ARGUMENT
  CATEGORY_UNSPECIFIED = 0;

  // Adult
  // Sexually explicit content
  CATEGORY_ADULT = 2;

  // Alcohol and tobacco
  // Sites that sell and discuss consumption
  CATEGORY_ALCOHOL_AND_TOBACCO = 4;

  // Dating sites
  CATEGORY_DATING_AND_PERSONALS = 31;

  // Sites pretending to be another page to gather information
  CATEGORY_DECEPTIVE = 10;

  // Sites that sell and discuss consumption of drugs (excluding alcohol and tobacco)
  CATEGORY_DRUGS = 11;

  // Gambling
  CATEGORY_GAMBLING = 16;

  // Hacking and cracking
  CATEGORY_HACKING = 19;

  // Hate and terrorism
  CATEGORY_HATE = 20;

  // Illegal content
  CATEGORY_ILLEGAL_CONTENT = 23;

  // Malicious
  CATEGORY_MALICIOUS = 26;

  // Message boards and forums
  CATEGORY_MESSAGE_BOARDS_AND_FORUMS = 28;

  // Parked sites and domains
  CATEGORY_PARKED = 30;

  // Proxy and filter avoidance
  CATEGORY_PROXY_AND_FILTER_AVOIDANCE = 32;

  // Weapons
  CATEGORY_WEAPONS = 46;
}

message BlockModeIp {
  common.v1.IpAddressV4 ipv4 = 1;
}
