// Copyright 2022 Working Group Two AS
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.28.1
// 	protoc        (unknown)
// source: wgtwo/data/v1/content_filtering.proto

package v1

import (
	_ "github.com/working-group-two/wgtwoapis/wgtwo/annotations"
	v1 "github.com/working-group-two/wgtwoapis/wgtwo/common/v1"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type SetFilterStatus int32

const (
	SetFilterStatus_SET_FILTER_STATUS_UNSPECIFIED SetFilterStatus = 0
	// Filter has been successfully updated
	SetFilterStatus_SET_FILTER_STATUS_OK SetFilterStatus = 1
	// Update failed
	SetFilterStatus_SET_FILTER_STATUS_ERROR SetFilterStatus = 2
)

// Enum value maps for SetFilterStatus.
var (
	SetFilterStatus_name = map[int32]string{
		0: "SET_FILTER_STATUS_UNSPECIFIED",
		1: "SET_FILTER_STATUS_OK",
		2: "SET_FILTER_STATUS_ERROR",
	}
	SetFilterStatus_value = map[string]int32{
		"SET_FILTER_STATUS_UNSPECIFIED": 0,
		"SET_FILTER_STATUS_OK":          1,
		"SET_FILTER_STATUS_ERROR":       2,
	}
)

func (x SetFilterStatus) Enum() *SetFilterStatus {
	p := new(SetFilterStatus)
	*p = x
	return p
}

func (x SetFilterStatus) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (SetFilterStatus) Descriptor() protoreflect.EnumDescriptor {
	return file_wgtwo_data_v1_content_filtering_proto_enumTypes[0].Descriptor()
}

func (SetFilterStatus) Type() protoreflect.EnumType {
	return &file_wgtwo_data_v1_content_filtering_proto_enumTypes[0]
}

func (x SetFilterStatus) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use SetFilterStatus.Descriptor instead.
func (SetFilterStatus) EnumDescriptor() ([]byte, []int) {
	return file_wgtwo_data_v1_content_filtering_proto_rawDescGZIP(), []int{0}
}

type Category int32

const (
	// Not specified
	// Using this category will be rejected with the error INVALID_ARGUMENT
	Category_CATEGORY_UNSPECIFIED Category = 0
	// Adult
	// Sexually explicit content
	Category_CATEGORY_ADULT Category = 2
	// Alcohol and tobacco
	// Sites that sell and discuss consumption
	Category_CATEGORY_ALCOHOL_AND_TOBACCO Category = 4
	// Dating sites
	Category_CATEGORY_DATING_AND_PERSONALS Category = 31
	// Sites pretending to be another page to gather information
	Category_CATEGORY_DECEPTIVE Category = 10
	// Sites that sell and discuss consumption of drugs (excluding alcohol and tobacco)
	Category_CATEGORY_DRUGS Category = 11
	// Gambling
	Category_CATEGORY_GAMBLING Category = 16
	// Hacking and cracking
	Category_CATEGORY_HACKING Category = 19
	// Hate and terrorism
	Category_CATEGORY_HATE Category = 20
	// Illegal content
	Category_CATEGORY_ILLEGAL_CONTENT Category = 23
	// Malicious
	Category_CATEGORY_MALICIOUS Category = 26
	// Message boards and forums
	Category_CATEGORY_MESSAGE_BOARDS_AND_FORUMS Category = 28
	// Parked sites and domains
	Category_CATEGORY_PARKED Category = 30
	// Proxy and filter avoidance
	Category_CATEGORY_PROXY_AND_FILTER_AVOIDANCE Category = 32
	// Weapons
	Category_CATEGORY_WEAPONS Category = 46
)

// Enum value maps for Category.
var (
	Category_name = map[int32]string{
		0:  "CATEGORY_UNSPECIFIED",
		2:  "CATEGORY_ADULT",
		4:  "CATEGORY_ALCOHOL_AND_TOBACCO",
		31: "CATEGORY_DATING_AND_PERSONALS",
		10: "CATEGORY_DECEPTIVE",
		11: "CATEGORY_DRUGS",
		16: "CATEGORY_GAMBLING",
		19: "CATEGORY_HACKING",
		20: "CATEGORY_HATE",
		23: "CATEGORY_ILLEGAL_CONTENT",
		26: "CATEGORY_MALICIOUS",
		28: "CATEGORY_MESSAGE_BOARDS_AND_FORUMS",
		30: "CATEGORY_PARKED",
		32: "CATEGORY_PROXY_AND_FILTER_AVOIDANCE",
		46: "CATEGORY_WEAPONS",
	}
	Category_value = map[string]int32{
		"CATEGORY_UNSPECIFIED":                0,
		"CATEGORY_ADULT":                      2,
		"CATEGORY_ALCOHOL_AND_TOBACCO":        4,
		"CATEGORY_DATING_AND_PERSONALS":       31,
		"CATEGORY_DECEPTIVE":                  10,
		"CATEGORY_DRUGS":                      11,
		"CATEGORY_GAMBLING":                   16,
		"CATEGORY_HACKING":                    19,
		"CATEGORY_HATE":                       20,
		"CATEGORY_ILLEGAL_CONTENT":            23,
		"CATEGORY_MALICIOUS":                  26,
		"CATEGORY_MESSAGE_BOARDS_AND_FORUMS":  28,
		"CATEGORY_PARKED":                     30,
		"CATEGORY_PROXY_AND_FILTER_AVOIDANCE": 32,
		"CATEGORY_WEAPONS":                    46,
	}
)

func (x Category) Enum() *Category {
	p := new(Category)
	*p = x
	return p
}

func (x Category) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Category) Descriptor() protoreflect.EnumDescriptor {
	return file_wgtwo_data_v1_content_filtering_proto_enumTypes[1].Descriptor()
}

func (Category) Type() protoreflect.EnumType {
	return &file_wgtwo_data_v1_content_filtering_proto_enumTypes[1]
}

func (x Category) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Category.Descriptor instead.
func (Category) EnumDescriptor() ([]byte, []int) {
	return file_wgtwo_data_v1_content_filtering_proto_rawDescGZIP(), []int{1}
}

type SetGlobalFilterRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The filter to enable
	// Not setting a filter will disable the current filter
	Filter *Filter `protobuf:"bytes,1,opt,name=filter,proto3" json:"filter,omitempty"`
}

func (x *SetGlobalFilterRequest) Reset() {
	*x = SetGlobalFilterRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_wgtwo_data_v1_content_filtering_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SetGlobalFilterRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SetGlobalFilterRequest) ProtoMessage() {}

func (x *SetGlobalFilterRequest) ProtoReflect() protoreflect.Message {
	mi := &file_wgtwo_data_v1_content_filtering_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SetGlobalFilterRequest.ProtoReflect.Descriptor instead.
func (*SetGlobalFilterRequest) Descriptor() ([]byte, []int) {
	return file_wgtwo_data_v1_content_filtering_proto_rawDescGZIP(), []int{0}
}

func (x *SetGlobalFilterRequest) GetFilter() *Filter {
	if x != nil {
		return x.Filter
	}
	return nil
}

type SetGlobalFilterResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The response status for setting the filter
	Status SetFilterStatus `protobuf:"varint,1,opt,name=status,proto3,enum=wgtwo.data.v1.SetFilterStatus" json:"status,omitempty"`
	// Human readable description provided in case of a unsuccessful update
	Description string `protobuf:"bytes,2,opt,name=description,proto3" json:"description,omitempty"`
}

func (x *SetGlobalFilterResponse) Reset() {
	*x = SetGlobalFilterResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_wgtwo_data_v1_content_filtering_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SetGlobalFilterResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SetGlobalFilterResponse) ProtoMessage() {}

func (x *SetGlobalFilterResponse) ProtoReflect() protoreflect.Message {
	mi := &file_wgtwo_data_v1_content_filtering_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SetGlobalFilterResponse.ProtoReflect.Descriptor instead.
func (*SetGlobalFilterResponse) Descriptor() ([]byte, []int) {
	return file_wgtwo_data_v1_content_filtering_proto_rawDescGZIP(), []int{1}
}

func (x *SetGlobalFilterResponse) GetStatus() SetFilterStatus {
	if x != nil {
		return x.Status
	}
	return SetFilterStatus_SET_FILTER_STATUS_UNSPECIFIED
}

func (x *SetGlobalFilterResponse) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

type GetGlobalFilterRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *GetGlobalFilterRequest) Reset() {
	*x = GetGlobalFilterRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_wgtwo_data_v1_content_filtering_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetGlobalFilterRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetGlobalFilterRequest) ProtoMessage() {}

func (x *GetGlobalFilterRequest) ProtoReflect() protoreflect.Message {
	mi := &file_wgtwo_data_v1_content_filtering_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetGlobalFilterRequest.ProtoReflect.Descriptor instead.
func (*GetGlobalFilterRequest) Descriptor() ([]byte, []int) {
	return file_wgtwo_data_v1_content_filtering_proto_rawDescGZIP(), []int{2}
}

type GetGlobalFilterResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ActiveFilter *Filter `protobuf:"bytes,1,opt,name=active_filter,json=activeFilter,proto3" json:"active_filter,omitempty"`
}

func (x *GetGlobalFilterResponse) Reset() {
	*x = GetGlobalFilterResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_wgtwo_data_v1_content_filtering_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetGlobalFilterResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetGlobalFilterResponse) ProtoMessage() {}

func (x *GetGlobalFilterResponse) ProtoReflect() protoreflect.Message {
	mi := &file_wgtwo_data_v1_content_filtering_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetGlobalFilterResponse.ProtoReflect.Descriptor instead.
func (*GetGlobalFilterResponse) Descriptor() ([]byte, []int) {
	return file_wgtwo_data_v1_content_filtering_proto_rawDescGZIP(), []int{3}
}

func (x *GetGlobalFilterResponse) GetActiveFilter() *Filter {
	if x != nil {
		return x.ActiveFilter
	}
	return nil
}

type Filter struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BlockedCategories []Category `protobuf:"varint,1,rep,packed,name=blocked_categories,json=blockedCategories,proto3,enum=wgtwo.data.v1.Category" json:"blocked_categories,omitempty"`
	// The ip to redirect to if the category is blocked
	//
	// Types that are assignable to BlockMode:
	//	*Filter_BlockModeIp
	BlockMode isFilter_BlockMode `protobuf_oneof:"block_mode"`
}

func (x *Filter) Reset() {
	*x = Filter{}
	if protoimpl.UnsafeEnabled {
		mi := &file_wgtwo_data_v1_content_filtering_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Filter) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Filter) ProtoMessage() {}

func (x *Filter) ProtoReflect() protoreflect.Message {
	mi := &file_wgtwo_data_v1_content_filtering_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Filter.ProtoReflect.Descriptor instead.
func (*Filter) Descriptor() ([]byte, []int) {
	return file_wgtwo_data_v1_content_filtering_proto_rawDescGZIP(), []int{4}
}

func (x *Filter) GetBlockedCategories() []Category {
	if x != nil {
		return x.BlockedCategories
	}
	return nil
}

func (m *Filter) GetBlockMode() isFilter_BlockMode {
	if m != nil {
		return m.BlockMode
	}
	return nil
}

func (x *Filter) GetBlockModeIp() *BlockModeIp {
	if x, ok := x.GetBlockMode().(*Filter_BlockModeIp); ok {
		return x.BlockModeIp
	}
	return nil
}

type isFilter_BlockMode interface {
	isFilter_BlockMode()
}

type Filter_BlockModeIp struct {
	BlockModeIp *BlockModeIp `protobuf:"bytes,2,opt,name=block_mode_ip,json=blockModeIp,proto3,oneof"`
}

func (*Filter_BlockModeIp) isFilter_BlockMode() {}

type BlockModeIp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Ipv4 *v1.IpAddressV4 `protobuf:"bytes,1,opt,name=ipv4,proto3" json:"ipv4,omitempty"`
}

func (x *BlockModeIp) Reset() {
	*x = BlockModeIp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_wgtwo_data_v1_content_filtering_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BlockModeIp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BlockModeIp) ProtoMessage() {}

func (x *BlockModeIp) ProtoReflect() protoreflect.Message {
	mi := &file_wgtwo_data_v1_content_filtering_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BlockModeIp.ProtoReflect.Descriptor instead.
func (*BlockModeIp) Descriptor() ([]byte, []int) {
	return file_wgtwo_data_v1_content_filtering_proto_rawDescGZIP(), []int{5}
}

func (x *BlockModeIp) GetIpv4() *v1.IpAddressV4 {
	if x != nil {
		return x.Ipv4
	}
	return nil
}

var File_wgtwo_data_v1_content_filtering_proto protoreflect.FileDescriptor

var file_wgtwo_data_v1_content_filtering_proto_rawDesc = []byte{
	0x0a, 0x25, 0x77, 0x67, 0x74, 0x77, 0x6f, 0x2f, 0x64, 0x61, 0x74, 0x61, 0x2f, 0x76, 0x31, 0x2f,
	0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x5f, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x69, 0x6e,
	0x67, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x0d, 0x77, 0x67, 0x74, 0x77, 0x6f, 0x2e, 0x64,
	0x61, 0x74, 0x61, 0x2e, 0x76, 0x31, 0x1a, 0x23, 0x77, 0x67, 0x74, 0x77, 0x6f, 0x2f, 0x61, 0x6e,
	0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1b, 0x77, 0x67, 0x74,
	0x77, 0x6f, 0x2f, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2f, 0x76, 0x31, 0x2f, 0x74, 0x79, 0x70,
	0x65, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x47, 0x0a, 0x16, 0x53, 0x65, 0x74, 0x47,
	0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x2d, 0x0a, 0x06, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x15, 0x2e, 0x77, 0x67, 0x74, 0x77, 0x6f, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x2e,
	0x76, 0x31, 0x2e, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x52, 0x06, 0x66, 0x69, 0x6c, 0x74, 0x65,
	0x72, 0x22, 0x73, 0x0a, 0x17, 0x53, 0x65, 0x74, 0x47, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x46, 0x69,
	0x6c, 0x74, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x36, 0x0a, 0x06,
	0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1e, 0x2e, 0x77,
	0x67, 0x74, 0x77, 0x6f, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x65, 0x74,
	0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x06, 0x73, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x12, 0x20, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74,
	0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72,
	0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x18, 0x0a, 0x16, 0x47, 0x65, 0x74, 0x47, 0x6c, 0x6f,
	0x62, 0x61, 0x6c, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x22, 0x55, 0x0a, 0x17, 0x47, 0x65, 0x74, 0x47, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x46, 0x69, 0x6c,
	0x74, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x3a, 0x0a, 0x0d, 0x61,
	0x63, 0x74, 0x69, 0x76, 0x65, 0x5f, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x15, 0x2e, 0x77, 0x67, 0x74, 0x77, 0x6f, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x2e,
	0x76, 0x31, 0x2e, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x52, 0x0c, 0x61, 0x63, 0x74, 0x69, 0x76,
	0x65, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x22, 0xa0, 0x01, 0x0a, 0x06, 0x46, 0x69, 0x6c, 0x74,
	0x65, 0x72, 0x12, 0x46, 0x0a, 0x12, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x65, 0x64, 0x5f, 0x63, 0x61,
	0x74, 0x65, 0x67, 0x6f, 0x72, 0x69, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0e, 0x32, 0x17,
	0x2e, 0x77, 0x67, 0x74, 0x77, 0x6f, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x76, 0x31, 0x2e, 0x43,
	0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x52, 0x11, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x65, 0x64,
	0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x69, 0x65, 0x73, 0x12, 0x40, 0x0a, 0x0d, 0x62, 0x6c,
	0x6f, 0x63, 0x6b, 0x5f, 0x6d, 0x6f, 0x64, 0x65, 0x5f, 0x69, 0x70, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1a, 0x2e, 0x77, 0x67, 0x74, 0x77, 0x6f, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x76,
	0x31, 0x2e, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x4d, 0x6f, 0x64, 0x65, 0x49, 0x70, 0x48, 0x00, 0x52,
	0x0b, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x4d, 0x6f, 0x64, 0x65, 0x49, 0x70, 0x42, 0x0c, 0x0a, 0x0a,
	0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x5f, 0x6d, 0x6f, 0x64, 0x65, 0x22, 0x3f, 0x0a, 0x0b, 0x42, 0x6c,
	0x6f, 0x63, 0x6b, 0x4d, 0x6f, 0x64, 0x65, 0x49, 0x70, 0x12, 0x30, 0x0a, 0x04, 0x69, 0x70, 0x76,
	0x34, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x77, 0x67, 0x74, 0x77, 0x6f, 0x2e,
	0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x49, 0x70, 0x41, 0x64, 0x64, 0x72,
	0x65, 0x73, 0x73, 0x56, 0x34, 0x52, 0x04, 0x69, 0x70, 0x76, 0x34, 0x2a, 0x6b, 0x0a, 0x0f, 0x53,
	0x65, 0x74, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x21,
	0x0a, 0x1d, 0x53, 0x45, 0x54, 0x5f, 0x46, 0x49, 0x4c, 0x54, 0x45, 0x52, 0x5f, 0x53, 0x54, 0x41,
	0x54, 0x55, 0x53, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10,
	0x00, 0x12, 0x18, 0x0a, 0x14, 0x53, 0x45, 0x54, 0x5f, 0x46, 0x49, 0x4c, 0x54, 0x45, 0x52, 0x5f,
	0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x4f, 0x4b, 0x10, 0x01, 0x12, 0x1b, 0x0a, 0x17, 0x53,
	0x45, 0x54, 0x5f, 0x46, 0x49, 0x4c, 0x54, 0x45, 0x52, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53,
	0x5f, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x10, 0x02, 0x2a, 0x9b, 0x03, 0x0a, 0x08, 0x43, 0x61, 0x74,
	0x65, 0x67, 0x6f, 0x72, 0x79, 0x12, 0x18, 0x0a, 0x14, 0x43, 0x41, 0x54, 0x45, 0x47, 0x4f, 0x52,
	0x59, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12,
	0x12, 0x0a, 0x0e, 0x43, 0x41, 0x54, 0x45, 0x47, 0x4f, 0x52, 0x59, 0x5f, 0x41, 0x44, 0x55, 0x4c,
	0x54, 0x10, 0x02, 0x12, 0x20, 0x0a, 0x1c, 0x43, 0x41, 0x54, 0x45, 0x47, 0x4f, 0x52, 0x59, 0x5f,
	0x41, 0x4c, 0x43, 0x4f, 0x48, 0x4f, 0x4c, 0x5f, 0x41, 0x4e, 0x44, 0x5f, 0x54, 0x4f, 0x42, 0x41,
	0x43, 0x43, 0x4f, 0x10, 0x04, 0x12, 0x21, 0x0a, 0x1d, 0x43, 0x41, 0x54, 0x45, 0x47, 0x4f, 0x52,
	0x59, 0x5f, 0x44, 0x41, 0x54, 0x49, 0x4e, 0x47, 0x5f, 0x41, 0x4e, 0x44, 0x5f, 0x50, 0x45, 0x52,
	0x53, 0x4f, 0x4e, 0x41, 0x4c, 0x53, 0x10, 0x1f, 0x12, 0x16, 0x0a, 0x12, 0x43, 0x41, 0x54, 0x45,
	0x47, 0x4f, 0x52, 0x59, 0x5f, 0x44, 0x45, 0x43, 0x45, 0x50, 0x54, 0x49, 0x56, 0x45, 0x10, 0x0a,
	0x12, 0x12, 0x0a, 0x0e, 0x43, 0x41, 0x54, 0x45, 0x47, 0x4f, 0x52, 0x59, 0x5f, 0x44, 0x52, 0x55,
	0x47, 0x53, 0x10, 0x0b, 0x12, 0x15, 0x0a, 0x11, 0x43, 0x41, 0x54, 0x45, 0x47, 0x4f, 0x52, 0x59,
	0x5f, 0x47, 0x41, 0x4d, 0x42, 0x4c, 0x49, 0x4e, 0x47, 0x10, 0x10, 0x12, 0x14, 0x0a, 0x10, 0x43,
	0x41, 0x54, 0x45, 0x47, 0x4f, 0x52, 0x59, 0x5f, 0x48, 0x41, 0x43, 0x4b, 0x49, 0x4e, 0x47, 0x10,
	0x13, 0x12, 0x11, 0x0a, 0x0d, 0x43, 0x41, 0x54, 0x45, 0x47, 0x4f, 0x52, 0x59, 0x5f, 0x48, 0x41,
	0x54, 0x45, 0x10, 0x14, 0x12, 0x1c, 0x0a, 0x18, 0x43, 0x41, 0x54, 0x45, 0x47, 0x4f, 0x52, 0x59,
	0x5f, 0x49, 0x4c, 0x4c, 0x45, 0x47, 0x41, 0x4c, 0x5f, 0x43, 0x4f, 0x4e, 0x54, 0x45, 0x4e, 0x54,
	0x10, 0x17, 0x12, 0x16, 0x0a, 0x12, 0x43, 0x41, 0x54, 0x45, 0x47, 0x4f, 0x52, 0x59, 0x5f, 0x4d,
	0x41, 0x4c, 0x49, 0x43, 0x49, 0x4f, 0x55, 0x53, 0x10, 0x1a, 0x12, 0x26, 0x0a, 0x22, 0x43, 0x41,
	0x54, 0x45, 0x47, 0x4f, 0x52, 0x59, 0x5f, 0x4d, 0x45, 0x53, 0x53, 0x41, 0x47, 0x45, 0x5f, 0x42,
	0x4f, 0x41, 0x52, 0x44, 0x53, 0x5f, 0x41, 0x4e, 0x44, 0x5f, 0x46, 0x4f, 0x52, 0x55, 0x4d, 0x53,
	0x10, 0x1c, 0x12, 0x13, 0x0a, 0x0f, 0x43, 0x41, 0x54, 0x45, 0x47, 0x4f, 0x52, 0x59, 0x5f, 0x50,
	0x41, 0x52, 0x4b, 0x45, 0x44, 0x10, 0x1e, 0x12, 0x27, 0x0a, 0x23, 0x43, 0x41, 0x54, 0x45, 0x47,
	0x4f, 0x52, 0x59, 0x5f, 0x50, 0x52, 0x4f, 0x58, 0x59, 0x5f, 0x41, 0x4e, 0x44, 0x5f, 0x46, 0x49,
	0x4c, 0x54, 0x45, 0x52, 0x5f, 0x41, 0x56, 0x4f, 0x49, 0x44, 0x41, 0x4e, 0x43, 0x45, 0x10, 0x20,
	0x12, 0x14, 0x0a, 0x10, 0x43, 0x41, 0x54, 0x45, 0x47, 0x4f, 0x52, 0x59, 0x5f, 0x57, 0x45, 0x41,
	0x50, 0x4f, 0x4e, 0x53, 0x10, 0x2e, 0x32, 0xa2, 0x02, 0x0a, 0x17, 0x43, 0x6f, 0x6e, 0x74, 0x65,
	0x6e, 0x74, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x69, 0x6e, 0x67, 0x53, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x12, 0x82, 0x01, 0x0a, 0x0f, 0x53, 0x65, 0x74, 0x47, 0x6c, 0x6f, 0x62, 0x61, 0x6c,
	0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x12, 0x25, 0x2e, 0x77, 0x67, 0x74, 0x77, 0x6f, 0x2e, 0x64,
	0x61, 0x74, 0x61, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x65, 0x74, 0x47, 0x6c, 0x6f, 0x62, 0x61, 0x6c,
	0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x26, 0x2e,
	0x77, 0x67, 0x74, 0x77, 0x6f, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x65,
	0x74, 0x47, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x20, 0xea, 0xb5, 0x18, 0x1c, 0x64, 0x61, 0x74, 0x61, 0x2e,
	0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x5f, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x69, 0x6e,
	0x67, 0x3a, 0x77, 0x72, 0x69, 0x74, 0x65, 0x12, 0x81, 0x01, 0x0a, 0x0f, 0x47, 0x65, 0x74, 0x47,
	0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x12, 0x25, 0x2e, 0x77, 0x67,
	0x74, 0x77, 0x6f, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x47,
	0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x26, 0x2e, 0x77, 0x67, 0x74, 0x77, 0x6f, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x2e,
	0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x47, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x46, 0x69, 0x6c, 0x74,
	0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x1f, 0xea, 0xb5, 0x18, 0x1b,
	0x64, 0x61, 0x74, 0x61, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x5f, 0x66, 0x69, 0x6c,
	0x74, 0x65, 0x72, 0x69, 0x6e, 0x67, 0x3a, 0x72, 0x65, 0x61, 0x64, 0x42, 0x78, 0x0a, 0x21, 0x63,
	0x6f, 0x6d, 0x2e, 0x77, 0x67, 0x74, 0x77, 0x6f, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e,
	0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x69, 0x6e, 0x67,
	0x42, 0x10, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x69,
	0x6e, 0x67, 0x5a, 0x41, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x77,
	0x6f, 0x72, 0x6b, 0x69, 0x6e, 0x67, 0x2d, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x2d, 0x74, 0x77, 0x6f,
	0x2f, 0x77, 0x67, 0x74, 0x77, 0x6f, 0x61, 0x70, 0x69, 0x73, 0x2f, 0x77, 0x67, 0x74, 0x77, 0x6f,
	0x2f, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x5f, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x69,
	0x6e, 0x67, 0x2f, 0x76, 0x31, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_wgtwo_data_v1_content_filtering_proto_rawDescOnce sync.Once
	file_wgtwo_data_v1_content_filtering_proto_rawDescData = file_wgtwo_data_v1_content_filtering_proto_rawDesc
)

func file_wgtwo_data_v1_content_filtering_proto_rawDescGZIP() []byte {
	file_wgtwo_data_v1_content_filtering_proto_rawDescOnce.Do(func() {
		file_wgtwo_data_v1_content_filtering_proto_rawDescData = protoimpl.X.CompressGZIP(file_wgtwo_data_v1_content_filtering_proto_rawDescData)
	})
	return file_wgtwo_data_v1_content_filtering_proto_rawDescData
}

var file_wgtwo_data_v1_content_filtering_proto_enumTypes = make([]protoimpl.EnumInfo, 2)
var file_wgtwo_data_v1_content_filtering_proto_msgTypes = make([]protoimpl.MessageInfo, 6)
var file_wgtwo_data_v1_content_filtering_proto_goTypes = []interface{}{
	(SetFilterStatus)(0),            // 0: wgtwo.data.v1.SetFilterStatus
	(Category)(0),                   // 1: wgtwo.data.v1.Category
	(*SetGlobalFilterRequest)(nil),  // 2: wgtwo.data.v1.SetGlobalFilterRequest
	(*SetGlobalFilterResponse)(nil), // 3: wgtwo.data.v1.SetGlobalFilterResponse
	(*GetGlobalFilterRequest)(nil),  // 4: wgtwo.data.v1.GetGlobalFilterRequest
	(*GetGlobalFilterResponse)(nil), // 5: wgtwo.data.v1.GetGlobalFilterResponse
	(*Filter)(nil),                  // 6: wgtwo.data.v1.Filter
	(*BlockModeIp)(nil),             // 7: wgtwo.data.v1.BlockModeIp
	(*v1.IpAddressV4)(nil),          // 8: wgtwo.common.v1.IpAddressV4
}
var file_wgtwo_data_v1_content_filtering_proto_depIdxs = []int32{
	6, // 0: wgtwo.data.v1.SetGlobalFilterRequest.filter:type_name -> wgtwo.data.v1.Filter
	0, // 1: wgtwo.data.v1.SetGlobalFilterResponse.status:type_name -> wgtwo.data.v1.SetFilterStatus
	6, // 2: wgtwo.data.v1.GetGlobalFilterResponse.active_filter:type_name -> wgtwo.data.v1.Filter
	1, // 3: wgtwo.data.v1.Filter.blocked_categories:type_name -> wgtwo.data.v1.Category
	7, // 4: wgtwo.data.v1.Filter.block_mode_ip:type_name -> wgtwo.data.v1.BlockModeIp
	8, // 5: wgtwo.data.v1.BlockModeIp.ipv4:type_name -> wgtwo.common.v1.IpAddressV4
	2, // 6: wgtwo.data.v1.ContentFilteringService.SetGlobalFilter:input_type -> wgtwo.data.v1.SetGlobalFilterRequest
	4, // 7: wgtwo.data.v1.ContentFilteringService.GetGlobalFilter:input_type -> wgtwo.data.v1.GetGlobalFilterRequest
	3, // 8: wgtwo.data.v1.ContentFilteringService.SetGlobalFilter:output_type -> wgtwo.data.v1.SetGlobalFilterResponse
	5, // 9: wgtwo.data.v1.ContentFilteringService.GetGlobalFilter:output_type -> wgtwo.data.v1.GetGlobalFilterResponse
	8, // [8:10] is the sub-list for method output_type
	6, // [6:8] is the sub-list for method input_type
	6, // [6:6] is the sub-list for extension type_name
	6, // [6:6] is the sub-list for extension extendee
	0, // [0:6] is the sub-list for field type_name
}

func init() { file_wgtwo_data_v1_content_filtering_proto_init() }
func file_wgtwo_data_v1_content_filtering_proto_init() {
	if File_wgtwo_data_v1_content_filtering_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_wgtwo_data_v1_content_filtering_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SetGlobalFilterRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_wgtwo_data_v1_content_filtering_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SetGlobalFilterResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_wgtwo_data_v1_content_filtering_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetGlobalFilterRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_wgtwo_data_v1_content_filtering_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetGlobalFilterResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_wgtwo_data_v1_content_filtering_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Filter); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_wgtwo_data_v1_content_filtering_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BlockModeIp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_wgtwo_data_v1_content_filtering_proto_msgTypes[4].OneofWrappers = []interface{}{
		(*Filter_BlockModeIp)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_wgtwo_data_v1_content_filtering_proto_rawDesc,
			NumEnums:      2,
			NumMessages:   6,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_wgtwo_data_v1_content_filtering_proto_goTypes,
		DependencyIndexes: file_wgtwo_data_v1_content_filtering_proto_depIdxs,
		EnumInfos:         file_wgtwo_data_v1_content_filtering_proto_enumTypes,
		MessageInfos:      file_wgtwo_data_v1_content_filtering_proto_msgTypes,
	}.Build()
	File_wgtwo_data_v1_content_filtering_proto = out.File
	file_wgtwo_data_v1_content_filtering_proto_rawDesc = nil
	file_wgtwo_data_v1_content_filtering_proto_goTypes = nil
	file_wgtwo_data_v1_content_filtering_proto_depIdxs = nil
}
