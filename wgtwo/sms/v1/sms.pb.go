// Copyright (C) 2022 Cisco Systems, Inc.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.8
// 	protoc        (unknown)
// source: wgtwo/sms/v1/sms.proto

package v1

import (
	_ "github.com/working-group-two/wgtwoapis/wgtwo/annotations"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	durationpb "google.golang.org/protobuf/types/known/durationpb"
	reflect "reflect"
	sync "sync"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// *
// The class of the message.
//
// See https://en.wikipedia.org/wiki/Data_Coding_Scheme#Message_Classes
type MessageClass int32

const (
	// No message class specified.
	MessageClass_MESSAGE_CLASS_UNSPECIFIED MessageClass = 0
	// CLASS 0
	// A flash message is a message that is not stored on the device. It is handled
	// immediately or dropped, and also cannot be multi-fragment. Data messages of
	// this type needs a destination application port to designate what app will
	// handle it.
	MessageClass_MESSAGE_CLASS_FLASH_MESSAGE MessageClass = 1
	// CLASS 1
	// Mobile Equipment specific messages are handled by by an application on the
	// handset device itself, e.g. WAP push messages. Data messages of this type
	// needs a destination application port to designate what app will handle it.
	MessageClass_MESSAGE_CLASS_ME_SPECIFIC MessageClass = 2
	// CLASS 2
	// Handled by the sim card. SIM updates have special requirements tied to the
	// SIM card itself, and must be signed with a SIM specific private key only known
	// by the operator.
	MessageClass_MESSAGE_CLASS_SIM_SPECIFIC MessageClass = 3
	// CLASS 3
	// Terminal Equipment specific message are handled by the handset itself, or by
	// a SIM application, and may require an application port to designate who will
	// handle it.
	MessageClass_MESSAGE_CLASS_TE_SPECIFIC MessageClass = 4
)

// Enum value maps for MessageClass.
var (
	MessageClass_name = map[int32]string{
		0: "MESSAGE_CLASS_UNSPECIFIED",
		1: "MESSAGE_CLASS_FLASH_MESSAGE",
		2: "MESSAGE_CLASS_ME_SPECIFIC",
		3: "MESSAGE_CLASS_SIM_SPECIFIC",
		4: "MESSAGE_CLASS_TE_SPECIFIC",
	}
	MessageClass_value = map[string]int32{
		"MESSAGE_CLASS_UNSPECIFIED":   0,
		"MESSAGE_CLASS_FLASH_MESSAGE": 1,
		"MESSAGE_CLASS_ME_SPECIFIC":   2,
		"MESSAGE_CLASS_SIM_SPECIFIC":  3,
		"MESSAGE_CLASS_TE_SPECIFIC":   4,
	}
)

func (x MessageClass) Enum() *MessageClass {
	p := new(MessageClass)
	*p = x
	return p
}

func (x MessageClass) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (MessageClass) Descriptor() protoreflect.EnumDescriptor {
	return file_wgtwo_sms_v1_sms_proto_enumTypes[0].Descriptor()
}

func (MessageClass) Type() protoreflect.EnumType {
	return &file_wgtwo_sms_v1_sms_proto_enumTypes[0]
}

func (x MessageClass) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use MessageClass.Descriptor instead.
func (MessageClass) EnumDescriptor() ([]byte, []int) {
	return file_wgtwo_sms_v1_sms_proto_rawDescGZIP(), []int{0}
}

type SendMessageResponse_SendStatus int32

const (
	SendMessageResponse_SEND_STATUS_UNSPECIFIED SendMessageResponse_SendStatus = 0
	// Sending the message is accepted. Note that the message is not delivered yet.
	SendMessageResponse_SEND_STATUS_OK SendMessageResponse_SendStatus = 1
	// Sending the message is rejected (not allowed). This may be because of
	// subscriber policy limitations, rights of the product or content of the
	// message. See description for details.
	SendMessageResponse_SEND_STATUS_REJECT SendMessageResponse_SendStatus = 2
	// Sending the message failed. This error should be treated as temporary, and
	// sending the message again may work.
	SendMessageResponse_SEND_STATUS_ERROR SendMessageResponse_SendStatus = 3
)

// Enum value maps for SendMessageResponse_SendStatus.
var (
	SendMessageResponse_SendStatus_name = map[int32]string{
		0: "SEND_STATUS_UNSPECIFIED",
		1: "SEND_STATUS_OK",
		2: "SEND_STATUS_REJECT",
		3: "SEND_STATUS_ERROR",
	}
	SendMessageResponse_SendStatus_value = map[string]int32{
		"SEND_STATUS_UNSPECIFIED": 0,
		"SEND_STATUS_OK":          1,
		"SEND_STATUS_REJECT":      2,
		"SEND_STATUS_ERROR":       3,
	}
)

func (x SendMessageResponse_SendStatus) Enum() *SendMessageResponse_SendStatus {
	p := new(SendMessageResponse_SendStatus)
	*p = x
	return p
}

func (x SendMessageResponse_SendStatus) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (SendMessageResponse_SendStatus) Descriptor() protoreflect.EnumDescriptor {
	return file_wgtwo_sms_v1_sms_proto_enumTypes[1].Descriptor()
}

func (SendMessageResponse_SendStatus) Type() protoreflect.EnumType {
	return &file_wgtwo_sms_v1_sms_proto_enumTypes[1]
}

func (x SendMessageResponse_SendStatus) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use SendMessageResponse_SendStatus.Descriptor instead.
func (SendMessageResponse_SendStatus) EnumDescriptor() ([]byte, []int) {
	return file_wgtwo_sms_v1_sms_proto_rawDescGZIP(), []int{4, 0}
}

// The request message to send a text SMS from a subscriber.
type SendTextFromSubscriberRequest struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// The message text content. Minimum 1 character, maximum 2000 characters. Supports
	// unicode, though completeness is dependent on the receiver handset.
	Content string `protobuf:"bytes,1,opt,name=content,proto3" json:"content,omitempty"`
	// The subscriber number to send this. The sending product must have a right
	// to send as the subscriber specifically. E.g. operators can only send as
	// their own subscribers, third party products only as subscribers who have
	// enabled the product. Must be international number starting with '+'.
	FromSubscriber string `protobuf:"bytes,2,opt,name=from_subscriber,json=fromSubscriber,proto3" json:"from_subscriber,omitempty"`
	// The destination number of the message. Can be international starting
	// with '+', short form number or network specific numbers.
	ToAddress string `protobuf:"bytes,3,opt,name=to_address,json=toAddress,proto3" json:"to_address,omitempty"`
	// Deadline to which the message needs to be delivered. If this is passed
	// and a delivery is not succeeded, the message delivery will fail. If not set
	// will use the maximum deadline. Maximum is 7 days.
	DeliveryDeadline *durationpb.Duration `protobuf:"bytes,4,opt,name=delivery_deadline,json=deliveryDeadline,proto3" json:"delivery_deadline,omitempty"`
	unknownFields    protoimpl.UnknownFields
	sizeCache        protoimpl.SizeCache
}

func (x *SendTextFromSubscriberRequest) Reset() {
	*x = SendTextFromSubscriberRequest{}
	mi := &file_wgtwo_sms_v1_sms_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SendTextFromSubscriberRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SendTextFromSubscriberRequest) ProtoMessage() {}

func (x *SendTextFromSubscriberRequest) ProtoReflect() protoreflect.Message {
	mi := &file_wgtwo_sms_v1_sms_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SendTextFromSubscriberRequest.ProtoReflect.Descriptor instead.
func (*SendTextFromSubscriberRequest) Descriptor() ([]byte, []int) {
	return file_wgtwo_sms_v1_sms_proto_rawDescGZIP(), []int{0}
}

func (x *SendTextFromSubscriberRequest) GetContent() string {
	if x != nil {
		return x.Content
	}
	return ""
}

func (x *SendTextFromSubscriberRequest) GetFromSubscriber() string {
	if x != nil {
		return x.FromSubscriber
	}
	return ""
}

func (x *SendTextFromSubscriberRequest) GetToAddress() string {
	if x != nil {
		return x.ToAddress
	}
	return ""
}

func (x *SendTextFromSubscriberRequest) GetDeliveryDeadline() *durationpb.Duration {
	if x != nil {
		return x.DeliveryDeadline
	}
	return nil
}

// The request message to send text SMS to a subscriber.
type SendTextToSubscriberRequest struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// The message text content. Minimum 1 character, maximum 2000 characters. Supports
	// unicode, though completeness is dependent on the receiver handset.
	Content string `protobuf:"bytes,1,opt,name=content,proto3" json:"content,omitempty"`
	// The destination phone number of the subscriber to receive the
	// message. Must be international number starting with '+'.
	ToSubscriber string `protobuf:"bytes,2,opt,name=to_subscriber,json=toSubscriber,proto3" json:"to_subscriber,omitempty"`
	// Origin address of the message.
	// <p/>
	// It can either be a:<br/>
	// - a phone number formatted as E.164 starting with '+'.<br/>
	// - a alphanumeric sender ID.<br/>
	// - short form number.<br/>
	// - network specific number.<br/>
	// <p/>
	// Typical values here would be to send from your product's name.
	// <p/>
	// Important: Address must be pre-approved by Cisco.
	// See docs on origin addresses for what is allowed.
	FromAddress string `protobuf:"bytes,3,opt,name=from_address,json=fromAddress,proto3" json:"from_address,omitempty"`
	// Deadline to which the message needs to be delivered. If this is passed
	// and a delivery is not succeeded, the message delivery will fail. If not set
	// will use the maximum deadline. Maximum is 7 days.
	DeliveryDeadline *durationpb.Duration `protobuf:"bytes,4,opt,name=delivery_deadline,json=deliveryDeadline,proto3" json:"delivery_deadline,omitempty"`
	unknownFields    protoimpl.UnknownFields
	sizeCache        protoimpl.SizeCache
}

func (x *SendTextToSubscriberRequest) Reset() {
	*x = SendTextToSubscriberRequest{}
	mi := &file_wgtwo_sms_v1_sms_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SendTextToSubscriberRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SendTextToSubscriberRequest) ProtoMessage() {}

func (x *SendTextToSubscriberRequest) ProtoReflect() protoreflect.Message {
	mi := &file_wgtwo_sms_v1_sms_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SendTextToSubscriberRequest.ProtoReflect.Descriptor instead.
func (*SendTextToSubscriberRequest) Descriptor() ([]byte, []int) {
	return file_wgtwo_sms_v1_sms_proto_rawDescGZIP(), []int{1}
}

func (x *SendTextToSubscriberRequest) GetContent() string {
	if x != nil {
		return x.Content
	}
	return ""
}

func (x *SendTextToSubscriberRequest) GetToSubscriber() string {
	if x != nil {
		return x.ToSubscriber
	}
	return ""
}

func (x *SendTextToSubscriberRequest) GetFromAddress() string {
	if x != nil {
		return x.FromAddress
	}
	return ""
}

func (x *SendTextToSubscriberRequest) GetDeliveryDeadline() *durationpb.Duration {
	if x != nil {
		return x.DeliveryDeadline
	}
	return nil
}

// The request message to send data SMS to a subscriber.
type SendDataToSubscriberRequest struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// The binary content of the data SMS. Must be at least 1 byte, and maximum
	// 2000 bytes.
	Content []byte `protobuf:"bytes,1,opt,name=content,proto3" json:"content,omitempty"`
	// The destination phone number of the subscriber to receive the
	// message. Must be international number starting with '+'.
	ToSubscriber string `protobuf:"bytes,2,opt,name=to_subscriber,json=toSubscriber,proto3" json:"to_subscriber,omitempty"`
	// Origin address of the message.
	// <p/>
	// It can either be a:<br/>
	// - a phone number formatted as E.164 starting with '+'.<br/>
	// - a alphanumeric sender ID.<br/>
	// - short form number.<br/>
	// - network specific number.<br/>
	// <p/>
	// Typical values here would be to send from your product's name.
	// <p/>
	// Important: Address must be pre-approved by Cisco.
	// See docs on origin addresses for what is allowed.
	FromAddress string `protobuf:"bytes,3,opt,name=from_address,json=fromAddress,proto3" json:"from_address,omitempty"`
	// Deadline to which the message needs to be delivered. If this is passed
	// and a delivery is not succeeded, the message delivery will fail. If not set
	// will use the maximum deadline. Maximum is 7 days.
	DeliveryDeadline *durationpb.Duration `protobuf:"bytes,4,opt,name=delivery_deadline,json=deliveryDeadline,proto3" json:"delivery_deadline,omitempty"`
	// The application port for the message.
	ApplicationPort *ApplicationPort `protobuf:"bytes,6,opt,name=application_port,json=applicationPort,proto3" json:"application_port,omitempty"`
	// SMS protocol identifier.
	// Only the least-significant 8 bits must be used, rest fixed at 0.
	// Default is 0.
	ProtocolIdentifier int32 `protobuf:"varint,7,opt,name=protocol_identifier,json=protocolIdentifier,proto3" json:"protocol_identifier,omitempty"`
	// If set to true, the UDH (User-Data Header) of the SMS will contain
	// the CPI (Command Packet Identifier) for an SMS-PP (Single Short Message
	// Point to Point) as defined in the 3GPP TS 31.115.
	// Default is false.
	SetSmsPpCpi bool `protobuf:"varint,8,opt,name=set_sms_pp_cpi,json=setSmsPpCpi,proto3" json:"set_sms_pp_cpi,omitempty"`
	// The Data Coding Group for the message.
	// If the coding group is not specified, the default is General.
	//
	// Types that are valid to be assigned to DcsCodingGroup:
	//
	//	*SendDataToSubscriberRequest_CodingGroupGeneral
	//	*SendDataToSubscriberRequest_CodingGroupMessageClass
	//	*SendDataToSubscriberRequest_MessageClass
	DcsCodingGroup isSendDataToSubscriberRequest_DcsCodingGroup `protobuf_oneof:"dcsCodingGroup"`
	unknownFields  protoimpl.UnknownFields
	sizeCache      protoimpl.SizeCache
}

func (x *SendDataToSubscriberRequest) Reset() {
	*x = SendDataToSubscriberRequest{}
	mi := &file_wgtwo_sms_v1_sms_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SendDataToSubscriberRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SendDataToSubscriberRequest) ProtoMessage() {}

func (x *SendDataToSubscriberRequest) ProtoReflect() protoreflect.Message {
	mi := &file_wgtwo_sms_v1_sms_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SendDataToSubscriberRequest.ProtoReflect.Descriptor instead.
func (*SendDataToSubscriberRequest) Descriptor() ([]byte, []int) {
	return file_wgtwo_sms_v1_sms_proto_rawDescGZIP(), []int{2}
}

func (x *SendDataToSubscriberRequest) GetContent() []byte {
	if x != nil {
		return x.Content
	}
	return nil
}

func (x *SendDataToSubscriberRequest) GetToSubscriber() string {
	if x != nil {
		return x.ToSubscriber
	}
	return ""
}

func (x *SendDataToSubscriberRequest) GetFromAddress() string {
	if x != nil {
		return x.FromAddress
	}
	return ""
}

func (x *SendDataToSubscriberRequest) GetDeliveryDeadline() *durationpb.Duration {
	if x != nil {
		return x.DeliveryDeadline
	}
	return nil
}

func (x *SendDataToSubscriberRequest) GetApplicationPort() *ApplicationPort {
	if x != nil {
		return x.ApplicationPort
	}
	return nil
}

func (x *SendDataToSubscriberRequest) GetProtocolIdentifier() int32 {
	if x != nil {
		return x.ProtocolIdentifier
	}
	return 0
}

func (x *SendDataToSubscriberRequest) GetSetSmsPpCpi() bool {
	if x != nil {
		return x.SetSmsPpCpi
	}
	return false
}

func (x *SendDataToSubscriberRequest) GetDcsCodingGroup() isSendDataToSubscriberRequest_DcsCodingGroup {
	if x != nil {
		return x.DcsCodingGroup
	}
	return nil
}

func (x *SendDataToSubscriberRequest) GetCodingGroupGeneral() *SendDataToSubscriberRequest_DcsCodingGroupGeneral {
	if x != nil {
		if x, ok := x.DcsCodingGroup.(*SendDataToSubscriberRequest_CodingGroupGeneral); ok {
			return x.CodingGroupGeneral
		}
	}
	return nil
}

func (x *SendDataToSubscriberRequest) GetCodingGroupMessageClass() *SendDataToSubscriberRequest_DcsCodingGroupMessageClass {
	if x != nil {
		if x, ok := x.DcsCodingGroup.(*SendDataToSubscriberRequest_CodingGroupMessageClass); ok {
			return x.CodingGroupMessageClass
		}
	}
	return nil
}

// Deprecated: Marked as deprecated in wgtwo/sms/v1/sms.proto.
func (x *SendDataToSubscriberRequest) GetMessageClass() MessageClass {
	if x != nil {
		if x, ok := x.DcsCodingGroup.(*SendDataToSubscriberRequest_MessageClass); ok {
			return x.MessageClass
		}
	}
	return MessageClass_MESSAGE_CLASS_UNSPECIFIED
}

type isSendDataToSubscriberRequest_DcsCodingGroup interface {
	isSendDataToSubscriberRequest_DcsCodingGroup()
}

type SendDataToSubscriberRequest_CodingGroupGeneral struct {
	CodingGroupGeneral *SendDataToSubscriberRequest_DcsCodingGroupGeneral `protobuf:"bytes,9,opt,name=coding_group_general,json=codingGroupGeneral,proto3,oneof"`
}

type SendDataToSubscriberRequest_CodingGroupMessageClass struct {
	CodingGroupMessageClass *SendDataToSubscriberRequest_DcsCodingGroupMessageClass `protobuf:"bytes,10,opt,name=coding_group_message_class,json=codingGroupMessageClass,proto3,oneof"`
}

type SendDataToSubscriberRequest_MessageClass struct {
	// The message class to use for the data SMS message. This is a Deprecated config value for message class.
	// Instead of using this, set message class value in the coding group config.
	//
	// Deprecated: Marked as deprecated in wgtwo/sms/v1/sms.proto.
	MessageClass MessageClass `protobuf:"varint,5,opt,name=message_class,json=messageClass,proto3,enum=wgtwo.sms.v1.MessageClass,oneof"`
}

func (*SendDataToSubscriberRequest_CodingGroupGeneral) isSendDataToSubscriberRequest_DcsCodingGroup() {
}

func (*SendDataToSubscriberRequest_CodingGroupMessageClass) isSendDataToSubscriberRequest_DcsCodingGroup() {
}

func (*SendDataToSubscriberRequest_MessageClass) isSendDataToSubscriberRequest_DcsCodingGroup() {}

// Application ports are used to send data SMS messages to specific applications
// on the handset. If a reply to the message is sent, it should use the same
// ports but swap originator and destination port numbers.
type ApplicationPort struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// The originator application port.
	OriginatorPort uint32 `protobuf:"varint,1,opt,name=originator_port,json=originatorPort,proto3" json:"originator_port,omitempty"`
	// The destination application port.
	DestinationPort uint32 `protobuf:"varint,2,opt,name=destination_port,json=destinationPort,proto3" json:"destination_port,omitempty"`
	unknownFields   protoimpl.UnknownFields
	sizeCache       protoimpl.SizeCache
}

func (x *ApplicationPort) Reset() {
	*x = ApplicationPort{}
	mi := &file_wgtwo_sms_v1_sms_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ApplicationPort) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ApplicationPort) ProtoMessage() {}

func (x *ApplicationPort) ProtoReflect() protoreflect.Message {
	mi := &file_wgtwo_sms_v1_sms_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ApplicationPort.ProtoReflect.Descriptor instead.
func (*ApplicationPort) Descriptor() ([]byte, []int) {
	return file_wgtwo_sms_v1_sms_proto_rawDescGZIP(), []int{3}
}

func (x *ApplicationPort) GetOriginatorPort() uint32 {
	if x != nil {
		return x.OriginatorPort
	}
	return 0
}

func (x *ApplicationPort) GetDestinationPort() uint32 {
	if x != nil {
		return x.DestinationPort
	}
	return 0
}

// The response message for sending a SMS.
type SendMessageResponse struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// An ID representing the message. For events etc related to the message, this ID
	// will be used in the event as identifier.
	MessageId string `protobuf:"bytes,1,opt,name=message_id,json=messageId,proto3" json:"message_id,omitempty"`
	// The response status for attempting to send the message.
	Status SendMessageResponse_SendStatus `protobuf:"varint,2,opt,name=status,proto3,enum=wgtwo.sms.v1.SendMessageResponse_SendStatus" json:"status,omitempty"`
	// Human readable description for what failed or rejected the message.
	Description string `protobuf:"bytes,3,opt,name=description,proto3" json:"description,omitempty"`
	// Number of fragments sent. This is because of the underlying SMS protocols only
	// supports sending 140 bytes per message after encoding and packing. This is including
	// extra encoding info and correlation and part handling for multi-fragmented messages.
	NumFragments  uint32 `protobuf:"varint,4,opt,name=num_fragments,json=numFragments,proto3" json:"num_fragments,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *SendMessageResponse) Reset() {
	*x = SendMessageResponse{}
	mi := &file_wgtwo_sms_v1_sms_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SendMessageResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SendMessageResponse) ProtoMessage() {}

func (x *SendMessageResponse) ProtoReflect() protoreflect.Message {
	mi := &file_wgtwo_sms_v1_sms_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SendMessageResponse.ProtoReflect.Descriptor instead.
func (*SendMessageResponse) Descriptor() ([]byte, []int) {
	return file_wgtwo_sms_v1_sms_proto_rawDescGZIP(), []int{4}
}

func (x *SendMessageResponse) GetMessageId() string {
	if x != nil {
		return x.MessageId
	}
	return ""
}

func (x *SendMessageResponse) GetStatus() SendMessageResponse_SendStatus {
	if x != nil {
		return x.Status
	}
	return SendMessageResponse_SEND_STATUS_UNSPECIFIED
}

func (x *SendMessageResponse) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *SendMessageResponse) GetNumFragments() uint32 {
	if x != nil {
		return x.NumFragments
	}
	return 0
}

// General Data Coding Group
type SendDataToSubscriberRequest_DcsCodingGroupGeneral struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// The message class to use for the data SMS message.
	MessageClass  *MessageClass `protobuf:"varint,1,opt,name=message_class,json=messageClass,proto3,enum=wgtwo.sms.v1.MessageClass,oneof" json:"message_class,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *SendDataToSubscriberRequest_DcsCodingGroupGeneral) Reset() {
	*x = SendDataToSubscriberRequest_DcsCodingGroupGeneral{}
	mi := &file_wgtwo_sms_v1_sms_proto_msgTypes[5]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SendDataToSubscriberRequest_DcsCodingGroupGeneral) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SendDataToSubscriberRequest_DcsCodingGroupGeneral) ProtoMessage() {}

func (x *SendDataToSubscriberRequest_DcsCodingGroupGeneral) ProtoReflect() protoreflect.Message {
	mi := &file_wgtwo_sms_v1_sms_proto_msgTypes[5]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SendDataToSubscriberRequest_DcsCodingGroupGeneral.ProtoReflect.Descriptor instead.
func (*SendDataToSubscriberRequest_DcsCodingGroupGeneral) Descriptor() ([]byte, []int) {
	return file_wgtwo_sms_v1_sms_proto_rawDescGZIP(), []int{2, 0}
}

func (x *SendDataToSubscriberRequest_DcsCodingGroupGeneral) GetMessageClass() MessageClass {
	if x != nil && x.MessageClass != nil {
		return *x.MessageClass
	}
	return MessageClass_MESSAGE_CLASS_UNSPECIFIED
}

// Message Class Data Coding Group
type SendDataToSubscriberRequest_DcsCodingGroupMessageClass struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// The message class to use for the data SMS message.
	MessageClass  MessageClass `protobuf:"varint,1,opt,name=message_class,json=messageClass,proto3,enum=wgtwo.sms.v1.MessageClass" json:"message_class,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *SendDataToSubscriberRequest_DcsCodingGroupMessageClass) Reset() {
	*x = SendDataToSubscriberRequest_DcsCodingGroupMessageClass{}
	mi := &file_wgtwo_sms_v1_sms_proto_msgTypes[6]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SendDataToSubscriberRequest_DcsCodingGroupMessageClass) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SendDataToSubscriberRequest_DcsCodingGroupMessageClass) ProtoMessage() {}

func (x *SendDataToSubscriberRequest_DcsCodingGroupMessageClass) ProtoReflect() protoreflect.Message {
	mi := &file_wgtwo_sms_v1_sms_proto_msgTypes[6]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SendDataToSubscriberRequest_DcsCodingGroupMessageClass.ProtoReflect.Descriptor instead.
func (*SendDataToSubscriberRequest_DcsCodingGroupMessageClass) Descriptor() ([]byte, []int) {
	return file_wgtwo_sms_v1_sms_proto_rawDescGZIP(), []int{2, 1}
}

func (x *SendDataToSubscriberRequest_DcsCodingGroupMessageClass) GetMessageClass() MessageClass {
	if x != nil {
		return x.MessageClass
	}
	return MessageClass_MESSAGE_CLASS_UNSPECIFIED
}

var File_wgtwo_sms_v1_sms_proto protoreflect.FileDescriptor

const file_wgtwo_sms_v1_sms_proto_rawDesc = "" +
	"\n" +
	"\x16wgtwo/sms/v1/sms.proto\x12\fwgtwo.sms.v1\x1a\x1cgoogle/api/annotations.proto\x1a\x1egoogle/protobuf/duration.proto\x1a#wgtwo/annotations/annotations.proto\"\xc9\x01\n" +
	"\x1dSendTextFromSubscriberRequest\x12\x18\n" +
	"\acontent\x18\x01 \x01(\tR\acontent\x12'\n" +
	"\x0ffrom_subscriber\x18\x02 \x01(\tR\x0efromSubscriber\x12\x1d\n" +
	"\n" +
	"to_address\x18\x03 \x01(\tR\ttoAddress\x12F\n" +
	"\x11delivery_deadline\x18\x04 \x01(\v2\x19.google.protobuf.DurationR\x10deliveryDeadline\"\xc7\x01\n" +
	"\x1bSendTextToSubscriberRequest\x12\x18\n" +
	"\acontent\x18\x01 \x01(\tR\acontent\x12#\n" +
	"\rto_subscriber\x18\x02 \x01(\tR\ftoSubscriber\x12!\n" +
	"\ffrom_address\x18\x03 \x01(\tR\vfromAddress\x12F\n" +
	"\x11delivery_deadline\x18\x04 \x01(\v2\x19.google.protobuf.DurationR\x10deliveryDeadline\"\x8b\a\n" +
	"\x1bSendDataToSubscriberRequest\x12\x18\n" +
	"\acontent\x18\x01 \x01(\fR\acontent\x12#\n" +
	"\rto_subscriber\x18\x02 \x01(\tR\ftoSubscriber\x12!\n" +
	"\ffrom_address\x18\x03 \x01(\tR\vfromAddress\x12F\n" +
	"\x11delivery_deadline\x18\x04 \x01(\v2\x19.google.protobuf.DurationR\x10deliveryDeadline\x12H\n" +
	"\x10application_port\x18\x06 \x01(\v2\x1d.wgtwo.sms.v1.ApplicationPortR\x0fapplicationPort\x12/\n" +
	"\x13protocol_identifier\x18\a \x01(\x05R\x12protocolIdentifier\x12#\n" +
	"\x0eset_sms_pp_cpi\x18\b \x01(\bR\vsetSmsPpCpi\x12s\n" +
	"\x14coding_group_general\x18\t \x01(\v2?.wgtwo.sms.v1.SendDataToSubscriberRequest.DcsCodingGroupGeneralH\x00R\x12codingGroupGeneral\x12\x83\x01\n" +
	"\x1acoding_group_message_class\x18\n" +
	" \x01(\v2D.wgtwo.sms.v1.SendDataToSubscriberRequest.DcsCodingGroupMessageClassH\x00R\x17codingGroupMessageClass\x12E\n" +
	"\rmessage_class\x18\x05 \x01(\x0e2\x1a.wgtwo.sms.v1.MessageClassB\x02\x18\x01H\x00R\fmessageClass\x1ao\n" +
	"\x15DcsCodingGroupGeneral\x12D\n" +
	"\rmessage_class\x18\x01 \x01(\x0e2\x1a.wgtwo.sms.v1.MessageClassH\x00R\fmessageClass\x88\x01\x01B\x10\n" +
	"\x0e_message_class\x1a]\n" +
	"\x1aDcsCodingGroupMessageClass\x12?\n" +
	"\rmessage_class\x18\x01 \x01(\x0e2\x1a.wgtwo.sms.v1.MessageClassR\fmessageClassB\x10\n" +
	"\x0edcsCodingGroup\"e\n" +
	"\x0fApplicationPort\x12'\n" +
	"\x0foriginator_port\x18\x01 \x01(\rR\x0eoriginatorPort\x12)\n" +
	"\x10destination_port\x18\x02 \x01(\rR\x0fdestinationPort\"\xaf\x02\n" +
	"\x13SendMessageResponse\x12\x1d\n" +
	"\n" +
	"message_id\x18\x01 \x01(\tR\tmessageId\x12D\n" +
	"\x06status\x18\x02 \x01(\x0e2,.wgtwo.sms.v1.SendMessageResponse.SendStatusR\x06status\x12 \n" +
	"\vdescription\x18\x03 \x01(\tR\vdescription\x12#\n" +
	"\rnum_fragments\x18\x04 \x01(\rR\fnumFragments\"l\n" +
	"\n" +
	"SendStatus\x12\x1b\n" +
	"\x17SEND_STATUS_UNSPECIFIED\x10\x00\x12\x12\n" +
	"\x0eSEND_STATUS_OK\x10\x01\x12\x16\n" +
	"\x12SEND_STATUS_REJECT\x10\x02\x12\x15\n" +
	"\x11SEND_STATUS_ERROR\x10\x03*\xac\x01\n" +
	"\fMessageClass\x12\x1d\n" +
	"\x19MESSAGE_CLASS_UNSPECIFIED\x10\x00\x12\x1f\n" +
	"\x1bMESSAGE_CLASS_FLASH_MESSAGE\x10\x01\x12\x1d\n" +
	"\x19MESSAGE_CLASS_ME_SPECIFIC\x10\x02\x12\x1e\n" +
	"\x1aMESSAGE_CLASS_SIM_SPECIFIC\x10\x03\x12\x1d\n" +
	"\x19MESSAGE_CLASS_TE_SPECIFIC\x10\x042\xbc\x04\n" +
	"\n" +
	"SmsService\x12\xbd\x01\n" +
	"\x16SendTextFromSubscriber\x12+.wgtwo.sms.v1.SendTextFromSubscriberRequest\x1a!.wgtwo.sms.v1.SendMessageResponse\"S\xea\xb5\x18\x1dsms.text:send_from_subscriber\x82\xd3\xe4\x93\x02,:\x01*\"'/sms/v0/outboxes/{from_subscriber}/text\x12\xb4\x01\n" +
	"\x14SendTextToSubscriber\x12).wgtwo.sms.v1.SendTextToSubscriberRequest\x1a!.wgtwo.sms.v1.SendMessageResponse\"N\xea\xb5\x18\x1bsms.text:send_to_subscriber\x82\xd3\xe4\x93\x02):\x01*\"$/sms/v0/inboxes/{to_subscriber}/text\x12\xb6\x01\n" +
	"\x14SendDataToSubscriber\x12).wgtwo.sms.v1.SendDataToSubscriberRequest\x1a!.wgtwo.sms.v1.SendMessageResponse\"P\xea\xb5\x18\x1bsms.data:send_to_subscriber\x82\xd3\xe4\x93\x02+:\x01*\"&/sms/v0/inboxes/{to_subscriber}/binaryB\xa3\x01\n" +
	"\x10com.wgtwo.sms.v1B\bSmsProtoP\x01Z3github.com/working-group-two/wgtwoapis/wgtwo/sms/v1\xa2\x02\x03WSX\xaa\x02\fWgtwo.Sms.V1\xca\x02\fWgtwo\\Sms\\V1\xe2\x02\x18Wgtwo\\Sms\\V1\\GPBMetadata\xea\x02\x0eWgtwo::Sms::V1b\x06proto3"

var (
	file_wgtwo_sms_v1_sms_proto_rawDescOnce sync.Once
	file_wgtwo_sms_v1_sms_proto_rawDescData []byte
)

func file_wgtwo_sms_v1_sms_proto_rawDescGZIP() []byte {
	file_wgtwo_sms_v1_sms_proto_rawDescOnce.Do(func() {
		file_wgtwo_sms_v1_sms_proto_rawDescData = protoimpl.X.CompressGZIP(unsafe.Slice(unsafe.StringData(file_wgtwo_sms_v1_sms_proto_rawDesc), len(file_wgtwo_sms_v1_sms_proto_rawDesc)))
	})
	return file_wgtwo_sms_v1_sms_proto_rawDescData
}

var file_wgtwo_sms_v1_sms_proto_enumTypes = make([]protoimpl.EnumInfo, 2)
var file_wgtwo_sms_v1_sms_proto_msgTypes = make([]protoimpl.MessageInfo, 7)
var file_wgtwo_sms_v1_sms_proto_goTypes = []any{
	(MessageClass)(0),                                              // 0: wgtwo.sms.v1.MessageClass
	(SendMessageResponse_SendStatus)(0),                            // 1: wgtwo.sms.v1.SendMessageResponse.SendStatus
	(*SendTextFromSubscriberRequest)(nil),                          // 2: wgtwo.sms.v1.SendTextFromSubscriberRequest
	(*SendTextToSubscriberRequest)(nil),                            // 3: wgtwo.sms.v1.SendTextToSubscriberRequest
	(*SendDataToSubscriberRequest)(nil),                            // 4: wgtwo.sms.v1.SendDataToSubscriberRequest
	(*ApplicationPort)(nil),                                        // 5: wgtwo.sms.v1.ApplicationPort
	(*SendMessageResponse)(nil),                                    // 6: wgtwo.sms.v1.SendMessageResponse
	(*SendDataToSubscriberRequest_DcsCodingGroupGeneral)(nil),      // 7: wgtwo.sms.v1.SendDataToSubscriberRequest.DcsCodingGroupGeneral
	(*SendDataToSubscriberRequest_DcsCodingGroupMessageClass)(nil), // 8: wgtwo.sms.v1.SendDataToSubscriberRequest.DcsCodingGroupMessageClass
	(*durationpb.Duration)(nil),                                    // 9: google.protobuf.Duration
}
var file_wgtwo_sms_v1_sms_proto_depIdxs = []int32{
	9,  // 0: wgtwo.sms.v1.SendTextFromSubscriberRequest.delivery_deadline:type_name -> google.protobuf.Duration
	9,  // 1: wgtwo.sms.v1.SendTextToSubscriberRequest.delivery_deadline:type_name -> google.protobuf.Duration
	9,  // 2: wgtwo.sms.v1.SendDataToSubscriberRequest.delivery_deadline:type_name -> google.protobuf.Duration
	5,  // 3: wgtwo.sms.v1.SendDataToSubscriberRequest.application_port:type_name -> wgtwo.sms.v1.ApplicationPort
	7,  // 4: wgtwo.sms.v1.SendDataToSubscriberRequest.coding_group_general:type_name -> wgtwo.sms.v1.SendDataToSubscriberRequest.DcsCodingGroupGeneral
	8,  // 5: wgtwo.sms.v1.SendDataToSubscriberRequest.coding_group_message_class:type_name -> wgtwo.sms.v1.SendDataToSubscriberRequest.DcsCodingGroupMessageClass
	0,  // 6: wgtwo.sms.v1.SendDataToSubscriberRequest.message_class:type_name -> wgtwo.sms.v1.MessageClass
	1,  // 7: wgtwo.sms.v1.SendMessageResponse.status:type_name -> wgtwo.sms.v1.SendMessageResponse.SendStatus
	0,  // 8: wgtwo.sms.v1.SendDataToSubscriberRequest.DcsCodingGroupGeneral.message_class:type_name -> wgtwo.sms.v1.MessageClass
	0,  // 9: wgtwo.sms.v1.SendDataToSubscriberRequest.DcsCodingGroupMessageClass.message_class:type_name -> wgtwo.sms.v1.MessageClass
	2,  // 10: wgtwo.sms.v1.SmsService.SendTextFromSubscriber:input_type -> wgtwo.sms.v1.SendTextFromSubscriberRequest
	3,  // 11: wgtwo.sms.v1.SmsService.SendTextToSubscriber:input_type -> wgtwo.sms.v1.SendTextToSubscriberRequest
	4,  // 12: wgtwo.sms.v1.SmsService.SendDataToSubscriber:input_type -> wgtwo.sms.v1.SendDataToSubscriberRequest
	6,  // 13: wgtwo.sms.v1.SmsService.SendTextFromSubscriber:output_type -> wgtwo.sms.v1.SendMessageResponse
	6,  // 14: wgtwo.sms.v1.SmsService.SendTextToSubscriber:output_type -> wgtwo.sms.v1.SendMessageResponse
	6,  // 15: wgtwo.sms.v1.SmsService.SendDataToSubscriber:output_type -> wgtwo.sms.v1.SendMessageResponse
	13, // [13:16] is the sub-list for method output_type
	10, // [10:13] is the sub-list for method input_type
	10, // [10:10] is the sub-list for extension type_name
	10, // [10:10] is the sub-list for extension extendee
	0,  // [0:10] is the sub-list for field type_name
}

func init() { file_wgtwo_sms_v1_sms_proto_init() }
func file_wgtwo_sms_v1_sms_proto_init() {
	if File_wgtwo_sms_v1_sms_proto != nil {
		return
	}
	file_wgtwo_sms_v1_sms_proto_msgTypes[2].OneofWrappers = []any{
		(*SendDataToSubscriberRequest_CodingGroupGeneral)(nil),
		(*SendDataToSubscriberRequest_CodingGroupMessageClass)(nil),
		(*SendDataToSubscriberRequest_MessageClass)(nil),
	}
	file_wgtwo_sms_v1_sms_proto_msgTypes[5].OneofWrappers = []any{}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_wgtwo_sms_v1_sms_proto_rawDesc), len(file_wgtwo_sms_v1_sms_proto_rawDesc)),
			NumEnums:      2,
			NumMessages:   7,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_wgtwo_sms_v1_sms_proto_goTypes,
		DependencyIndexes: file_wgtwo_sms_v1_sms_proto_depIdxs,
		EnumInfos:         file_wgtwo_sms_v1_sms_proto_enumTypes,
		MessageInfos:      file_wgtwo_sms_v1_sms_proto_msgTypes,
	}.Build()
	File_wgtwo_sms_v1_sms_proto = out.File
	file_wgtwo_sms_v1_sms_proto_goTypes = nil
	file_wgtwo_sms_v1_sms_proto_depIdxs = nil
}
