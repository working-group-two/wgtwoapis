// Copyright 2020 Working Group Two AS
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//

// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             (unknown)
// source: wgtwo/sms/v1/sms.proto

package v1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	SmsService_SendTextFromSubscriber_FullMethodName = "/wgtwo.sms.v1.SmsService/SendTextFromSubscriber"
	SmsService_SendTextToSubscriber_FullMethodName   = "/wgtwo.sms.v1.SmsService/SendTextToSubscriber"
	SmsService_SendDataToSubscriber_FullMethodName   = "/wgtwo.sms.v1.SmsService/SendDataToSubscriber"
)

// SmsServiceClient is the client API for SmsService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type SmsServiceClient interface {
	// Send a text SMS message from the subscriber to any number the subscriber
	// can send to.
	SendTextFromSubscriber(ctx context.Context, in *SendTextFromSubscriberRequest, opts ...grpc.CallOption) (*SendMessageResponse, error)
	// Send a text SMS message to the subscriber as any sender address the
	// product has a right to send as.
	SendTextToSubscriber(ctx context.Context, in *SendTextToSubscriberRequest, opts ...grpc.CallOption) (*SendMessageResponse, error)
	// Send a data SMS message to the subscriber as any sender address the
	// product has a right to send as.
	SendDataToSubscriber(ctx context.Context, in *SendDataToSubscriberRequest, opts ...grpc.CallOption) (*SendMessageResponse, error)
}

type smsServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewSmsServiceClient(cc grpc.ClientConnInterface) SmsServiceClient {
	return &smsServiceClient{cc}
}

func (c *smsServiceClient) SendTextFromSubscriber(ctx context.Context, in *SendTextFromSubscriberRequest, opts ...grpc.CallOption) (*SendMessageResponse, error) {
	out := new(SendMessageResponse)
	err := c.cc.Invoke(ctx, SmsService_SendTextFromSubscriber_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *smsServiceClient) SendTextToSubscriber(ctx context.Context, in *SendTextToSubscriberRequest, opts ...grpc.CallOption) (*SendMessageResponse, error) {
	out := new(SendMessageResponse)
	err := c.cc.Invoke(ctx, SmsService_SendTextToSubscriber_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *smsServiceClient) SendDataToSubscriber(ctx context.Context, in *SendDataToSubscriberRequest, opts ...grpc.CallOption) (*SendMessageResponse, error) {
	out := new(SendMessageResponse)
	err := c.cc.Invoke(ctx, SmsService_SendDataToSubscriber_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// SmsServiceServer is the server API for SmsService service.
// All implementations should embed UnimplementedSmsServiceServer
// for forward compatibility
type SmsServiceServer interface {
	// Send a text SMS message from the subscriber to any number the subscriber
	// can send to.
	SendTextFromSubscriber(context.Context, *SendTextFromSubscriberRequest) (*SendMessageResponse, error)
	// Send a text SMS message to the subscriber as any sender address the
	// product has a right to send as.
	SendTextToSubscriber(context.Context, *SendTextToSubscriberRequest) (*SendMessageResponse, error)
	// Send a data SMS message to the subscriber as any sender address the
	// product has a right to send as.
	SendDataToSubscriber(context.Context, *SendDataToSubscriberRequest) (*SendMessageResponse, error)
}

// UnimplementedSmsServiceServer should be embedded to have forward compatible implementations.
type UnimplementedSmsServiceServer struct {
}

func (UnimplementedSmsServiceServer) SendTextFromSubscriber(context.Context, *SendTextFromSubscriberRequest) (*SendMessageResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SendTextFromSubscriber not implemented")
}
func (UnimplementedSmsServiceServer) SendTextToSubscriber(context.Context, *SendTextToSubscriberRequest) (*SendMessageResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SendTextToSubscriber not implemented")
}
func (UnimplementedSmsServiceServer) SendDataToSubscriber(context.Context, *SendDataToSubscriberRequest) (*SendMessageResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SendDataToSubscriber not implemented")
}

// UnsafeSmsServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to SmsServiceServer will
// result in compilation errors.
type UnsafeSmsServiceServer interface {
	mustEmbedUnimplementedSmsServiceServer()
}

func RegisterSmsServiceServer(s grpc.ServiceRegistrar, srv SmsServiceServer) {
	s.RegisterService(&SmsService_ServiceDesc, srv)
}

func _SmsService_SendTextFromSubscriber_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SendTextFromSubscriberRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SmsServiceServer).SendTextFromSubscriber(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SmsService_SendTextFromSubscriber_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SmsServiceServer).SendTextFromSubscriber(ctx, req.(*SendTextFromSubscriberRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SmsService_SendTextToSubscriber_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SendTextToSubscriberRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SmsServiceServer).SendTextToSubscriber(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SmsService_SendTextToSubscriber_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SmsServiceServer).SendTextToSubscriber(ctx, req.(*SendTextToSubscriberRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SmsService_SendDataToSubscriber_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SendDataToSubscriberRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SmsServiceServer).SendDataToSubscriber(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SmsService_SendDataToSubscriber_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SmsServiceServer).SendDataToSubscriber(ctx, req.(*SendDataToSubscriberRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// SmsService_ServiceDesc is the grpc.ServiceDesc for SmsService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var SmsService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "wgtwo.sms.v1.SmsService",
	HandlerType: (*SmsServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "SendTextFromSubscriber",
			Handler:    _SmsService_SendTextFromSubscriber_Handler,
		},
		{
			MethodName: "SendTextToSubscriber",
			Handler:    _SmsService_SendTextToSubscriber_Handler,
		},
		{
			MethodName: "SendDataToSubscriber",
			Handler:    _SmsService_SendDataToSubscriber_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "wgtwo/sms/v1/sms.proto",
}
