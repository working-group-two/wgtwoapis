// Copyright 2020 Working Group Two AS
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//

syntax = "proto3";

package wgtwo.sms.v1;

import "google/protobuf/duration.proto";
import "wgtwo/annotations/annotations.proto";

option go_package = "github.com/working-group-two/wgtwoapis/wgtwo/sms/v1";

option java_package = "com.wgtwo.api.v1.sms";
option java_outer_classname = "SmsProto";

// Service to handle sending of SMS messages to and from subscribers.
service SmsService {
  // Send a text SMS message from the subscriber to any number the subscriber
  // can send to.
  rpc SendTextFromSubscriber (SendTextFromSubscriberRequest) returns (SendMessageResponse) {
    option (scope) = "sms.text:send_from_subscriber";
  }
  // Send a text SMS message to the subscriber as any sender address the
  // product has a right to send as.
  rpc SendTextToSubscriber (SendTextToSubscriberRequest) returns (SendMessageResponse) {
    option (scope) = "sms.text:send_to_subscriber";
  }
  // Send a data SMS message to the subscriber as any sender address the
  // product has a right to send as.
  rpc SendDataToSubscriber (SendDataToSubscriberRequest) returns (SendMessageResponse) {
    option (scope) = "sms.data:send_to_subscriber";
  }
}

message SendTextFromSubscriberRequest {
  // The message text content. Minimum 1 character, maximum 2000 characters. Supports
  // unicode, though completeness is dependent on the receiver handset.
  string content = 1;

  // The subscriber number to send this. The sending product must have a right
  // to send as the subscriber specifically. E.g. operators can only send as
  // their own subscribers, third party products only as subscribers who have
  // enabled the product. Must be international number starting with '+'.
  string from_subscriber = 2;

  // The destination number of the message. Can be international starting
  // with '+', short form number or network specific numbers.
  string to_address = 3;

  // Deadline to which the message needs to be delivered. If this is passed
  // and a delivery is not succeeded, the message delivery will fail. If not set
  // will use the maximum deadline. Maximum is 7 days.
  google.protobuf.Duration delivery_deadline = 4;
}

message SendTextToSubscriberRequest {
  // The message text content. Minimum 1 character, maximum 2000 characters. Supports
  // unicode, though completeness is dependent on the receiver handset.
  string content = 1;

  // The destination phone number of the subscriber to receive the
  // message. Must be international number starting with '+'.
  string to_subscriber = 2;

  // Origin address of the message.
  //
  // It can either be a
  // - a phone number formatted as E.164 starting with '+'.
  // - a alphanumeric sender ID.
  // - short form number.
  // - network specific number.
  //
  // Typical values here would be to send from your product's name.
  //
  // Important: Address must be pre-approved by Working Group Two.
  // See docs on origin addresses for what is allowed.
  string from_address = 3;

  // Deadline to which the message needs to be delivered. If this is passed
  // and a delivery is not succeeded, the message delivery will fail. If not set
  // will use the maximum deadline. Maximum is 7 days.
  google.protobuf.Duration delivery_deadline = 4;
}

message SendDataToSubscriberRequest {
  // The binary content of the data SMS. Must be at least 1 byte, and maximum
  // 2000 bytes.
  bytes content = 1;

  // The destination phone number of the subscriber to receive the
  // message. Must be international number starting with '+'.
  string to_subscriber = 2;

  // Origin address of the message.
  //
  // It can either be a
  // - a phone number formatted as E.164 starting with '+'.
  // - a alphanumeric sender ID.
  // - short form number.
  // - network specific number.
  //
  // Typical values here would be to send from your product's name.
  //
  // Important: Address must be pre-approved by Working Group Two.
  // See docs on origin addresses for what is allowed.
  string from_address = 3;

  // Deadline to which the message needs to be delivered. If this is passed
  // and a delivery is not succeeded, the message delivery will fail. If not set
  // will use the maximum deadline. Maximum is 7 days.
  google.protobuf.Duration delivery_deadline = 4;

  // The message class to use for the data SMS message.
  MessageClass message_class = 5;

  // The application port for the message.
  ApplicationPort application_port = 6;
}

/**
 * The class of the message.
 *
 * See https://en.wikipedia.org/wiki/Data_Coding_Scheme#Message_Classes
 */
enum MessageClass {
  // No message class specified.
  MESSAGE_CLASS_UNSPECIFIED = 0;

  // CLASS 0
  // A flash message is a message that is not stored on the device. It is handled
  // immediately or dropped, and also cannot be multi-fragment. Data messages of
  // this type needs a destination application port to designate what app will
  // handle it.
  MESSAGE_CLASS_FLASH_MESSAGE = 1;

  // CLASS 1
  // Mobile Equipment specific messages are handled by by an application on the
  // handset device itself, e.g. WAP push messages. Data messages of this type
  // needs a destination application port to designate what app will handle it.
  MESSAGE_CLASS_ME_SPECIFIC = 2;

  // CLASS 2
  // Handled by the sim card. SIM updates have special requirements tied to the
  // SIM card itself, and must be signed with a SIM specific private key only known
  // by the operator.
  MESSAGE_CLASS_SIM_SPECIFIC = 3;

  // CLASS 3
  // Terminal Equipment specific message are handled by the handset itself, or by
  // a SIM application, and may require an application port to designate who will
  // handle it.
  MESSAGE_CLASS_TE_SPECIFIC = 4;
}

// Application ports are used to send data SMS messages to specific applications
// on the handset. If a reply to the message is sent, it should use the same
// ports but swap originator and destination port numbers.
message ApplicationPort {
  // The originator application port.
  uint32 originator_port = 1;
  // The destination application port.
  uint32 destination_port = 2;
}

message SendMessageResponse {
  // An ID representing the message. For events etc related to the message, this ID
  // will be used in the event as identifier.
  string message_id = 1;

  enum SendStatus {
    SEND_STATUS_UNSPECIFIED = 0;
    // Sending the message is accepted. Note that the message is not delivered yet.
    SEND_STATUS_OK = 1;
    // Sending the message is rejected (not allowed). This may be because of
    // subscriber policy limitations, rights of the product or content of the
    // message. See description for details.
    SEND_STATUS_REJECT = 2;
    // Sending the message failed. This error should be treated as temporary, and
    // sending the message again may work.
    SEND_STATUS_ERROR = 3;
  }
  // The response status for attempting to send the message.
  SendStatus status = 2;

  // Human readable description for what failed or rejected the message.
  string description = 3;

  // Number of fragments sent. This is because of the underlying SMS protocols only
  // supports sending 140 bytes per message after encoding and packing. This is including
  // extra encoding info and correlation and part handling for multi-fragmented messages.
  uint32 num_fragments = 4;
}
