// Copyright 2020 Working Group Two AS
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.25.0-devel
// 	protoc        v3.13.0
// source: wgtwo/sms/v0/sms.proto

package v0

import (
	v0 "github.com/working-group-two/wgtwoapis/wgtwo/common/v0"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

//
// The class of the message. See https://en.wikipedia.org/wiki/Data_Coding_Scheme#Message_Classes
type SendBinaryToSubscriberRequest_MessageClass int32

const (
	SendBinaryToSubscriberRequest_MESSAGE_CLASS_NOT_SET SendBinaryToSubscriberRequest_MessageClass = 0
	SendBinaryToSubscriberRequest_CLASS0                SendBinaryToSubscriberRequest_MessageClass = 1
	SendBinaryToSubscriberRequest_CLASS1                SendBinaryToSubscriberRequest_MessageClass = 2
	SendBinaryToSubscriberRequest_CLASS2                SendBinaryToSubscriberRequest_MessageClass = 3
	SendBinaryToSubscriberRequest_CLASS3                SendBinaryToSubscriberRequest_MessageClass = 4
)

// Enum value maps for SendBinaryToSubscriberRequest_MessageClass.
var (
	SendBinaryToSubscriberRequest_MessageClass_name = map[int32]string{
		0: "MESSAGE_CLASS_NOT_SET",
		1: "CLASS0",
		2: "CLASS1",
		3: "CLASS2",
		4: "CLASS3",
	}
	SendBinaryToSubscriberRequest_MessageClass_value = map[string]int32{
		"MESSAGE_CLASS_NOT_SET": 0,
		"CLASS0":                1,
		"CLASS1":                2,
		"CLASS2":                3,
		"CLASS3":                4,
	}
)

func (x SendBinaryToSubscriberRequest_MessageClass) Enum() *SendBinaryToSubscriberRequest_MessageClass {
	p := new(SendBinaryToSubscriberRequest_MessageClass)
	*p = x
	return p
}

func (x SendBinaryToSubscriberRequest_MessageClass) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (SendBinaryToSubscriberRequest_MessageClass) Descriptor() protoreflect.EnumDescriptor {
	return file_wgtwo_sms_v0_sms_proto_enumTypes[0].Descriptor()
}

func (SendBinaryToSubscriberRequest_MessageClass) Type() protoreflect.EnumType {
	return &file_wgtwo_sms_v0_sms_proto_enumTypes[0]
}

func (x SendBinaryToSubscriberRequest_MessageClass) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use SendBinaryToSubscriberRequest_MessageClass.Descriptor instead.
func (SendBinaryToSubscriberRequest_MessageClass) EnumDescriptor() ([]byte, []int) {
	return file_wgtwo_sms_v0_sms_proto_rawDescGZIP(), []int{2, 0}
}

type SendResponse_SendStatus int32

const (
	SendResponse_UNKNOWN     SendResponse_SendStatus = 0
	SendResponse_SEND_OK     SendResponse_SendStatus = 1
	SendResponse_SEND_REJECT SendResponse_SendStatus = 2
	SendResponse_SEND_ERROR  SendResponse_SendStatus = 3
)

// Enum value maps for SendResponse_SendStatus.
var (
	SendResponse_SendStatus_name = map[int32]string{
		0: "UNKNOWN",
		1: "SEND_OK",
		2: "SEND_REJECT",
		3: "SEND_ERROR",
	}
	SendResponse_SendStatus_value = map[string]int32{
		"UNKNOWN":     0,
		"SEND_OK":     1,
		"SEND_REJECT": 2,
		"SEND_ERROR":  3,
	}
)

func (x SendResponse_SendStatus) Enum() *SendResponse_SendStatus {
	p := new(SendResponse_SendStatus)
	*p = x
	return p
}

func (x SendResponse_SendStatus) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (SendResponse_SendStatus) Descriptor() protoreflect.EnumDescriptor {
	return file_wgtwo_sms_v0_sms_proto_enumTypes[1].Descriptor()
}

func (SendResponse_SendStatus) Type() protoreflect.EnumType {
	return &file_wgtwo_sms_v0_sms_proto_enumTypes[1]
}

func (x SendResponse_SendStatus) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use SendResponse_SendStatus.Descriptor instead.
func (SendResponse_SendStatus) EnumDescriptor() ([]byte, []int) {
	return file_wgtwo_sms_v0_sms_proto_rawDescGZIP(), []int{3, 0}
}

type SendTextToSubscriberRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Content string `protobuf:"bytes,1,opt,name=content,proto3" json:"content,omitempty"`
	// Types that are assignable to FromAddress:
	//	*SendTextToSubscriberRequest_FromE164
	//	*SendTextToSubscriberRequest_FromTextAddress
	FromAddress  isSendTextToSubscriberRequest_FromAddress `protobuf_oneof:"from_address"`
	ToSubscriber *v0.PhoneNumber                           `protobuf:"bytes,4,opt,name=to_subscriber,json=toSubscriber,proto3" json:"to_subscriber,omitempty"`
}

func (x *SendTextToSubscriberRequest) Reset() {
	*x = SendTextToSubscriberRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_wgtwo_sms_v0_sms_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SendTextToSubscriberRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SendTextToSubscriberRequest) ProtoMessage() {}

func (x *SendTextToSubscriberRequest) ProtoReflect() protoreflect.Message {
	mi := &file_wgtwo_sms_v0_sms_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SendTextToSubscriberRequest.ProtoReflect.Descriptor instead.
func (*SendTextToSubscriberRequest) Descriptor() ([]byte, []int) {
	return file_wgtwo_sms_v0_sms_proto_rawDescGZIP(), []int{0}
}

func (x *SendTextToSubscriberRequest) GetContent() string {
	if x != nil {
		return x.Content
	}
	return ""
}

func (m *SendTextToSubscriberRequest) GetFromAddress() isSendTextToSubscriberRequest_FromAddress {
	if m != nil {
		return m.FromAddress
	}
	return nil
}

func (x *SendTextToSubscriberRequest) GetFromE164() *v0.PhoneNumber {
	if x, ok := x.GetFromAddress().(*SendTextToSubscriberRequest_FromE164); ok {
		return x.FromE164
	}
	return nil
}

func (x *SendTextToSubscriberRequest) GetFromTextAddress() *v0.TextAddress {
	if x, ok := x.GetFromAddress().(*SendTextToSubscriberRequest_FromTextAddress); ok {
		return x.FromTextAddress
	}
	return nil
}

func (x *SendTextToSubscriberRequest) GetToSubscriber() *v0.PhoneNumber {
	if x != nil {
		return x.ToSubscriber
	}
	return nil
}

type isSendTextToSubscriberRequest_FromAddress interface {
	isSendTextToSubscriberRequest_FromAddress()
}

type SendTextToSubscriberRequest_FromE164 struct {
	FromE164 *v0.PhoneNumber `protobuf:"bytes,2,opt,name=from_e164,json=fromE164,proto3,oneof"`
}

type SendTextToSubscriberRequest_FromTextAddress struct {
	FromTextAddress *v0.TextAddress `protobuf:"bytes,3,opt,name=from_text_address,json=fromTextAddress,proto3,oneof"`
}

func (*SendTextToSubscriberRequest_FromE164) isSendTextToSubscriberRequest_FromAddress() {}

func (*SendTextToSubscriberRequest_FromTextAddress) isSendTextToSubscriberRequest_FromAddress() {}

type SendTextFromSubscriberRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Content        string          `protobuf:"bytes,1,opt,name=content,proto3" json:"content,omitempty"`
	FromSubscriber *v0.PhoneNumber `protobuf:"bytes,2,opt,name=from_subscriber,json=fromSubscriber,proto3" json:"from_subscriber,omitempty"`
	ToE164         *v0.PhoneNumber `protobuf:"bytes,3,opt,name=to_e164,json=toE164,proto3" json:"to_e164,omitempty"`
}

func (x *SendTextFromSubscriberRequest) Reset() {
	*x = SendTextFromSubscriberRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_wgtwo_sms_v0_sms_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SendTextFromSubscriberRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SendTextFromSubscriberRequest) ProtoMessage() {}

func (x *SendTextFromSubscriberRequest) ProtoReflect() protoreflect.Message {
	mi := &file_wgtwo_sms_v0_sms_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SendTextFromSubscriberRequest.ProtoReflect.Descriptor instead.
func (*SendTextFromSubscriberRequest) Descriptor() ([]byte, []int) {
	return file_wgtwo_sms_v0_sms_proto_rawDescGZIP(), []int{1}
}

func (x *SendTextFromSubscriberRequest) GetContent() string {
	if x != nil {
		return x.Content
	}
	return ""
}

func (x *SendTextFromSubscriberRequest) GetFromSubscriber() *v0.PhoneNumber {
	if x != nil {
		return x.FromSubscriber
	}
	return nil
}

func (x *SendTextFromSubscriberRequest) GetToE164() *v0.PhoneNumber {
	if x != nil {
		return x.ToE164
	}
	return nil
}

type SendBinaryToSubscriberRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Content []byte `protobuf:"bytes,1,opt,name=content,proto3" json:"content,omitempty"`
	// Types that are assignable to FromAddress:
	//	*SendBinaryToSubscriberRequest_FromE164
	//	*SendBinaryToSubscriberRequest_FromTextAddress
	FromAddress  isSendBinaryToSubscriberRequest_FromAddress `protobuf_oneof:"from_address"`
	ToSubscriber *v0.PhoneNumber                             `protobuf:"bytes,4,opt,name=to_subscriber,json=toSubscriber,proto3" json:"to_subscriber,omitempty"`
	MessageClass SendBinaryToSubscriberRequest_MessageClass  `protobuf:"varint,5,opt,name=message_class,json=messageClass,proto3,enum=wgtwo.sms.v0.SendBinaryToSubscriberRequest_MessageClass" json:"message_class,omitempty"`
}

func (x *SendBinaryToSubscriberRequest) Reset() {
	*x = SendBinaryToSubscriberRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_wgtwo_sms_v0_sms_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SendBinaryToSubscriberRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SendBinaryToSubscriberRequest) ProtoMessage() {}

func (x *SendBinaryToSubscriberRequest) ProtoReflect() protoreflect.Message {
	mi := &file_wgtwo_sms_v0_sms_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SendBinaryToSubscriberRequest.ProtoReflect.Descriptor instead.
func (*SendBinaryToSubscriberRequest) Descriptor() ([]byte, []int) {
	return file_wgtwo_sms_v0_sms_proto_rawDescGZIP(), []int{2}
}

func (x *SendBinaryToSubscriberRequest) GetContent() []byte {
	if x != nil {
		return x.Content
	}
	return nil
}

func (m *SendBinaryToSubscriberRequest) GetFromAddress() isSendBinaryToSubscriberRequest_FromAddress {
	if m != nil {
		return m.FromAddress
	}
	return nil
}

func (x *SendBinaryToSubscriberRequest) GetFromE164() *v0.PhoneNumber {
	if x, ok := x.GetFromAddress().(*SendBinaryToSubscriberRequest_FromE164); ok {
		return x.FromE164
	}
	return nil
}

func (x *SendBinaryToSubscriberRequest) GetFromTextAddress() *v0.TextAddress {
	if x, ok := x.GetFromAddress().(*SendBinaryToSubscriberRequest_FromTextAddress); ok {
		return x.FromTextAddress
	}
	return nil
}

func (x *SendBinaryToSubscriberRequest) GetToSubscriber() *v0.PhoneNumber {
	if x != nil {
		return x.ToSubscriber
	}
	return nil
}

func (x *SendBinaryToSubscriberRequest) GetMessageClass() SendBinaryToSubscriberRequest_MessageClass {
	if x != nil {
		return x.MessageClass
	}
	return SendBinaryToSubscriberRequest_MESSAGE_CLASS_NOT_SET
}

type isSendBinaryToSubscriberRequest_FromAddress interface {
	isSendBinaryToSubscriberRequest_FromAddress()
}

type SendBinaryToSubscriberRequest_FromE164 struct {
	FromE164 *v0.PhoneNumber `protobuf:"bytes,2,opt,name=from_e164,json=fromE164,proto3,oneof"`
}

type SendBinaryToSubscriberRequest_FromTextAddress struct {
	FromTextAddress *v0.TextAddress `protobuf:"bytes,3,opt,name=from_text_address,json=fromTextAddress,proto3,oneof"`
}

func (*SendBinaryToSubscriberRequest_FromE164) isSendBinaryToSubscriberRequest_FromAddress() {}

func (*SendBinaryToSubscriberRequest_FromTextAddress) isSendBinaryToSubscriberRequest_FromAddress() {}

type SendResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RequestId   string                  `protobuf:"bytes,1,opt,name=request_id,json=requestId,proto3" json:"request_id,omitempty"`
	Status      SendResponse_SendStatus `protobuf:"varint,2,opt,name=status,proto3,enum=wgtwo.sms.v0.SendResponse_SendStatus" json:"status,omitempty"`
	Description string                  `protobuf:"bytes,3,opt,name=description,proto3" json:"description,omitempty"`
}

func (x *SendResponse) Reset() {
	*x = SendResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_wgtwo_sms_v0_sms_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SendResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SendResponse) ProtoMessage() {}

func (x *SendResponse) ProtoReflect() protoreflect.Message {
	mi := &file_wgtwo_sms_v0_sms_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SendResponse.ProtoReflect.Descriptor instead.
func (*SendResponse) Descriptor() ([]byte, []int) {
	return file_wgtwo_sms_v0_sms_proto_rawDescGZIP(), []int{3}
}

func (x *SendResponse) GetRequestId() string {
	if x != nil {
		return x.RequestId
	}
	return ""
}

func (x *SendResponse) GetStatus() SendResponse_SendStatus {
	if x != nil {
		return x.Status
	}
	return SendResponse_UNKNOWN
}

func (x *SendResponse) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

var File_wgtwo_sms_v0_sms_proto protoreflect.FileDescriptor

var file_wgtwo_sms_v0_sms_proto_rawDesc = []byte{
	0x0a, 0x16, 0x77, 0x67, 0x74, 0x77, 0x6f, 0x2f, 0x73, 0x6d, 0x73, 0x2f, 0x76, 0x30, 0x2f, 0x73,
	0x6d, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x0c, 0x77, 0x67, 0x74, 0x77, 0x6f, 0x2e,
	0x73, 0x6d, 0x73, 0x2e, 0x76, 0x30, 0x1a, 0x21, 0x77, 0x67, 0x74, 0x77, 0x6f, 0x2f, 0x63, 0x6f,
	0x6d, 0x6d, 0x6f, 0x6e, 0x2f, 0x76, 0x30, 0x2f, 0x70, 0x68, 0x6f, 0x6e, 0x65, 0x6e, 0x75, 0x6d,
	0x62, 0x65, 0x72, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x93, 0x02, 0x0a, 0x1b, 0x53, 0x65,
	0x6e, 0x64, 0x54, 0x65, 0x78, 0x74, 0x54, 0x6f, 0x53, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x62,
	0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x63, 0x6f, 0x6e,
	0x74, 0x65, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x63, 0x6f, 0x6e, 0x74,
	0x65, 0x6e, 0x74, 0x12, 0x3b, 0x0a, 0x09, 0x66, 0x72, 0x6f, 0x6d, 0x5f, 0x65, 0x31, 0x36, 0x34,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x77, 0x67, 0x74, 0x77, 0x6f, 0x2e, 0x63,
	0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x76, 0x30, 0x2e, 0x50, 0x68, 0x6f, 0x6e, 0x65, 0x4e, 0x75,
	0x6d, 0x62, 0x65, 0x72, 0x48, 0x00, 0x52, 0x08, 0x66, 0x72, 0x6f, 0x6d, 0x45, 0x31, 0x36, 0x34,
	0x12, 0x4a, 0x0a, 0x11, 0x66, 0x72, 0x6f, 0x6d, 0x5f, 0x74, 0x65, 0x78, 0x74, 0x5f, 0x61, 0x64,
	0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x77, 0x67,
	0x74, 0x77, 0x6f, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x76, 0x30, 0x2e, 0x54, 0x65,
	0x78, 0x74, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x48, 0x00, 0x52, 0x0f, 0x66, 0x72, 0x6f,
	0x6d, 0x54, 0x65, 0x78, 0x74, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x41, 0x0a, 0x0d,
	0x74, 0x6f, 0x5f, 0x73, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x72, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x77, 0x67, 0x74, 0x77, 0x6f, 0x2e, 0x63, 0x6f, 0x6d, 0x6d,
	0x6f, 0x6e, 0x2e, 0x76, 0x30, 0x2e, 0x50, 0x68, 0x6f, 0x6e, 0x65, 0x4e, 0x75, 0x6d, 0x62, 0x65,
	0x72, 0x52, 0x0c, 0x74, 0x6f, 0x53, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x72, 0x42,
	0x0e, 0x0a, 0x0c, 0x66, 0x72, 0x6f, 0x6d, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x22,
	0xb7, 0x01, 0x0a, 0x1d, 0x53, 0x65, 0x6e, 0x64, 0x54, 0x65, 0x78, 0x74, 0x46, 0x72, 0x6f, 0x6d,
	0x53, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x18, 0x0a, 0x07, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x07, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x12, 0x45, 0x0a, 0x0f, 0x66,
	0x72, 0x6f, 0x6d, 0x5f, 0x73, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x72, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x77, 0x67, 0x74, 0x77, 0x6f, 0x2e, 0x63, 0x6f, 0x6d,
	0x6d, 0x6f, 0x6e, 0x2e, 0x76, 0x30, 0x2e, 0x50, 0x68, 0x6f, 0x6e, 0x65, 0x4e, 0x75, 0x6d, 0x62,
	0x65, 0x72, 0x52, 0x0e, 0x66, 0x72, 0x6f, 0x6d, 0x53, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x62,
	0x65, 0x72, 0x12, 0x35, 0x0a, 0x07, 0x74, 0x6f, 0x5f, 0x65, 0x31, 0x36, 0x34, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x77, 0x67, 0x74, 0x77, 0x6f, 0x2e, 0x63, 0x6f, 0x6d, 0x6d,
	0x6f, 0x6e, 0x2e, 0x76, 0x30, 0x2e, 0x50, 0x68, 0x6f, 0x6e, 0x65, 0x4e, 0x75, 0x6d, 0x62, 0x65,
	0x72, 0x52, 0x06, 0x74, 0x6f, 0x45, 0x31, 0x36, 0x34, 0x22, 0xcf, 0x03, 0x0a, 0x1d, 0x53, 0x65,
	0x6e, 0x64, 0x42, 0x69, 0x6e, 0x61, 0x72, 0x79, 0x54, 0x6f, 0x53, 0x75, 0x62, 0x73, 0x63, 0x72,
	0x69, 0x62, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x63,
	0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x07, 0x63, 0x6f,
	0x6e, 0x74, 0x65, 0x6e, 0x74, 0x12, 0x3b, 0x0a, 0x09, 0x66, 0x72, 0x6f, 0x6d, 0x5f, 0x65, 0x31,
	0x36, 0x34, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x77, 0x67, 0x74, 0x77, 0x6f,
	0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x76, 0x30, 0x2e, 0x50, 0x68, 0x6f, 0x6e, 0x65,
	0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x48, 0x00, 0x52, 0x08, 0x66, 0x72, 0x6f, 0x6d, 0x45, 0x31,
	0x36, 0x34, 0x12, 0x4a, 0x0a, 0x11, 0x66, 0x72, 0x6f, 0x6d, 0x5f, 0x74, 0x65, 0x78, 0x74, 0x5f,
	0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e,
	0x77, 0x67, 0x74, 0x77, 0x6f, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x76, 0x30, 0x2e,
	0x54, 0x65, 0x78, 0x74, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x48, 0x00, 0x52, 0x0f, 0x66,
	0x72, 0x6f, 0x6d, 0x54, 0x65, 0x78, 0x74, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x41,
	0x0a, 0x0d, 0x74, 0x6f, 0x5f, 0x73, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x72, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x77, 0x67, 0x74, 0x77, 0x6f, 0x2e, 0x63, 0x6f,
	0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x76, 0x30, 0x2e, 0x50, 0x68, 0x6f, 0x6e, 0x65, 0x4e, 0x75, 0x6d,
	0x62, 0x65, 0x72, 0x52, 0x0c, 0x74, 0x6f, 0x53, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65,
	0x72, 0x12, 0x5d, 0x0a, 0x0d, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x5f, 0x63, 0x6c, 0x61,
	0x73, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x38, 0x2e, 0x77, 0x67, 0x74, 0x77, 0x6f,
	0x2e, 0x73, 0x6d, 0x73, 0x2e, 0x76, 0x30, 0x2e, 0x53, 0x65, 0x6e, 0x64, 0x42, 0x69, 0x6e, 0x61,
	0x72, 0x79, 0x54, 0x6f, 0x53, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x72, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x43, 0x6c, 0x61,
	0x73, 0x73, 0x52, 0x0c, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x43, 0x6c, 0x61, 0x73, 0x73,
	0x22, 0x59, 0x0a, 0x0c, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x43, 0x6c, 0x61, 0x73, 0x73,
	0x12, 0x19, 0x0a, 0x15, 0x4d, 0x45, 0x53, 0x53, 0x41, 0x47, 0x45, 0x5f, 0x43, 0x4c, 0x41, 0x53,
	0x53, 0x5f, 0x4e, 0x4f, 0x54, 0x5f, 0x53, 0x45, 0x54, 0x10, 0x00, 0x12, 0x0a, 0x0a, 0x06, 0x43,
	0x4c, 0x41, 0x53, 0x53, 0x30, 0x10, 0x01, 0x12, 0x0a, 0x0a, 0x06, 0x43, 0x4c, 0x41, 0x53, 0x53,
	0x31, 0x10, 0x02, 0x12, 0x0a, 0x0a, 0x06, 0x43, 0x4c, 0x41, 0x53, 0x53, 0x32, 0x10, 0x03, 0x12,
	0x0a, 0x0a, 0x06, 0x43, 0x4c, 0x41, 0x53, 0x53, 0x33, 0x10, 0x04, 0x42, 0x0e, 0x0a, 0x0c, 0x66,
	0x72, 0x6f, 0x6d, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x22, 0xd7, 0x01, 0x0a, 0x0c,
	0x53, 0x65, 0x6e, 0x64, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x1d, 0x0a, 0x0a,
	0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x09, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x49, 0x64, 0x12, 0x3d, 0x0a, 0x06, 0x73,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x25, 0x2e, 0x77, 0x67,
	0x74, 0x77, 0x6f, 0x2e, 0x73, 0x6d, 0x73, 0x2e, 0x76, 0x30, 0x2e, 0x53, 0x65, 0x6e, 0x64, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x53, 0x65, 0x6e, 0x64, 0x53, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x20, 0x0a, 0x0b, 0x64, 0x65,
	0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x47, 0x0a, 0x0a,
	0x53, 0x65, 0x6e, 0x64, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x0b, 0x0a, 0x07, 0x55, 0x4e,
	0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x10, 0x00, 0x12, 0x0b, 0x0a, 0x07, 0x53, 0x45, 0x4e, 0x44, 0x5f,
	0x4f, 0x4b, 0x10, 0x01, 0x12, 0x0f, 0x0a, 0x0b, 0x53, 0x45, 0x4e, 0x44, 0x5f, 0x52, 0x45, 0x4a,
	0x45, 0x43, 0x54, 0x10, 0x02, 0x12, 0x0e, 0x0a, 0x0a, 0x53, 0x45, 0x4e, 0x44, 0x5f, 0x45, 0x52,
	0x52, 0x4f, 0x52, 0x10, 0x03, 0x32, 0xb7, 0x02, 0x0a, 0x0a, 0x53, 0x6d, 0x73, 0x53, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x12, 0x5f, 0x0a, 0x14, 0x53, 0x65, 0x6e, 0x64, 0x54, 0x65, 0x78, 0x74,
	0x54, 0x6f, 0x53, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x72, 0x12, 0x29, 0x2e, 0x77,
	0x67, 0x74, 0x77, 0x6f, 0x2e, 0x73, 0x6d, 0x73, 0x2e, 0x76, 0x30, 0x2e, 0x53, 0x65, 0x6e, 0x64,
	0x54, 0x65, 0x78, 0x74, 0x54, 0x6f, 0x53, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x72,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1a, 0x2e, 0x77, 0x67, 0x74, 0x77, 0x6f, 0x2e,
	0x73, 0x6d, 0x73, 0x2e, 0x76, 0x30, 0x2e, 0x53, 0x65, 0x6e, 0x64, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x63, 0x0a, 0x16, 0x53, 0x65, 0x6e, 0x64, 0x54, 0x65, 0x78,
	0x74, 0x46, 0x72, 0x6f, 0x6d, 0x53, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x72, 0x12,
	0x2b, 0x2e, 0x77, 0x67, 0x74, 0x77, 0x6f, 0x2e, 0x73, 0x6d, 0x73, 0x2e, 0x76, 0x30, 0x2e, 0x53,
	0x65, 0x6e, 0x64, 0x54, 0x65, 0x78, 0x74, 0x46, 0x72, 0x6f, 0x6d, 0x53, 0x75, 0x62, 0x73, 0x63,
	0x72, 0x69, 0x62, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1a, 0x2e, 0x77,
	0x67, 0x74, 0x77, 0x6f, 0x2e, 0x73, 0x6d, 0x73, 0x2e, 0x76, 0x30, 0x2e, 0x53, 0x65, 0x6e, 0x64,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x63, 0x0a, 0x16, 0x53, 0x65,
	0x6e, 0x64, 0x42, 0x69, 0x6e, 0x61, 0x72, 0x79, 0x54, 0x6f, 0x53, 0x75, 0x62, 0x73, 0x63, 0x72,
	0x69, 0x62, 0x65, 0x72, 0x12, 0x2b, 0x2e, 0x77, 0x67, 0x74, 0x77, 0x6f, 0x2e, 0x73, 0x6d, 0x73,
	0x2e, 0x76, 0x30, 0x2e, 0x53, 0x65, 0x6e, 0x64, 0x42, 0x69, 0x6e, 0x61, 0x72, 0x79, 0x54, 0x6f,
	0x53, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x1a, 0x2e, 0x77, 0x67, 0x74, 0x77, 0x6f, 0x2e, 0x73, 0x6d, 0x73, 0x2e, 0x76, 0x30,
	0x2e, 0x53, 0x65, 0x6e, 0x64, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x42,
	0x55, 0x0a, 0x14, 0x63, 0x6f, 0x6d, 0x2e, 0x77, 0x67, 0x74, 0x77, 0x6f, 0x2e, 0x61, 0x70, 0x69,
	0x2e, 0x73, 0x6d, 0x73, 0x2e, 0x76, 0x30, 0x42, 0x08, 0x53, 0x6d, 0x73, 0x50, 0x72, 0x6f, 0x74,
	0x6f, 0x5a, 0x33, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x77, 0x6f,
	0x72, 0x6b, 0x69, 0x6e, 0x67, 0x2d, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x2d, 0x74, 0x77, 0x6f, 0x2f,
	0x77, 0x67, 0x74, 0x77, 0x6f, 0x61, 0x70, 0x69, 0x73, 0x2f, 0x77, 0x67, 0x74, 0x77, 0x6f, 0x2f,
	0x73, 0x6d, 0x73, 0x2f, 0x76, 0x30, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_wgtwo_sms_v0_sms_proto_rawDescOnce sync.Once
	file_wgtwo_sms_v0_sms_proto_rawDescData = file_wgtwo_sms_v0_sms_proto_rawDesc
)

func file_wgtwo_sms_v0_sms_proto_rawDescGZIP() []byte {
	file_wgtwo_sms_v0_sms_proto_rawDescOnce.Do(func() {
		file_wgtwo_sms_v0_sms_proto_rawDescData = protoimpl.X.CompressGZIP(file_wgtwo_sms_v0_sms_proto_rawDescData)
	})
	return file_wgtwo_sms_v0_sms_proto_rawDescData
}

var file_wgtwo_sms_v0_sms_proto_enumTypes = make([]protoimpl.EnumInfo, 2)
var file_wgtwo_sms_v0_sms_proto_msgTypes = make([]protoimpl.MessageInfo, 4)
var file_wgtwo_sms_v0_sms_proto_goTypes = []interface{}{
	(SendBinaryToSubscriberRequest_MessageClass)(0), // 0: wgtwo.sms.v0.SendBinaryToSubscriberRequest.MessageClass
	(SendResponse_SendStatus)(0),                    // 1: wgtwo.sms.v0.SendResponse.SendStatus
	(*SendTextToSubscriberRequest)(nil),             // 2: wgtwo.sms.v0.SendTextToSubscriberRequest
	(*SendTextFromSubscriberRequest)(nil),           // 3: wgtwo.sms.v0.SendTextFromSubscriberRequest
	(*SendBinaryToSubscriberRequest)(nil),           // 4: wgtwo.sms.v0.SendBinaryToSubscriberRequest
	(*SendResponse)(nil),                            // 5: wgtwo.sms.v0.SendResponse
	(*v0.PhoneNumber)(nil),                          // 6: wgtwo.common.v0.PhoneNumber
	(*v0.TextAddress)(nil),                          // 7: wgtwo.common.v0.TextAddress
}
var file_wgtwo_sms_v0_sms_proto_depIdxs = []int32{
	6,  // 0: wgtwo.sms.v0.SendTextToSubscriberRequest.from_e164:type_name -> wgtwo.common.v0.PhoneNumber
	7,  // 1: wgtwo.sms.v0.SendTextToSubscriberRequest.from_text_address:type_name -> wgtwo.common.v0.TextAddress
	6,  // 2: wgtwo.sms.v0.SendTextToSubscriberRequest.to_subscriber:type_name -> wgtwo.common.v0.PhoneNumber
	6,  // 3: wgtwo.sms.v0.SendTextFromSubscriberRequest.from_subscriber:type_name -> wgtwo.common.v0.PhoneNumber
	6,  // 4: wgtwo.sms.v0.SendTextFromSubscriberRequest.to_e164:type_name -> wgtwo.common.v0.PhoneNumber
	6,  // 5: wgtwo.sms.v0.SendBinaryToSubscriberRequest.from_e164:type_name -> wgtwo.common.v0.PhoneNumber
	7,  // 6: wgtwo.sms.v0.SendBinaryToSubscriberRequest.from_text_address:type_name -> wgtwo.common.v0.TextAddress
	6,  // 7: wgtwo.sms.v0.SendBinaryToSubscriberRequest.to_subscriber:type_name -> wgtwo.common.v0.PhoneNumber
	0,  // 8: wgtwo.sms.v0.SendBinaryToSubscriberRequest.message_class:type_name -> wgtwo.sms.v0.SendBinaryToSubscriberRequest.MessageClass
	1,  // 9: wgtwo.sms.v0.SendResponse.status:type_name -> wgtwo.sms.v0.SendResponse.SendStatus
	2,  // 10: wgtwo.sms.v0.SmsService.SendTextToSubscriber:input_type -> wgtwo.sms.v0.SendTextToSubscriberRequest
	3,  // 11: wgtwo.sms.v0.SmsService.SendTextFromSubscriber:input_type -> wgtwo.sms.v0.SendTextFromSubscriberRequest
	4,  // 12: wgtwo.sms.v0.SmsService.SendBinaryToSubscriber:input_type -> wgtwo.sms.v0.SendBinaryToSubscriberRequest
	5,  // 13: wgtwo.sms.v0.SmsService.SendTextToSubscriber:output_type -> wgtwo.sms.v0.SendResponse
	5,  // 14: wgtwo.sms.v0.SmsService.SendTextFromSubscriber:output_type -> wgtwo.sms.v0.SendResponse
	5,  // 15: wgtwo.sms.v0.SmsService.SendBinaryToSubscriber:output_type -> wgtwo.sms.v0.SendResponse
	13, // [13:16] is the sub-list for method output_type
	10, // [10:13] is the sub-list for method input_type
	10, // [10:10] is the sub-list for extension type_name
	10, // [10:10] is the sub-list for extension extendee
	0,  // [0:10] is the sub-list for field type_name
}

func init() { file_wgtwo_sms_v0_sms_proto_init() }
func file_wgtwo_sms_v0_sms_proto_init() {
	if File_wgtwo_sms_v0_sms_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_wgtwo_sms_v0_sms_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SendTextToSubscriberRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_wgtwo_sms_v0_sms_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SendTextFromSubscriberRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_wgtwo_sms_v0_sms_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SendBinaryToSubscriberRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_wgtwo_sms_v0_sms_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SendResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_wgtwo_sms_v0_sms_proto_msgTypes[0].OneofWrappers = []interface{}{
		(*SendTextToSubscriberRequest_FromE164)(nil),
		(*SendTextToSubscriberRequest_FromTextAddress)(nil),
	}
	file_wgtwo_sms_v0_sms_proto_msgTypes[2].OneofWrappers = []interface{}{
		(*SendBinaryToSubscriberRequest_FromE164)(nil),
		(*SendBinaryToSubscriberRequest_FromTextAddress)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_wgtwo_sms_v0_sms_proto_rawDesc,
			NumEnums:      2,
			NumMessages:   4,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_wgtwo_sms_v0_sms_proto_goTypes,
		DependencyIndexes: file_wgtwo_sms_v0_sms_proto_depIdxs,
		EnumInfos:         file_wgtwo_sms_v0_sms_proto_enumTypes,
		MessageInfos:      file_wgtwo_sms_v0_sms_proto_msgTypes,
	}.Build()
	File_wgtwo_sms_v0_sms_proto = out.File
	file_wgtwo_sms_v0_sms_proto_rawDesc = nil
	file_wgtwo_sms_v0_sms_proto_goTypes = nil
	file_wgtwo_sms_v0_sms_proto_depIdxs = nil
}
