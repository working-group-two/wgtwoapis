// Copyright 2021 [Working Group Two]/[Cisco Systems]
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.8
// 	protoc        (unknown)
// source: wgtwo/consents/v0/consents.proto

package v0

import (
	_ "github.com/working-group-two/wgtwoapis/wgtwo/annotations"
	v0 "github.com/working-group-two/wgtwoapis/wgtwo/common/v0"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type ListConsentsForProductRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Pagination    *v0.PaginationRequest  `protobuf:"bytes,1,opt,name=pagination,proto3" json:"pagination,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ListConsentsForProductRequest) Reset() {
	*x = ListConsentsForProductRequest{}
	mi := &file_wgtwo_consents_v0_consents_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ListConsentsForProductRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListConsentsForProductRequest) ProtoMessage() {}

func (x *ListConsentsForProductRequest) ProtoReflect() protoreflect.Message {
	mi := &file_wgtwo_consents_v0_consents_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListConsentsForProductRequest.ProtoReflect.Descriptor instead.
func (*ListConsentsForProductRequest) Descriptor() ([]byte, []int) {
	return file_wgtwo_consents_v0_consents_proto_rawDescGZIP(), []int{0}
}

func (x *ListConsentsForProductRequest) GetPagination() *v0.PaginationRequest {
	if x != nil {
		return x.Pagination
	}
	return nil
}

type ListConsentsForProductResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Consents      []*Consent             `protobuf:"bytes,1,rep,name=consents,proto3" json:"consents,omitempty"`
	Pagination    *v0.PaginationResponse `protobuf:"bytes,2,opt,name=pagination,proto3" json:"pagination,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ListConsentsForProductResponse) Reset() {
	*x = ListConsentsForProductResponse{}
	mi := &file_wgtwo_consents_v0_consents_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ListConsentsForProductResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListConsentsForProductResponse) ProtoMessage() {}

func (x *ListConsentsForProductResponse) ProtoReflect() protoreflect.Message {
	mi := &file_wgtwo_consents_v0_consents_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListConsentsForProductResponse.ProtoReflect.Descriptor instead.
func (*ListConsentsForProductResponse) Descriptor() ([]byte, []int) {
	return file_wgtwo_consents_v0_consents_proto_rawDescGZIP(), []int{1}
}

func (x *ListConsentsForProductResponse) GetConsents() []*Consent {
	if x != nil {
		return x.Consents
	}
	return nil
}

func (x *ListConsentsForProductResponse) GetPagination() *v0.PaginationResponse {
	if x != nil {
		return x.Pagination
	}
	return nil
}

// Request to get consents for a subscription.
type GetConsentsForSubscriptionRequest struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// The subscription identifier.
	Id *v0.SubscriptionIdentifier `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// The phone number of the subscriber.
	// Planned for removal. Please use `id` above.
	PhoneNumber   *v0.PhoneNumber `protobuf:"bytes,2,opt,name=phone_number,json=phoneNumber,proto3" json:"phone_number,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetConsentsForSubscriptionRequest) Reset() {
	*x = GetConsentsForSubscriptionRequest{}
	mi := &file_wgtwo_consents_v0_consents_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetConsentsForSubscriptionRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetConsentsForSubscriptionRequest) ProtoMessage() {}

func (x *GetConsentsForSubscriptionRequest) ProtoReflect() protoreflect.Message {
	mi := &file_wgtwo_consents_v0_consents_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetConsentsForSubscriptionRequest.ProtoReflect.Descriptor instead.
func (*GetConsentsForSubscriptionRequest) Descriptor() ([]byte, []int) {
	return file_wgtwo_consents_v0_consents_proto_rawDescGZIP(), []int{2}
}

func (x *GetConsentsForSubscriptionRequest) GetId() *v0.SubscriptionIdentifier {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *GetConsentsForSubscriptionRequest) GetPhoneNumber() *v0.PhoneNumber {
	if x != nil {
		return x.PhoneNumber
	}
	return nil
}

// Response to get consents for a subscription.
type GetConsentsForSubscriptionResponse struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// The consents for the subscription.
	Consents []*Consent `protobuf:"bytes,1,rep,name=consents,proto3" json:"consents,omitempty"`
	// The status code of the response.
	StatusCode v0.StatusCode `protobuf:"varint,2,opt,name=status_code,json=statusCode,proto3,enum=wgtwo.common.v0.StatusCode" json:"status_code,omitempty"`
	// The error message of the response. Empty for successes.
	ErrorMessage  string `protobuf:"bytes,3,opt,name=error_message,json=errorMessage,proto3" json:"error_message,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetConsentsForSubscriptionResponse) Reset() {
	*x = GetConsentsForSubscriptionResponse{}
	mi := &file_wgtwo_consents_v0_consents_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetConsentsForSubscriptionResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetConsentsForSubscriptionResponse) ProtoMessage() {}

func (x *GetConsentsForSubscriptionResponse) ProtoReflect() protoreflect.Message {
	mi := &file_wgtwo_consents_v0_consents_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetConsentsForSubscriptionResponse.ProtoReflect.Descriptor instead.
func (*GetConsentsForSubscriptionResponse) Descriptor() ([]byte, []int) {
	return file_wgtwo_consents_v0_consents_proto_rawDescGZIP(), []int{3}
}

func (x *GetConsentsForSubscriptionResponse) GetConsents() []*Consent {
	if x != nil {
		return x.Consents
	}
	return nil
}

func (x *GetConsentsForSubscriptionResponse) GetStatusCode() v0.StatusCode {
	if x != nil {
		return x.StatusCode
	}
	return v0.StatusCode(0)
}

func (x *GetConsentsForSubscriptionResponse) GetErrorMessage() string {
	if x != nil {
		return x.ErrorMessage
	}
	return ""
}

// Request to create a consent for a subscription.
type CreateConsentForSubscriptionRequest struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// The subscription identifier.
	Id *v0.SubscriptionIdentifier `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// The phone number of the subscriber.
	// Planned for removal. Please use `id` above.
	PhoneNumber *v0.PhoneNumber `protobuf:"bytes,4,opt,name=phone_number,json=phoneNumber,proto3" json:"phone_number,omitempty"`
	// The product identifier.
	ProductId     string            `protobuf:"bytes,2,opt,name=product_id,json=productId,proto3" json:"product_id,omitempty"`
	Metadata      map[string]string `protobuf:"bytes,3,rep,name=metadata,proto3" json:"metadata,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CreateConsentForSubscriptionRequest) Reset() {
	*x = CreateConsentForSubscriptionRequest{}
	mi := &file_wgtwo_consents_v0_consents_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CreateConsentForSubscriptionRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateConsentForSubscriptionRequest) ProtoMessage() {}

func (x *CreateConsentForSubscriptionRequest) ProtoReflect() protoreflect.Message {
	mi := &file_wgtwo_consents_v0_consents_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateConsentForSubscriptionRequest.ProtoReflect.Descriptor instead.
func (*CreateConsentForSubscriptionRequest) Descriptor() ([]byte, []int) {
	return file_wgtwo_consents_v0_consents_proto_rawDescGZIP(), []int{4}
}

func (x *CreateConsentForSubscriptionRequest) GetId() *v0.SubscriptionIdentifier {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *CreateConsentForSubscriptionRequest) GetPhoneNumber() *v0.PhoneNumber {
	if x != nil {
		return x.PhoneNumber
	}
	return nil
}

func (x *CreateConsentForSubscriptionRequest) GetProductId() string {
	if x != nil {
		return x.ProductId
	}
	return ""
}

func (x *CreateConsentForSubscriptionRequest) GetMetadata() map[string]string {
	if x != nil {
		return x.Metadata
	}
	return nil
}

// Create a consent for a subscription response.
type CreateConsentForSubscriptionResponse struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// The status code of the response.
	StatusCode v0.StatusCode `protobuf:"varint,1,opt,name=status_code,json=statusCode,proto3,enum=wgtwo.common.v0.StatusCode" json:"status_code,omitempty"`
	// The error message of the response. Empty for successes.
	ErrorMessage  string `protobuf:"bytes,2,opt,name=error_message,json=errorMessage,proto3" json:"error_message,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CreateConsentForSubscriptionResponse) Reset() {
	*x = CreateConsentForSubscriptionResponse{}
	mi := &file_wgtwo_consents_v0_consents_proto_msgTypes[5]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CreateConsentForSubscriptionResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateConsentForSubscriptionResponse) ProtoMessage() {}

func (x *CreateConsentForSubscriptionResponse) ProtoReflect() protoreflect.Message {
	mi := &file_wgtwo_consents_v0_consents_proto_msgTypes[5]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateConsentForSubscriptionResponse.ProtoReflect.Descriptor instead.
func (*CreateConsentForSubscriptionResponse) Descriptor() ([]byte, []int) {
	return file_wgtwo_consents_v0_consents_proto_rawDescGZIP(), []int{5}
}

func (x *CreateConsentForSubscriptionResponse) GetStatusCode() v0.StatusCode {
	if x != nil {
		return x.StatusCode
	}
	return v0.StatusCode(0)
}

func (x *CreateConsentForSubscriptionResponse) GetErrorMessage() string {
	if x != nil {
		return x.ErrorMessage
	}
	return ""
}

// Request to revoke a consent for a subscription.
type RevokeConsentForSubscriptionRequest struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// The subscription identifier.
	Id *v0.SubscriptionIdentifier `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// The phone number of the subscriber.
	// Planned for removal. Please use `id` above.
	PhoneNumber *v0.PhoneNumber `protobuf:"bytes,3,opt,name=phone_number,json=phoneNumber,proto3" json:"phone_number,omitempty"`
	// The product identifier.
	ProductId     string `protobuf:"bytes,2,opt,name=product_id,json=productId,proto3" json:"product_id,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *RevokeConsentForSubscriptionRequest) Reset() {
	*x = RevokeConsentForSubscriptionRequest{}
	mi := &file_wgtwo_consents_v0_consents_proto_msgTypes[6]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *RevokeConsentForSubscriptionRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RevokeConsentForSubscriptionRequest) ProtoMessage() {}

func (x *RevokeConsentForSubscriptionRequest) ProtoReflect() protoreflect.Message {
	mi := &file_wgtwo_consents_v0_consents_proto_msgTypes[6]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RevokeConsentForSubscriptionRequest.ProtoReflect.Descriptor instead.
func (*RevokeConsentForSubscriptionRequest) Descriptor() ([]byte, []int) {
	return file_wgtwo_consents_v0_consents_proto_rawDescGZIP(), []int{6}
}

func (x *RevokeConsentForSubscriptionRequest) GetId() *v0.SubscriptionIdentifier {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *RevokeConsentForSubscriptionRequest) GetPhoneNumber() *v0.PhoneNumber {
	if x != nil {
		return x.PhoneNumber
	}
	return nil
}

func (x *RevokeConsentForSubscriptionRequest) GetProductId() string {
	if x != nil {
		return x.ProductId
	}
	return ""
}

// Revoke a consent for a subscription response.
type RevokeConsentForSubscriptionResponse struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// The status code of the response.
	StatusCode v0.StatusCode `protobuf:"varint,1,opt,name=status_code,json=statusCode,proto3,enum=wgtwo.common.v0.StatusCode" json:"status_code,omitempty"`
	// The error message of the response. Empty for successes.
	ErrorMessage  string `protobuf:"bytes,2,opt,name=error_message,json=errorMessage,proto3" json:"error_message,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *RevokeConsentForSubscriptionResponse) Reset() {
	*x = RevokeConsentForSubscriptionResponse{}
	mi := &file_wgtwo_consents_v0_consents_proto_msgTypes[7]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *RevokeConsentForSubscriptionResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RevokeConsentForSubscriptionResponse) ProtoMessage() {}

func (x *RevokeConsentForSubscriptionResponse) ProtoReflect() protoreflect.Message {
	mi := &file_wgtwo_consents_v0_consents_proto_msgTypes[7]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RevokeConsentForSubscriptionResponse.ProtoReflect.Descriptor instead.
func (*RevokeConsentForSubscriptionResponse) Descriptor() ([]byte, []int) {
	return file_wgtwo_consents_v0_consents_proto_rawDescGZIP(), []int{7}
}

func (x *RevokeConsentForSubscriptionResponse) GetStatusCode() v0.StatusCode {
	if x != nil {
		return x.StatusCode
	}
	return v0.StatusCode(0)
}

func (x *RevokeConsentForSubscriptionResponse) GetErrorMessage() string {
	if x != nil {
		return x.ErrorMessage
	}
	return ""
}

// A consent for a subscription.
type Consent struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// The owner of the consent.
	Owner *ConsentOwner `protobuf:"bytes,1,opt,name=owner,proto3" json:"owner,omitempty"`
	// The product identifier.
	ProductId string `protobuf:"bytes,2,opt,name=product_id,json=productId,proto3" json:"product_id,omitempty"`
	// The scopes of the consent.
	Scopes []*Scope `protobuf:"bytes,3,rep,name=scopes,proto3" json:"scopes,omitempty"`
	// Whether the consent is revocable.
	Revocable     bool              `protobuf:"varint,4,opt,name=revocable,proto3" json:"revocable,omitempty"`
	Metadata      map[string]string `protobuf:"bytes,5,rep,name=metadata,proto3" json:"metadata,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Consent) Reset() {
	*x = Consent{}
	mi := &file_wgtwo_consents_v0_consents_proto_msgTypes[8]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Consent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Consent) ProtoMessage() {}

func (x *Consent) ProtoReflect() protoreflect.Message {
	mi := &file_wgtwo_consents_v0_consents_proto_msgTypes[8]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Consent.ProtoReflect.Descriptor instead.
func (*Consent) Descriptor() ([]byte, []int) {
	return file_wgtwo_consents_v0_consents_proto_rawDescGZIP(), []int{8}
}

func (x *Consent) GetOwner() *ConsentOwner {
	if x != nil {
		return x.Owner
	}
	return nil
}

func (x *Consent) GetProductId() string {
	if x != nil {
		return x.ProductId
	}
	return ""
}

func (x *Consent) GetScopes() []*Scope {
	if x != nil {
		return x.Scopes
	}
	return nil
}

func (x *Consent) GetRevocable() bool {
	if x != nil {
		return x.Revocable
	}
	return false
}

func (x *Consent) GetMetadata() map[string]string {
	if x != nil {
		return x.Metadata
	}
	return nil
}

// The owner of a consent.
type ConsentOwner struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// The type of the owner.
	//
	// Types that are valid to be assigned to Value:
	//
	//	*ConsentOwner_Subscription
	//	*ConsentOwner_Tenant
	Value         isConsentOwner_Value `protobuf_oneof:"value"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ConsentOwner) Reset() {
	*x = ConsentOwner{}
	mi := &file_wgtwo_consents_v0_consents_proto_msgTypes[9]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ConsentOwner) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ConsentOwner) ProtoMessage() {}

func (x *ConsentOwner) ProtoReflect() protoreflect.Message {
	mi := &file_wgtwo_consents_v0_consents_proto_msgTypes[9]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ConsentOwner.ProtoReflect.Descriptor instead.
func (*ConsentOwner) Descriptor() ([]byte, []int) {
	return file_wgtwo_consents_v0_consents_proto_rawDescGZIP(), []int{9}
}

func (x *ConsentOwner) GetValue() isConsentOwner_Value {
	if x != nil {
		return x.Value
	}
	return nil
}

func (x *ConsentOwner) GetSubscription() *Subscription {
	if x != nil {
		if x, ok := x.Value.(*ConsentOwner_Subscription); ok {
			return x.Subscription
		}
	}
	return nil
}

func (x *ConsentOwner) GetTenant() *v0.Tenant {
	if x != nil {
		if x, ok := x.Value.(*ConsentOwner_Tenant); ok {
			return x.Tenant
		}
	}
	return nil
}

type isConsentOwner_Value interface {
	isConsentOwner_Value()
}

type ConsentOwner_Subscription struct {
	// The subscription owns the consent.
	Subscription *Subscription `protobuf:"bytes,1,opt,name=subscription,proto3,oneof"`
}

type ConsentOwner_Tenant struct {
	// The tenant (operator) owns the consent, on behalf of the subscription.
	Tenant *v0.Tenant `protobuf:"bytes,2,opt,name=tenant,proto3,oneof"`
}

func (*ConsentOwner_Subscription) isConsentOwner_Value() {}

func (*ConsentOwner_Tenant) isConsentOwner_Value() {}

// A subscription message.
type Subscription struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// The subscription identifier.
	SubscriptionIdentifier *v0.SubscriptionIdentifier `protobuf:"bytes,1,opt,name=subscription_identifier,json=subscriptionIdentifier,proto3" json:"subscription_identifier,omitempty"`
	unknownFields          protoimpl.UnknownFields
	sizeCache              protoimpl.SizeCache
}

func (x *Subscription) Reset() {
	*x = Subscription{}
	mi := &file_wgtwo_consents_v0_consents_proto_msgTypes[10]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Subscription) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Subscription) ProtoMessage() {}

func (x *Subscription) ProtoReflect() protoreflect.Message {
	mi := &file_wgtwo_consents_v0_consents_proto_msgTypes[10]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Subscription.ProtoReflect.Descriptor instead.
func (*Subscription) Descriptor() ([]byte, []int) {
	return file_wgtwo_consents_v0_consents_proto_rawDescGZIP(), []int{10}
}

func (x *Subscription) GetSubscriptionIdentifier() *v0.SubscriptionIdentifier {
	if x != nil {
		return x.SubscriptionIdentifier
	}
	return nil
}

// The scope of a consent.
type Scope struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// The name of the scope, e.g. `"subscription.consent:read"`.
	Property      string `protobuf:"bytes,1,opt,name=property,proto3" json:"property,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Scope) Reset() {
	*x = Scope{}
	mi := &file_wgtwo_consents_v0_consents_proto_msgTypes[11]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Scope) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Scope) ProtoMessage() {}

func (x *Scope) ProtoReflect() protoreflect.Message {
	mi := &file_wgtwo_consents_v0_consents_proto_msgTypes[11]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Scope.ProtoReflect.Descriptor instead.
func (*Scope) Descriptor() ([]byte, []int) {
	return file_wgtwo_consents_v0_consents_proto_rawDescGZIP(), []int{11}
}

func (x *Scope) GetProperty() string {
	if x != nil {
		return x.Property
	}
	return ""
}

var File_wgtwo_consents_v0_consents_proto protoreflect.FileDescriptor

const file_wgtwo_consents_v0_consents_proto_rawDesc = "" +
	"\n" +
	" wgtwo/consents/v0/consents.proto\x12\x11wgtwo.consents.v0\x1a#wgtwo/annotations/annotations.proto\x1a\x1cwgtwo/common/v0/errors.proto\x1a wgtwo/common/v0/pagination.proto\x1a!wgtwo/common/v0/phonenumber.proto\x1a\x1bwgtwo/common/v0/types.proto\"c\n" +
	"\x1dListConsentsForProductRequest\x12B\n" +
	"\n" +
	"pagination\x18\x01 \x01(\v2\".wgtwo.common.v0.PaginationRequestR\n" +
	"pagination\"\x9d\x01\n" +
	"\x1eListConsentsForProductResponse\x126\n" +
	"\bconsents\x18\x01 \x03(\v2\x1a.wgtwo.consents.v0.ConsentR\bconsents\x12C\n" +
	"\n" +
	"pagination\x18\x02 \x01(\v2#.wgtwo.common.v0.PaginationResponseR\n" +
	"pagination\"\x9d\x01\n" +
	"!GetConsentsForSubscriptionRequest\x127\n" +
	"\x02id\x18\x01 \x01(\v2'.wgtwo.common.v0.SubscriptionIdentifierR\x02id\x12?\n" +
	"\fphone_number\x18\x02 \x01(\v2\x1c.wgtwo.common.v0.PhoneNumberR\vphoneNumber\"\xbf\x01\n" +
	"\"GetConsentsForSubscriptionResponse\x126\n" +
	"\bconsents\x18\x01 \x03(\v2\x1a.wgtwo.consents.v0.ConsentR\bconsents\x12<\n" +
	"\vstatus_code\x18\x02 \x01(\x0e2\x1b.wgtwo.common.v0.StatusCodeR\n" +
	"statusCode\x12#\n" +
	"\rerror_message\x18\x03 \x01(\tR\ferrorMessage\"\xdd\x02\n" +
	"#CreateConsentForSubscriptionRequest\x127\n" +
	"\x02id\x18\x01 \x01(\v2'.wgtwo.common.v0.SubscriptionIdentifierR\x02id\x12?\n" +
	"\fphone_number\x18\x04 \x01(\v2\x1c.wgtwo.common.v0.PhoneNumberR\vphoneNumber\x12\x1d\n" +
	"\n" +
	"product_id\x18\x02 \x01(\tR\tproductId\x12`\n" +
	"\bmetadata\x18\x03 \x03(\v2D.wgtwo.consents.v0.CreateConsentForSubscriptionRequest.MetadataEntryR\bmetadata\x1a;\n" +
	"\rMetadataEntry\x12\x10\n" +
	"\x03key\x18\x01 \x01(\tR\x03key\x12\x14\n" +
	"\x05value\x18\x02 \x01(\tR\x05value:\x028\x01\"\x89\x01\n" +
	"$CreateConsentForSubscriptionResponse\x12<\n" +
	"\vstatus_code\x18\x01 \x01(\x0e2\x1b.wgtwo.common.v0.StatusCodeR\n" +
	"statusCode\x12#\n" +
	"\rerror_message\x18\x02 \x01(\tR\ferrorMessage\"\xbe\x01\n" +
	"#RevokeConsentForSubscriptionRequest\x127\n" +
	"\x02id\x18\x01 \x01(\v2'.wgtwo.common.v0.SubscriptionIdentifierR\x02id\x12?\n" +
	"\fphone_number\x18\x03 \x01(\v2\x1c.wgtwo.common.v0.PhoneNumberR\vphoneNumber\x12\x1d\n" +
	"\n" +
	"product_id\x18\x02 \x01(\tR\tproductId\"\x89\x01\n" +
	"$RevokeConsentForSubscriptionResponse\x12<\n" +
	"\vstatus_code\x18\x01 \x01(\x0e2\x1b.wgtwo.common.v0.StatusCodeR\n" +
	"statusCode\x12#\n" +
	"\rerror_message\x18\x02 \x01(\tR\ferrorMessage\"\xb2\x02\n" +
	"\aConsent\x125\n" +
	"\x05owner\x18\x01 \x01(\v2\x1f.wgtwo.consents.v0.ConsentOwnerR\x05owner\x12\x1d\n" +
	"\n" +
	"product_id\x18\x02 \x01(\tR\tproductId\x120\n" +
	"\x06scopes\x18\x03 \x03(\v2\x18.wgtwo.consents.v0.ScopeR\x06scopes\x12\x1c\n" +
	"\trevocable\x18\x04 \x01(\bR\trevocable\x12D\n" +
	"\bmetadata\x18\x05 \x03(\v2(.wgtwo.consents.v0.Consent.MetadataEntryR\bmetadata\x1a;\n" +
	"\rMetadataEntry\x12\x10\n" +
	"\x03key\x18\x01 \x01(\tR\x03key\x12\x14\n" +
	"\x05value\x18\x02 \x01(\tR\x05value:\x028\x01\"\x91\x01\n" +
	"\fConsentOwner\x12E\n" +
	"\fsubscription\x18\x01 \x01(\v2\x1f.wgtwo.consents.v0.SubscriptionH\x00R\fsubscription\x121\n" +
	"\x06tenant\x18\x02 \x01(\v2\x17.wgtwo.common.v0.TenantH\x00R\x06tenantB\a\n" +
	"\x05value\"p\n" +
	"\fSubscription\x12`\n" +
	"\x17subscription_identifier\x18\x01 \x01(\v2'.wgtwo.common.v0.SubscriptionIdentifierR\x16subscriptionIdentifier\"#\n" +
	"\x05Scope\x12\x1a\n" +
	"\bproperty\x18\x01 \x01(\tR\bproperty2\xa9\x05\n" +
	"\x0eConsentService\x12\xa8\x01\n" +
	"\x1aGetConsentsForSubscription\x124.wgtwo.consents.v0.GetConsentsForSubscriptionRequest\x1a5.wgtwo.consents.v0.GetConsentsForSubscriptionResponse\"\x1d\xea\xb5\x18\x19subscription.consent:read\x12\xaf\x01\n" +
	"\x1cCreateConsentForSubscription\x126.wgtwo.consents.v0.CreateConsentForSubscriptionRequest\x1a7.wgtwo.consents.v0.CreateConsentForSubscriptionResponse\"\x1e\xea\xb5\x18\x1asubscription.consent:write\x12\xaf\x01\n" +
	"\x1cRevokeConsentForSubscription\x126.wgtwo.consents.v0.RevokeConsentForSubscriptionRequest\x1a7.wgtwo.consents.v0.RevokeConsentForSubscriptionResponse\"\x1e\xea\xb5\x18\x1asubscription.consent:write\x12\x87\x01\n" +
	"\x16ListConsentsForProduct\x120.wgtwo.consents.v0.ListConsentsForProductRequest\x1a1.wgtwo.consents.v0.ListConsentsForProductResponse\"\b\xea\xb5\x18\x00\xf8\xb5\x18\x02B\xc6\x01\n" +
	"\x15com.wgtwo.consents.v0B\rConsentsProtoP\x01Z8github.com/working-group-two/wgtwoapis/wgtwo/consents/v0\xa2\x02\x03WCV\xaa\x02\x11Wgtwo.Consents.V0\xca\x02\x11Wgtwo\\Consents\\V0\xe2\x02\x1dWgtwo\\Consents\\V0\\GPBMetadata\xea\x02\x13Wgtwo::Consents::V0b\x06proto3"

var (
	file_wgtwo_consents_v0_consents_proto_rawDescOnce sync.Once
	file_wgtwo_consents_v0_consents_proto_rawDescData []byte
)

func file_wgtwo_consents_v0_consents_proto_rawDescGZIP() []byte {
	file_wgtwo_consents_v0_consents_proto_rawDescOnce.Do(func() {
		file_wgtwo_consents_v0_consents_proto_rawDescData = protoimpl.X.CompressGZIP(unsafe.Slice(unsafe.StringData(file_wgtwo_consents_v0_consents_proto_rawDesc), len(file_wgtwo_consents_v0_consents_proto_rawDesc)))
	})
	return file_wgtwo_consents_v0_consents_proto_rawDescData
}

var file_wgtwo_consents_v0_consents_proto_msgTypes = make([]protoimpl.MessageInfo, 14)
var file_wgtwo_consents_v0_consents_proto_goTypes = []any{
	(*ListConsentsForProductRequest)(nil),        // 0: wgtwo.consents.v0.ListConsentsForProductRequest
	(*ListConsentsForProductResponse)(nil),       // 1: wgtwo.consents.v0.ListConsentsForProductResponse
	(*GetConsentsForSubscriptionRequest)(nil),    // 2: wgtwo.consents.v0.GetConsentsForSubscriptionRequest
	(*GetConsentsForSubscriptionResponse)(nil),   // 3: wgtwo.consents.v0.GetConsentsForSubscriptionResponse
	(*CreateConsentForSubscriptionRequest)(nil),  // 4: wgtwo.consents.v0.CreateConsentForSubscriptionRequest
	(*CreateConsentForSubscriptionResponse)(nil), // 5: wgtwo.consents.v0.CreateConsentForSubscriptionResponse
	(*RevokeConsentForSubscriptionRequest)(nil),  // 6: wgtwo.consents.v0.RevokeConsentForSubscriptionRequest
	(*RevokeConsentForSubscriptionResponse)(nil), // 7: wgtwo.consents.v0.RevokeConsentForSubscriptionResponse
	(*Consent)(nil),                   // 8: wgtwo.consents.v0.Consent
	(*ConsentOwner)(nil),              // 9: wgtwo.consents.v0.ConsentOwner
	(*Subscription)(nil),              // 10: wgtwo.consents.v0.Subscription
	(*Scope)(nil),                     // 11: wgtwo.consents.v0.Scope
	nil,                               // 12: wgtwo.consents.v0.CreateConsentForSubscriptionRequest.MetadataEntry
	nil,                               // 13: wgtwo.consents.v0.Consent.MetadataEntry
	(*v0.PaginationRequest)(nil),      // 14: wgtwo.common.v0.PaginationRequest
	(*v0.PaginationResponse)(nil),     // 15: wgtwo.common.v0.PaginationResponse
	(*v0.SubscriptionIdentifier)(nil), // 16: wgtwo.common.v0.SubscriptionIdentifier
	(*v0.PhoneNumber)(nil),            // 17: wgtwo.common.v0.PhoneNumber
	(v0.StatusCode)(0),                // 18: wgtwo.common.v0.StatusCode
	(*v0.Tenant)(nil),                 // 19: wgtwo.common.v0.Tenant
}
var file_wgtwo_consents_v0_consents_proto_depIdxs = []int32{
	14, // 0: wgtwo.consents.v0.ListConsentsForProductRequest.pagination:type_name -> wgtwo.common.v0.PaginationRequest
	8,  // 1: wgtwo.consents.v0.ListConsentsForProductResponse.consents:type_name -> wgtwo.consents.v0.Consent
	15, // 2: wgtwo.consents.v0.ListConsentsForProductResponse.pagination:type_name -> wgtwo.common.v0.PaginationResponse
	16, // 3: wgtwo.consents.v0.GetConsentsForSubscriptionRequest.id:type_name -> wgtwo.common.v0.SubscriptionIdentifier
	17, // 4: wgtwo.consents.v0.GetConsentsForSubscriptionRequest.phone_number:type_name -> wgtwo.common.v0.PhoneNumber
	8,  // 5: wgtwo.consents.v0.GetConsentsForSubscriptionResponse.consents:type_name -> wgtwo.consents.v0.Consent
	18, // 6: wgtwo.consents.v0.GetConsentsForSubscriptionResponse.status_code:type_name -> wgtwo.common.v0.StatusCode
	16, // 7: wgtwo.consents.v0.CreateConsentForSubscriptionRequest.id:type_name -> wgtwo.common.v0.SubscriptionIdentifier
	17, // 8: wgtwo.consents.v0.CreateConsentForSubscriptionRequest.phone_number:type_name -> wgtwo.common.v0.PhoneNumber
	12, // 9: wgtwo.consents.v0.CreateConsentForSubscriptionRequest.metadata:type_name -> wgtwo.consents.v0.CreateConsentForSubscriptionRequest.MetadataEntry
	18, // 10: wgtwo.consents.v0.CreateConsentForSubscriptionResponse.status_code:type_name -> wgtwo.common.v0.StatusCode
	16, // 11: wgtwo.consents.v0.RevokeConsentForSubscriptionRequest.id:type_name -> wgtwo.common.v0.SubscriptionIdentifier
	17, // 12: wgtwo.consents.v0.RevokeConsentForSubscriptionRequest.phone_number:type_name -> wgtwo.common.v0.PhoneNumber
	18, // 13: wgtwo.consents.v0.RevokeConsentForSubscriptionResponse.status_code:type_name -> wgtwo.common.v0.StatusCode
	9,  // 14: wgtwo.consents.v0.Consent.owner:type_name -> wgtwo.consents.v0.ConsentOwner
	11, // 15: wgtwo.consents.v0.Consent.scopes:type_name -> wgtwo.consents.v0.Scope
	13, // 16: wgtwo.consents.v0.Consent.metadata:type_name -> wgtwo.consents.v0.Consent.MetadataEntry
	10, // 17: wgtwo.consents.v0.ConsentOwner.subscription:type_name -> wgtwo.consents.v0.Subscription
	19, // 18: wgtwo.consents.v0.ConsentOwner.tenant:type_name -> wgtwo.common.v0.Tenant
	16, // 19: wgtwo.consents.v0.Subscription.subscription_identifier:type_name -> wgtwo.common.v0.SubscriptionIdentifier
	2,  // 20: wgtwo.consents.v0.ConsentService.GetConsentsForSubscription:input_type -> wgtwo.consents.v0.GetConsentsForSubscriptionRequest
	4,  // 21: wgtwo.consents.v0.ConsentService.CreateConsentForSubscription:input_type -> wgtwo.consents.v0.CreateConsentForSubscriptionRequest
	6,  // 22: wgtwo.consents.v0.ConsentService.RevokeConsentForSubscription:input_type -> wgtwo.consents.v0.RevokeConsentForSubscriptionRequest
	0,  // 23: wgtwo.consents.v0.ConsentService.ListConsentsForProduct:input_type -> wgtwo.consents.v0.ListConsentsForProductRequest
	3,  // 24: wgtwo.consents.v0.ConsentService.GetConsentsForSubscription:output_type -> wgtwo.consents.v0.GetConsentsForSubscriptionResponse
	5,  // 25: wgtwo.consents.v0.ConsentService.CreateConsentForSubscription:output_type -> wgtwo.consents.v0.CreateConsentForSubscriptionResponse
	7,  // 26: wgtwo.consents.v0.ConsentService.RevokeConsentForSubscription:output_type -> wgtwo.consents.v0.RevokeConsentForSubscriptionResponse
	1,  // 27: wgtwo.consents.v0.ConsentService.ListConsentsForProduct:output_type -> wgtwo.consents.v0.ListConsentsForProductResponse
	24, // [24:28] is the sub-list for method output_type
	20, // [20:24] is the sub-list for method input_type
	20, // [20:20] is the sub-list for extension type_name
	20, // [20:20] is the sub-list for extension extendee
	0,  // [0:20] is the sub-list for field type_name
}

func init() { file_wgtwo_consents_v0_consents_proto_init() }
func file_wgtwo_consents_v0_consents_proto_init() {
	if File_wgtwo_consents_v0_consents_proto != nil {
		return
	}
	file_wgtwo_consents_v0_consents_proto_msgTypes[9].OneofWrappers = []any{
		(*ConsentOwner_Subscription)(nil),
		(*ConsentOwner_Tenant)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_wgtwo_consents_v0_consents_proto_rawDesc), len(file_wgtwo_consents_v0_consents_proto_rawDesc)),
			NumEnums:      0,
			NumMessages:   14,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_wgtwo_consents_v0_consents_proto_goTypes,
		DependencyIndexes: file_wgtwo_consents_v0_consents_proto_depIdxs,
		MessageInfos:      file_wgtwo_consents_v0_consents_proto_msgTypes,
	}.Build()
	File_wgtwo_consents_v0_consents_proto = out.File
	file_wgtwo_consents_v0_consents_proto_goTypes = nil
	file_wgtwo_consents_v0_consents_proto_depIdxs = nil
}
