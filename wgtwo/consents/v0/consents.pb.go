// Copyright 2021 Working Group Two AS
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.30.0
// 	protoc        (unknown)
// source: wgtwo/consents/v0/consents.proto

package v0

import (
	_ "github.com/working-group-two/wgtwoapis/wgtwo/annotations"
	v0 "github.com/working-group-two/wgtwoapis/wgtwo/common/v0"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type GetConsentsForSubscriptionRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id          *v0.SubscriptionIdentifier `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	PhoneNumber *v0.PhoneNumber            `protobuf:"bytes,2,opt,name=phone_number,json=phoneNumber,proto3" json:"phone_number,omitempty"` // TODO to be removed
}

func (x *GetConsentsForSubscriptionRequest) Reset() {
	*x = GetConsentsForSubscriptionRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_wgtwo_consents_v0_consents_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetConsentsForSubscriptionRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetConsentsForSubscriptionRequest) ProtoMessage() {}

func (x *GetConsentsForSubscriptionRequest) ProtoReflect() protoreflect.Message {
	mi := &file_wgtwo_consents_v0_consents_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetConsentsForSubscriptionRequest.ProtoReflect.Descriptor instead.
func (*GetConsentsForSubscriptionRequest) Descriptor() ([]byte, []int) {
	return file_wgtwo_consents_v0_consents_proto_rawDescGZIP(), []int{0}
}

func (x *GetConsentsForSubscriptionRequest) GetId() *v0.SubscriptionIdentifier {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *GetConsentsForSubscriptionRequest) GetPhoneNumber() *v0.PhoneNumber {
	if x != nil {
		return x.PhoneNumber
	}
	return nil
}

type GetConsentsForSubscriptionResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Consents     []*Consent    `protobuf:"bytes,1,rep,name=consents,proto3" json:"consents,omitempty"`
	StatusCode   v0.StatusCode `protobuf:"varint,2,opt,name=status_code,json=statusCode,proto3,enum=wgtwo.common.v0.StatusCode" json:"status_code,omitempty"`
	ErrorMessage string        `protobuf:"bytes,3,opt,name=error_message,json=errorMessage,proto3" json:"error_message,omitempty"`
}

func (x *GetConsentsForSubscriptionResponse) Reset() {
	*x = GetConsentsForSubscriptionResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_wgtwo_consents_v0_consents_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetConsentsForSubscriptionResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetConsentsForSubscriptionResponse) ProtoMessage() {}

func (x *GetConsentsForSubscriptionResponse) ProtoReflect() protoreflect.Message {
	mi := &file_wgtwo_consents_v0_consents_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetConsentsForSubscriptionResponse.ProtoReflect.Descriptor instead.
func (*GetConsentsForSubscriptionResponse) Descriptor() ([]byte, []int) {
	return file_wgtwo_consents_v0_consents_proto_rawDescGZIP(), []int{1}
}

func (x *GetConsentsForSubscriptionResponse) GetConsents() []*Consent {
	if x != nil {
		return x.Consents
	}
	return nil
}

func (x *GetConsentsForSubscriptionResponse) GetStatusCode() v0.StatusCode {
	if x != nil {
		return x.StatusCode
	}
	return v0.StatusCode(0)
}

func (x *GetConsentsForSubscriptionResponse) GetErrorMessage() string {
	if x != nil {
		return x.ErrorMessage
	}
	return ""
}

type CreateConsentForSubscriptionRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id             *v0.SubscriptionIdentifier `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	PhoneNumber    *v0.PhoneNumber            `protobuf:"bytes,4,opt,name=phone_number,json=phoneNumber,proto3" json:"phone_number,omitempty"` // TODO to be removed
	ProductId      string                     `protobuf:"bytes,2,opt,name=product_id,json=productId,proto3" json:"product_id,omitempty"`
	ProductVersion string                     `protobuf:"bytes,3,opt,name=product_version,json=productVersion,proto3" json:"product_version,omitempty"`
}

func (x *CreateConsentForSubscriptionRequest) Reset() {
	*x = CreateConsentForSubscriptionRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_wgtwo_consents_v0_consents_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateConsentForSubscriptionRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateConsentForSubscriptionRequest) ProtoMessage() {}

func (x *CreateConsentForSubscriptionRequest) ProtoReflect() protoreflect.Message {
	mi := &file_wgtwo_consents_v0_consents_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateConsentForSubscriptionRequest.ProtoReflect.Descriptor instead.
func (*CreateConsentForSubscriptionRequest) Descriptor() ([]byte, []int) {
	return file_wgtwo_consents_v0_consents_proto_rawDescGZIP(), []int{2}
}

func (x *CreateConsentForSubscriptionRequest) GetId() *v0.SubscriptionIdentifier {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *CreateConsentForSubscriptionRequest) GetPhoneNumber() *v0.PhoneNumber {
	if x != nil {
		return x.PhoneNumber
	}
	return nil
}

func (x *CreateConsentForSubscriptionRequest) GetProductId() string {
	if x != nil {
		return x.ProductId
	}
	return ""
}

func (x *CreateConsentForSubscriptionRequest) GetProductVersion() string {
	if x != nil {
		return x.ProductVersion
	}
	return ""
}

type CreateConsentForSubscriptionResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	StatusCode   v0.StatusCode `protobuf:"varint,1,opt,name=status_code,json=statusCode,proto3,enum=wgtwo.common.v0.StatusCode" json:"status_code,omitempty"`
	ErrorMessage string        `protobuf:"bytes,2,opt,name=error_message,json=errorMessage,proto3" json:"error_message,omitempty"`
}

func (x *CreateConsentForSubscriptionResponse) Reset() {
	*x = CreateConsentForSubscriptionResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_wgtwo_consents_v0_consents_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateConsentForSubscriptionResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateConsentForSubscriptionResponse) ProtoMessage() {}

func (x *CreateConsentForSubscriptionResponse) ProtoReflect() protoreflect.Message {
	mi := &file_wgtwo_consents_v0_consents_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateConsentForSubscriptionResponse.ProtoReflect.Descriptor instead.
func (*CreateConsentForSubscriptionResponse) Descriptor() ([]byte, []int) {
	return file_wgtwo_consents_v0_consents_proto_rawDescGZIP(), []int{3}
}

func (x *CreateConsentForSubscriptionResponse) GetStatusCode() v0.StatusCode {
	if x != nil {
		return x.StatusCode
	}
	return v0.StatusCode(0)
}

func (x *CreateConsentForSubscriptionResponse) GetErrorMessage() string {
	if x != nil {
		return x.ErrorMessage
	}
	return ""
}

type RevokeConsentForSubscriptionRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id          *v0.SubscriptionIdentifier `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	PhoneNumber *v0.PhoneNumber            `protobuf:"bytes,3,opt,name=phone_number,json=phoneNumber,proto3" json:"phone_number,omitempty"` // TODO to be removed
	ProductId   string                     `protobuf:"bytes,2,opt,name=product_id,json=productId,proto3" json:"product_id,omitempty"`
}

func (x *RevokeConsentForSubscriptionRequest) Reset() {
	*x = RevokeConsentForSubscriptionRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_wgtwo_consents_v0_consents_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RevokeConsentForSubscriptionRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RevokeConsentForSubscriptionRequest) ProtoMessage() {}

func (x *RevokeConsentForSubscriptionRequest) ProtoReflect() protoreflect.Message {
	mi := &file_wgtwo_consents_v0_consents_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RevokeConsentForSubscriptionRequest.ProtoReflect.Descriptor instead.
func (*RevokeConsentForSubscriptionRequest) Descriptor() ([]byte, []int) {
	return file_wgtwo_consents_v0_consents_proto_rawDescGZIP(), []int{4}
}

func (x *RevokeConsentForSubscriptionRequest) GetId() *v0.SubscriptionIdentifier {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *RevokeConsentForSubscriptionRequest) GetPhoneNumber() *v0.PhoneNumber {
	if x != nil {
		return x.PhoneNumber
	}
	return nil
}

func (x *RevokeConsentForSubscriptionRequest) GetProductId() string {
	if x != nil {
		return x.ProductId
	}
	return ""
}

type RevokeConsentForSubscriptionResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	StatusCode   v0.StatusCode `protobuf:"varint,1,opt,name=status_code,json=statusCode,proto3,enum=wgtwo.common.v0.StatusCode" json:"status_code,omitempty"`
	ErrorMessage string        `protobuf:"bytes,2,opt,name=error_message,json=errorMessage,proto3" json:"error_message,omitempty"`
}

func (x *RevokeConsentForSubscriptionResponse) Reset() {
	*x = RevokeConsentForSubscriptionResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_wgtwo_consents_v0_consents_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RevokeConsentForSubscriptionResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RevokeConsentForSubscriptionResponse) ProtoMessage() {}

func (x *RevokeConsentForSubscriptionResponse) ProtoReflect() protoreflect.Message {
	mi := &file_wgtwo_consents_v0_consents_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RevokeConsentForSubscriptionResponse.ProtoReflect.Descriptor instead.
func (*RevokeConsentForSubscriptionResponse) Descriptor() ([]byte, []int) {
	return file_wgtwo_consents_v0_consents_proto_rawDescGZIP(), []int{5}
}

func (x *RevokeConsentForSubscriptionResponse) GetStatusCode() v0.StatusCode {
	if x != nil {
		return x.StatusCode
	}
	return v0.StatusCode(0)
}

func (x *RevokeConsentForSubscriptionResponse) GetErrorMessage() string {
	if x != nil {
		return x.ErrorMessage
	}
	return ""
}

type Consent struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Owner     *ConsentOwner `protobuf:"bytes,1,opt,name=owner,proto3" json:"owner,omitempty"`
	ProductId string        `protobuf:"bytes,2,opt,name=product_id,json=productId,proto3" json:"product_id,omitempty"`
	Scopes    []*Scope      `protobuf:"bytes,3,rep,name=scopes,proto3" json:"scopes,omitempty"`
	Revokable bool          `protobuf:"varint,4,opt,name=revokable,proto3" json:"revokable,omitempty"`
}

func (x *Consent) Reset() {
	*x = Consent{}
	if protoimpl.UnsafeEnabled {
		mi := &file_wgtwo_consents_v0_consents_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Consent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Consent) ProtoMessage() {}

func (x *Consent) ProtoReflect() protoreflect.Message {
	mi := &file_wgtwo_consents_v0_consents_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Consent.ProtoReflect.Descriptor instead.
func (*Consent) Descriptor() ([]byte, []int) {
	return file_wgtwo_consents_v0_consents_proto_rawDescGZIP(), []int{6}
}

func (x *Consent) GetOwner() *ConsentOwner {
	if x != nil {
		return x.Owner
	}
	return nil
}

func (x *Consent) GetProductId() string {
	if x != nil {
		return x.ProductId
	}
	return ""
}

func (x *Consent) GetScopes() []*Scope {
	if x != nil {
		return x.Scopes
	}
	return nil
}

func (x *Consent) GetRevokable() bool {
	if x != nil {
		return x.Revokable
	}
	return false
}

type ConsentOwner struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Value:
	//
	//	*ConsentOwner_Subscription
	//	*ConsentOwner_Tenant
	Value isConsentOwner_Value `protobuf_oneof:"value"`
}

func (x *ConsentOwner) Reset() {
	*x = ConsentOwner{}
	if protoimpl.UnsafeEnabled {
		mi := &file_wgtwo_consents_v0_consents_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ConsentOwner) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ConsentOwner) ProtoMessage() {}

func (x *ConsentOwner) ProtoReflect() protoreflect.Message {
	mi := &file_wgtwo_consents_v0_consents_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ConsentOwner.ProtoReflect.Descriptor instead.
func (*ConsentOwner) Descriptor() ([]byte, []int) {
	return file_wgtwo_consents_v0_consents_proto_rawDescGZIP(), []int{7}
}

func (m *ConsentOwner) GetValue() isConsentOwner_Value {
	if m != nil {
		return m.Value
	}
	return nil
}

func (x *ConsentOwner) GetSubscription() *Subscription {
	if x, ok := x.GetValue().(*ConsentOwner_Subscription); ok {
		return x.Subscription
	}
	return nil
}

func (x *ConsentOwner) GetTenant() *v0.Tenant {
	if x, ok := x.GetValue().(*ConsentOwner_Tenant); ok {
		return x.Tenant
	}
	return nil
}

type isConsentOwner_Value interface {
	isConsentOwner_Value()
}

type ConsentOwner_Subscription struct {
	Subscription *Subscription `protobuf:"bytes,1,opt,name=subscription,proto3,oneof"`
}

type ConsentOwner_Tenant struct {
	Tenant *v0.Tenant `protobuf:"bytes,2,opt,name=tenant,proto3,oneof"`
}

func (*ConsentOwner_Subscription) isConsentOwner_Value() {}

func (*ConsentOwner_Tenant) isConsentOwner_Value() {}

type Subscription struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SubscriptionIdentifier *v0.SubscriptionIdentifier `protobuf:"bytes,1,opt,name=subscription_identifier,json=subscriptionIdentifier,proto3" json:"subscription_identifier,omitempty"`
}

func (x *Subscription) Reset() {
	*x = Subscription{}
	if protoimpl.UnsafeEnabled {
		mi := &file_wgtwo_consents_v0_consents_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Subscription) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Subscription) ProtoMessage() {}

func (x *Subscription) ProtoReflect() protoreflect.Message {
	mi := &file_wgtwo_consents_v0_consents_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Subscription.ProtoReflect.Descriptor instead.
func (*Subscription) Descriptor() ([]byte, []int) {
	return file_wgtwo_consents_v0_consents_proto_rawDescGZIP(), []int{8}
}

func (x *Subscription) GetSubscriptionIdentifier() *v0.SubscriptionIdentifier {
	if x != nil {
		return x.SubscriptionIdentifier
	}
	return nil
}

type Scope struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Property string `protobuf:"bytes,1,opt,name=property,proto3" json:"property,omitempty"`
}

func (x *Scope) Reset() {
	*x = Scope{}
	if protoimpl.UnsafeEnabled {
		mi := &file_wgtwo_consents_v0_consents_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Scope) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Scope) ProtoMessage() {}

func (x *Scope) ProtoReflect() protoreflect.Message {
	mi := &file_wgtwo_consents_v0_consents_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Scope.ProtoReflect.Descriptor instead.
func (*Scope) Descriptor() ([]byte, []int) {
	return file_wgtwo_consents_v0_consents_proto_rawDescGZIP(), []int{9}
}

func (x *Scope) GetProperty() string {
	if x != nil {
		return x.Property
	}
	return ""
}

var File_wgtwo_consents_v0_consents_proto protoreflect.FileDescriptor

var file_wgtwo_consents_v0_consents_proto_rawDesc = []byte{
	0x0a, 0x20, 0x77, 0x67, 0x74, 0x77, 0x6f, 0x2f, 0x63, 0x6f, 0x6e, 0x73, 0x65, 0x6e, 0x74, 0x73,
	0x2f, 0x76, 0x30, 0x2f, 0x63, 0x6f, 0x6e, 0x73, 0x65, 0x6e, 0x74, 0x73, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x12, 0x11, 0x77, 0x67, 0x74, 0x77, 0x6f, 0x2e, 0x63, 0x6f, 0x6e, 0x73, 0x65, 0x6e,
	0x74, 0x73, 0x2e, 0x76, 0x30, 0x1a, 0x23, 0x77, 0x67, 0x74, 0x77, 0x6f, 0x2f, 0x61, 0x6e, 0x6e,
	0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1c, 0x77, 0x67, 0x74, 0x77,
	0x6f, 0x2f, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2f, 0x76, 0x30, 0x2f, 0x65, 0x72, 0x72, 0x6f,
	0x72, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x21, 0x77, 0x67, 0x74, 0x77, 0x6f, 0x2f,
	0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2f, 0x76, 0x30, 0x2f, 0x70, 0x68, 0x6f, 0x6e, 0x65, 0x6e,
	0x75, 0x6d, 0x62, 0x65, 0x72, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1b, 0x77, 0x67, 0x74,
	0x77, 0x6f, 0x2f, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2f, 0x76, 0x30, 0x2f, 0x74, 0x79, 0x70,
	0x65, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x9d, 0x01, 0x0a, 0x21, 0x47, 0x65, 0x74,
	0x43, 0x6f, 0x6e, 0x73, 0x65, 0x6e, 0x74, 0x73, 0x46, 0x6f, 0x72, 0x53, 0x75, 0x62, 0x73, 0x63,
	0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x37,
	0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x77, 0x67, 0x74,
	0x77, 0x6f, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x76, 0x30, 0x2e, 0x53, 0x75, 0x62,
	0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66,
	0x69, 0x65, 0x72, 0x52, 0x02, 0x69, 0x64, 0x12, 0x3f, 0x0a, 0x0c, 0x70, 0x68, 0x6f, 0x6e, 0x65,
	0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e,
	0x77, 0x67, 0x74, 0x77, 0x6f, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x76, 0x30, 0x2e,
	0x50, 0x68, 0x6f, 0x6e, 0x65, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x52, 0x0b, 0x70, 0x68, 0x6f,
	0x6e, 0x65, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x22, 0xbf, 0x01, 0x0a, 0x22, 0x47, 0x65, 0x74,
	0x43, 0x6f, 0x6e, 0x73, 0x65, 0x6e, 0x74, 0x73, 0x46, 0x6f, 0x72, 0x53, 0x75, 0x62, 0x73, 0x63,
	0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0x36, 0x0a, 0x08, 0x63, 0x6f, 0x6e, 0x73, 0x65, 0x6e, 0x74, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x1a, 0x2e, 0x77, 0x67, 0x74, 0x77, 0x6f, 0x2e, 0x63, 0x6f, 0x6e, 0x73, 0x65, 0x6e,
	0x74, 0x73, 0x2e, 0x76, 0x30, 0x2e, 0x43, 0x6f, 0x6e, 0x73, 0x65, 0x6e, 0x74, 0x52, 0x08, 0x63,
	0x6f, 0x6e, 0x73, 0x65, 0x6e, 0x74, 0x73, 0x12, 0x3c, 0x0a, 0x0b, 0x73, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1b, 0x2e, 0x77,
	0x67, 0x74, 0x77, 0x6f, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x76, 0x30, 0x2e, 0x53,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x43, 0x6f, 0x64, 0x65, 0x52, 0x0a, 0x73, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x23, 0x0a, 0x0d, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x5f, 0x6d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x65, 0x72,
	0x72, 0x6f, 0x72, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x22, 0xe7, 0x01, 0x0a, 0x23, 0x43,
	0x72, 0x65, 0x61, 0x74, 0x65, 0x43, 0x6f, 0x6e, 0x73, 0x65, 0x6e, 0x74, 0x46, 0x6f, 0x72, 0x53,
	0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x37, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x27,
	0x2e, 0x77, 0x67, 0x74, 0x77, 0x6f, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x76, 0x30,
	0x2e, 0x53, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x65,
	0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x52, 0x02, 0x69, 0x64, 0x12, 0x3f, 0x0a, 0x0c, 0x70,
	0x68, 0x6f, 0x6e, 0x65, 0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1c, 0x2e, 0x77, 0x67, 0x74, 0x77, 0x6f, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e,
	0x2e, 0x76, 0x30, 0x2e, 0x50, 0x68, 0x6f, 0x6e, 0x65, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x52,
	0x0b, 0x70, 0x68, 0x6f, 0x6e, 0x65, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x1d, 0x0a, 0x0a,
	0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x09, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x49, 0x64, 0x12, 0x27, 0x0a, 0x0f, 0x70,
	0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x5f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x56, 0x65, 0x72,
	0x73, 0x69, 0x6f, 0x6e, 0x22, 0x89, 0x01, 0x0a, 0x24, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x43,
	0x6f, 0x6e, 0x73, 0x65, 0x6e, 0x74, 0x46, 0x6f, 0x72, 0x53, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69,
	0x70, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x3c, 0x0a,
	0x0b, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x1b, 0x2e, 0x77, 0x67, 0x74, 0x77, 0x6f, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f,
	0x6e, 0x2e, 0x76, 0x30, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x43, 0x6f, 0x64, 0x65, 0x52,
	0x0a, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x23, 0x0a, 0x0d, 0x65,
	0x72, 0x72, 0x6f, 0x72, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0c, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65,
	0x22, 0xbe, 0x01, 0x0a, 0x23, 0x52, 0x65, 0x76, 0x6f, 0x6b, 0x65, 0x43, 0x6f, 0x6e, 0x73, 0x65,
	0x6e, 0x74, 0x46, 0x6f, 0x72, 0x53, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f,
	0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x37, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x77, 0x67, 0x74, 0x77, 0x6f, 0x2e, 0x63, 0x6f, 0x6d,
	0x6d, 0x6f, 0x6e, 0x2e, 0x76, 0x30, 0x2e, 0x53, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74,
	0x69, 0x6f, 0x6e, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x52, 0x02, 0x69,
	0x64, 0x12, 0x3f, 0x0a, 0x0c, 0x70, 0x68, 0x6f, 0x6e, 0x65, 0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65,
	0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x77, 0x67, 0x74, 0x77, 0x6f, 0x2e,
	0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x76, 0x30, 0x2e, 0x50, 0x68, 0x6f, 0x6e, 0x65, 0x4e,
	0x75, 0x6d, 0x62, 0x65, 0x72, 0x52, 0x0b, 0x70, 0x68, 0x6f, 0x6e, 0x65, 0x4e, 0x75, 0x6d, 0x62,
	0x65, 0x72, 0x12, 0x1d, 0x0a, 0x0a, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x5f, 0x69, 0x64,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x49,
	0x64, 0x22, 0x89, 0x01, 0x0a, 0x24, 0x52, 0x65, 0x76, 0x6f, 0x6b, 0x65, 0x43, 0x6f, 0x6e, 0x73,
	0x65, 0x6e, 0x74, 0x46, 0x6f, 0x72, 0x53, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69,
	0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x3c, 0x0a, 0x0b, 0x73, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x1b, 0x2e, 0x77, 0x67, 0x74, 0x77, 0x6f, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x76,
	0x30, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x43, 0x6f, 0x64, 0x65, 0x52, 0x0a, 0x73, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x23, 0x0a, 0x0d, 0x65, 0x72, 0x72, 0x6f,
	0x72, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0c, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x22, 0xaf, 0x01,
	0x0a, 0x07, 0x43, 0x6f, 0x6e, 0x73, 0x65, 0x6e, 0x74, 0x12, 0x35, 0x0a, 0x05, 0x6f, 0x77, 0x6e,
	0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x77, 0x67, 0x74, 0x77, 0x6f,
	0x2e, 0x63, 0x6f, 0x6e, 0x73, 0x65, 0x6e, 0x74, 0x73, 0x2e, 0x76, 0x30, 0x2e, 0x43, 0x6f, 0x6e,
	0x73, 0x65, 0x6e, 0x74, 0x4f, 0x77, 0x6e, 0x65, 0x72, 0x52, 0x05, 0x6f, 0x77, 0x6e, 0x65, 0x72,
	0x12, 0x1d, 0x0a, 0x0a, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x49, 0x64, 0x12,
	0x30, 0x0a, 0x06, 0x73, 0x63, 0x6f, 0x70, 0x65, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x18, 0x2e, 0x77, 0x67, 0x74, 0x77, 0x6f, 0x2e, 0x63, 0x6f, 0x6e, 0x73, 0x65, 0x6e, 0x74, 0x73,
	0x2e, 0x76, 0x30, 0x2e, 0x53, 0x63, 0x6f, 0x70, 0x65, 0x52, 0x06, 0x73, 0x63, 0x6f, 0x70, 0x65,
	0x73, 0x12, 0x1c, 0x0a, 0x09, 0x72, 0x65, 0x76, 0x6f, 0x6b, 0x61, 0x62, 0x6c, 0x65, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x09, 0x72, 0x65, 0x76, 0x6f, 0x6b, 0x61, 0x62, 0x6c, 0x65, 0x22,
	0x91, 0x01, 0x0a, 0x0c, 0x43, 0x6f, 0x6e, 0x73, 0x65, 0x6e, 0x74, 0x4f, 0x77, 0x6e, 0x65, 0x72,
	0x12, 0x45, 0x0a, 0x0c, 0x73, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x77, 0x67, 0x74, 0x77, 0x6f, 0x2e, 0x63,
	0x6f, 0x6e, 0x73, 0x65, 0x6e, 0x74, 0x73, 0x2e, 0x76, 0x30, 0x2e, 0x53, 0x75, 0x62, 0x73, 0x63,
	0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x48, 0x00, 0x52, 0x0c, 0x73, 0x75, 0x62, 0x73, 0x63,
	0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x31, 0x0a, 0x06, 0x74, 0x65, 0x6e, 0x61, 0x6e,
	0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x77, 0x67, 0x74, 0x77, 0x6f, 0x2e,
	0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x76, 0x30, 0x2e, 0x54, 0x65, 0x6e, 0x61, 0x6e, 0x74,
	0x48, 0x00, 0x52, 0x06, 0x74, 0x65, 0x6e, 0x61, 0x6e, 0x74, 0x42, 0x07, 0x0a, 0x05, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x22, 0x70, 0x0a, 0x0c, 0x53, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74,
	0x69, 0x6f, 0x6e, 0x12, 0x60, 0x0a, 0x17, 0x73, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74,
	0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x77, 0x67, 0x74, 0x77, 0x6f, 0x2e, 0x63, 0x6f, 0x6d,
	0x6d, 0x6f, 0x6e, 0x2e, 0x76, 0x30, 0x2e, 0x53, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74,
	0x69, 0x6f, 0x6e, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x52, 0x16, 0x73,
	0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x65, 0x6e, 0x74,
	0x69, 0x66, 0x69, 0x65, 0x72, 0x22, 0x23, 0x0a, 0x05, 0x53, 0x63, 0x6f, 0x70, 0x65, 0x12, 0x1a,
	0x0a, 0x08, 0x70, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x08, 0x70, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x79, 0x32, 0x9f, 0x04, 0x0a, 0x0e, 0x43,
	0x6f, 0x6e, 0x73, 0x65, 0x6e, 0x74, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0xa8, 0x01,
	0x0a, 0x1a, 0x47, 0x65, 0x74, 0x43, 0x6f, 0x6e, 0x73, 0x65, 0x6e, 0x74, 0x73, 0x46, 0x6f, 0x72,
	0x53, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x34, 0x2e, 0x77,
	0x67, 0x74, 0x77, 0x6f, 0x2e, 0x63, 0x6f, 0x6e, 0x73, 0x65, 0x6e, 0x74, 0x73, 0x2e, 0x76, 0x30,
	0x2e, 0x47, 0x65, 0x74, 0x43, 0x6f, 0x6e, 0x73, 0x65, 0x6e, 0x74, 0x73, 0x46, 0x6f, 0x72, 0x53,
	0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x35, 0x2e, 0x77, 0x67, 0x74, 0x77, 0x6f, 0x2e, 0x63, 0x6f, 0x6e, 0x73, 0x65,
	0x6e, 0x74, 0x73, 0x2e, 0x76, 0x30, 0x2e, 0x47, 0x65, 0x74, 0x43, 0x6f, 0x6e, 0x73, 0x65, 0x6e,
	0x74, 0x73, 0x46, 0x6f, 0x72, 0x53, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f,
	0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x1d, 0xea, 0xb5, 0x18, 0x19, 0x73,
	0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x63, 0x6f, 0x6e, 0x73,
	0x65, 0x6e, 0x74, 0x3a, 0x72, 0x65, 0x61, 0x64, 0x12, 0xaf, 0x01, 0x0a, 0x1c, 0x43, 0x72, 0x65,
	0x61, 0x74, 0x65, 0x43, 0x6f, 0x6e, 0x73, 0x65, 0x6e, 0x74, 0x46, 0x6f, 0x72, 0x53, 0x75, 0x62,
	0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x36, 0x2e, 0x77, 0x67, 0x74, 0x77,
	0x6f, 0x2e, 0x63, 0x6f, 0x6e, 0x73, 0x65, 0x6e, 0x74, 0x73, 0x2e, 0x76, 0x30, 0x2e, 0x43, 0x72,
	0x65, 0x61, 0x74, 0x65, 0x43, 0x6f, 0x6e, 0x73, 0x65, 0x6e, 0x74, 0x46, 0x6f, 0x72, 0x53, 0x75,
	0x62, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x37, 0x2e, 0x77, 0x67, 0x74, 0x77, 0x6f, 0x2e, 0x63, 0x6f, 0x6e, 0x73, 0x65, 0x6e,
	0x74, 0x73, 0x2e, 0x76, 0x30, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x43, 0x6f, 0x6e, 0x73,
	0x65, 0x6e, 0x74, 0x46, 0x6f, 0x72, 0x53, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69,
	0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x1e, 0xea, 0xb5, 0x18, 0x1a,
	0x73, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x63, 0x6f, 0x6e,
	0x73, 0x65, 0x6e, 0x74, 0x3a, 0x77, 0x72, 0x69, 0x74, 0x65, 0x12, 0xaf, 0x01, 0x0a, 0x1c, 0x52,
	0x65, 0x76, 0x6f, 0x6b, 0x65, 0x43, 0x6f, 0x6e, 0x73, 0x65, 0x6e, 0x74, 0x46, 0x6f, 0x72, 0x53,
	0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x36, 0x2e, 0x77, 0x67,
	0x74, 0x77, 0x6f, 0x2e, 0x63, 0x6f, 0x6e, 0x73, 0x65, 0x6e, 0x74, 0x73, 0x2e, 0x76, 0x30, 0x2e,
	0x52, 0x65, 0x76, 0x6f, 0x6b, 0x65, 0x43, 0x6f, 0x6e, 0x73, 0x65, 0x6e, 0x74, 0x46, 0x6f, 0x72,
	0x53, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x37, 0x2e, 0x77, 0x67, 0x74, 0x77, 0x6f, 0x2e, 0x63, 0x6f, 0x6e, 0x73,
	0x65, 0x6e, 0x74, 0x73, 0x2e, 0x76, 0x30, 0x2e, 0x52, 0x65, 0x76, 0x6f, 0x6b, 0x65, 0x43, 0x6f,
	0x6e, 0x73, 0x65, 0x6e, 0x74, 0x46, 0x6f, 0x72, 0x53, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x70,
	0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x1e, 0xea, 0xb5,
	0x18, 0x1a, 0x73, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x63,
	0x6f, 0x6e, 0x73, 0x65, 0x6e, 0x74, 0x3a, 0x77, 0x72, 0x69, 0x74, 0x65, 0x42, 0x63, 0x0a, 0x18,
	0x63, 0x6f, 0x6d, 0x2e, 0x77, 0x67, 0x74, 0x77, 0x6f, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x30,
	0x2e, 0x63, 0x6f, 0x6e, 0x73, 0x65, 0x6e, 0x74, 0x42, 0x0d, 0x43, 0x6f, 0x6e, 0x73, 0x65, 0x6e,
	0x74, 0x73, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x5a, 0x38, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e,
	0x63, 0x6f, 0x6d, 0x2f, 0x77, 0x6f, 0x72, 0x6b, 0x69, 0x6e, 0x67, 0x2d, 0x67, 0x72, 0x6f, 0x75,
	0x70, 0x2d, 0x74, 0x77, 0x6f, 0x2f, 0x77, 0x67, 0x74, 0x77, 0x6f, 0x61, 0x70, 0x69, 0x73, 0x2f,
	0x77, 0x67, 0x74, 0x77, 0x6f, 0x2f, 0x63, 0x6f, 0x6e, 0x73, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x76,
	0x30, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_wgtwo_consents_v0_consents_proto_rawDescOnce sync.Once
	file_wgtwo_consents_v0_consents_proto_rawDescData = file_wgtwo_consents_v0_consents_proto_rawDesc
)

func file_wgtwo_consents_v0_consents_proto_rawDescGZIP() []byte {
	file_wgtwo_consents_v0_consents_proto_rawDescOnce.Do(func() {
		file_wgtwo_consents_v0_consents_proto_rawDescData = protoimpl.X.CompressGZIP(file_wgtwo_consents_v0_consents_proto_rawDescData)
	})
	return file_wgtwo_consents_v0_consents_proto_rawDescData
}

var file_wgtwo_consents_v0_consents_proto_msgTypes = make([]protoimpl.MessageInfo, 10)
var file_wgtwo_consents_v0_consents_proto_goTypes = []interface{}{
	(*GetConsentsForSubscriptionRequest)(nil),    // 0: wgtwo.consents.v0.GetConsentsForSubscriptionRequest
	(*GetConsentsForSubscriptionResponse)(nil),   // 1: wgtwo.consents.v0.GetConsentsForSubscriptionResponse
	(*CreateConsentForSubscriptionRequest)(nil),  // 2: wgtwo.consents.v0.CreateConsentForSubscriptionRequest
	(*CreateConsentForSubscriptionResponse)(nil), // 3: wgtwo.consents.v0.CreateConsentForSubscriptionResponse
	(*RevokeConsentForSubscriptionRequest)(nil),  // 4: wgtwo.consents.v0.RevokeConsentForSubscriptionRequest
	(*RevokeConsentForSubscriptionResponse)(nil), // 5: wgtwo.consents.v0.RevokeConsentForSubscriptionResponse
	(*Consent)(nil),                   // 6: wgtwo.consents.v0.Consent
	(*ConsentOwner)(nil),              // 7: wgtwo.consents.v0.ConsentOwner
	(*Subscription)(nil),              // 8: wgtwo.consents.v0.Subscription
	(*Scope)(nil),                     // 9: wgtwo.consents.v0.Scope
	(*v0.SubscriptionIdentifier)(nil), // 10: wgtwo.common.v0.SubscriptionIdentifier
	(*v0.PhoneNumber)(nil),            // 11: wgtwo.common.v0.PhoneNumber
	(v0.StatusCode)(0),                // 12: wgtwo.common.v0.StatusCode
	(*v0.Tenant)(nil),                 // 13: wgtwo.common.v0.Tenant
}
var file_wgtwo_consents_v0_consents_proto_depIdxs = []int32{
	10, // 0: wgtwo.consents.v0.GetConsentsForSubscriptionRequest.id:type_name -> wgtwo.common.v0.SubscriptionIdentifier
	11, // 1: wgtwo.consents.v0.GetConsentsForSubscriptionRequest.phone_number:type_name -> wgtwo.common.v0.PhoneNumber
	6,  // 2: wgtwo.consents.v0.GetConsentsForSubscriptionResponse.consents:type_name -> wgtwo.consents.v0.Consent
	12, // 3: wgtwo.consents.v0.GetConsentsForSubscriptionResponse.status_code:type_name -> wgtwo.common.v0.StatusCode
	10, // 4: wgtwo.consents.v0.CreateConsentForSubscriptionRequest.id:type_name -> wgtwo.common.v0.SubscriptionIdentifier
	11, // 5: wgtwo.consents.v0.CreateConsentForSubscriptionRequest.phone_number:type_name -> wgtwo.common.v0.PhoneNumber
	12, // 6: wgtwo.consents.v0.CreateConsentForSubscriptionResponse.status_code:type_name -> wgtwo.common.v0.StatusCode
	10, // 7: wgtwo.consents.v0.RevokeConsentForSubscriptionRequest.id:type_name -> wgtwo.common.v0.SubscriptionIdentifier
	11, // 8: wgtwo.consents.v0.RevokeConsentForSubscriptionRequest.phone_number:type_name -> wgtwo.common.v0.PhoneNumber
	12, // 9: wgtwo.consents.v0.RevokeConsentForSubscriptionResponse.status_code:type_name -> wgtwo.common.v0.StatusCode
	7,  // 10: wgtwo.consents.v0.Consent.owner:type_name -> wgtwo.consents.v0.ConsentOwner
	9,  // 11: wgtwo.consents.v0.Consent.scopes:type_name -> wgtwo.consents.v0.Scope
	8,  // 12: wgtwo.consents.v0.ConsentOwner.subscription:type_name -> wgtwo.consents.v0.Subscription
	13, // 13: wgtwo.consents.v0.ConsentOwner.tenant:type_name -> wgtwo.common.v0.Tenant
	10, // 14: wgtwo.consents.v0.Subscription.subscription_identifier:type_name -> wgtwo.common.v0.SubscriptionIdentifier
	0,  // 15: wgtwo.consents.v0.ConsentService.GetConsentsForSubscription:input_type -> wgtwo.consents.v0.GetConsentsForSubscriptionRequest
	2,  // 16: wgtwo.consents.v0.ConsentService.CreateConsentForSubscription:input_type -> wgtwo.consents.v0.CreateConsentForSubscriptionRequest
	4,  // 17: wgtwo.consents.v0.ConsentService.RevokeConsentForSubscription:input_type -> wgtwo.consents.v0.RevokeConsentForSubscriptionRequest
	1,  // 18: wgtwo.consents.v0.ConsentService.GetConsentsForSubscription:output_type -> wgtwo.consents.v0.GetConsentsForSubscriptionResponse
	3,  // 19: wgtwo.consents.v0.ConsentService.CreateConsentForSubscription:output_type -> wgtwo.consents.v0.CreateConsentForSubscriptionResponse
	5,  // 20: wgtwo.consents.v0.ConsentService.RevokeConsentForSubscription:output_type -> wgtwo.consents.v0.RevokeConsentForSubscriptionResponse
	18, // [18:21] is the sub-list for method output_type
	15, // [15:18] is the sub-list for method input_type
	15, // [15:15] is the sub-list for extension type_name
	15, // [15:15] is the sub-list for extension extendee
	0,  // [0:15] is the sub-list for field type_name
}

func init() { file_wgtwo_consents_v0_consents_proto_init() }
func file_wgtwo_consents_v0_consents_proto_init() {
	if File_wgtwo_consents_v0_consents_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_wgtwo_consents_v0_consents_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetConsentsForSubscriptionRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_wgtwo_consents_v0_consents_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetConsentsForSubscriptionResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_wgtwo_consents_v0_consents_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateConsentForSubscriptionRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_wgtwo_consents_v0_consents_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateConsentForSubscriptionResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_wgtwo_consents_v0_consents_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RevokeConsentForSubscriptionRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_wgtwo_consents_v0_consents_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RevokeConsentForSubscriptionResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_wgtwo_consents_v0_consents_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Consent); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_wgtwo_consents_v0_consents_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ConsentOwner); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_wgtwo_consents_v0_consents_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Subscription); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_wgtwo_consents_v0_consents_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Scope); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_wgtwo_consents_v0_consents_proto_msgTypes[7].OneofWrappers = []interface{}{
		(*ConsentOwner_Subscription)(nil),
		(*ConsentOwner_Tenant)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_wgtwo_consents_v0_consents_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   10,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_wgtwo_consents_v0_consents_proto_goTypes,
		DependencyIndexes: file_wgtwo_consents_v0_consents_proto_depIdxs,
		MessageInfos:      file_wgtwo_consents_v0_consents_proto_msgTypes,
	}.Build()
	File_wgtwo_consents_v0_consents_proto = out.File
	file_wgtwo_consents_v0_consents_proto_rawDesc = nil
	file_wgtwo_consents_v0_consents_proto_goTypes = nil
	file_wgtwo_consents_v0_consents_proto_depIdxs = nil
}
