// Copyright 2021 Working Group Two AS
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//

// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             (unknown)
// source: wgtwo/consents/v0/consents.proto

package v0

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	ConsentService_GetConsentsForSubscription_FullMethodName   = "/wgtwo.consents.v0.ConsentService/GetConsentsForSubscription"
	ConsentService_CreateConsentForSubscription_FullMethodName = "/wgtwo.consents.v0.ConsentService/CreateConsentForSubscription"
	ConsentService_RevokeConsentForSubscription_FullMethodName = "/wgtwo.consents.v0.ConsentService/RevokeConsentForSubscription"
)

// ConsentServiceClient is the client API for ConsentService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ConsentServiceClient interface {
	GetConsentsForSubscription(ctx context.Context, in *GetConsentsForSubscriptionRequest, opts ...grpc.CallOption) (*GetConsentsForSubscriptionResponse, error)
	CreateConsentForSubscription(ctx context.Context, in *CreateConsentForSubscriptionRequest, opts ...grpc.CallOption) (*CreateConsentForSubscriptionResponse, error)
	RevokeConsentForSubscription(ctx context.Context, in *RevokeConsentForSubscriptionRequest, opts ...grpc.CallOption) (*RevokeConsentForSubscriptionResponse, error)
}

type consentServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewConsentServiceClient(cc grpc.ClientConnInterface) ConsentServiceClient {
	return &consentServiceClient{cc}
}

func (c *consentServiceClient) GetConsentsForSubscription(ctx context.Context, in *GetConsentsForSubscriptionRequest, opts ...grpc.CallOption) (*GetConsentsForSubscriptionResponse, error) {
	out := new(GetConsentsForSubscriptionResponse)
	err := c.cc.Invoke(ctx, ConsentService_GetConsentsForSubscription_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *consentServiceClient) CreateConsentForSubscription(ctx context.Context, in *CreateConsentForSubscriptionRequest, opts ...grpc.CallOption) (*CreateConsentForSubscriptionResponse, error) {
	out := new(CreateConsentForSubscriptionResponse)
	err := c.cc.Invoke(ctx, ConsentService_CreateConsentForSubscription_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *consentServiceClient) RevokeConsentForSubscription(ctx context.Context, in *RevokeConsentForSubscriptionRequest, opts ...grpc.CallOption) (*RevokeConsentForSubscriptionResponse, error) {
	out := new(RevokeConsentForSubscriptionResponse)
	err := c.cc.Invoke(ctx, ConsentService_RevokeConsentForSubscription_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ConsentServiceServer is the server API for ConsentService service.
// All implementations should embed UnimplementedConsentServiceServer
// for forward compatibility
type ConsentServiceServer interface {
	GetConsentsForSubscription(context.Context, *GetConsentsForSubscriptionRequest) (*GetConsentsForSubscriptionResponse, error)
	CreateConsentForSubscription(context.Context, *CreateConsentForSubscriptionRequest) (*CreateConsentForSubscriptionResponse, error)
	RevokeConsentForSubscription(context.Context, *RevokeConsentForSubscriptionRequest) (*RevokeConsentForSubscriptionResponse, error)
}

// UnimplementedConsentServiceServer should be embedded to have forward compatible implementations.
type UnimplementedConsentServiceServer struct {
}

func (UnimplementedConsentServiceServer) GetConsentsForSubscription(context.Context, *GetConsentsForSubscriptionRequest) (*GetConsentsForSubscriptionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetConsentsForSubscription not implemented")
}
func (UnimplementedConsentServiceServer) CreateConsentForSubscription(context.Context, *CreateConsentForSubscriptionRequest) (*CreateConsentForSubscriptionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateConsentForSubscription not implemented")
}
func (UnimplementedConsentServiceServer) RevokeConsentForSubscription(context.Context, *RevokeConsentForSubscriptionRequest) (*RevokeConsentForSubscriptionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RevokeConsentForSubscription not implemented")
}

// UnsafeConsentServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ConsentServiceServer will
// result in compilation errors.
type UnsafeConsentServiceServer interface {
	mustEmbedUnimplementedConsentServiceServer()
}

func RegisterConsentServiceServer(s grpc.ServiceRegistrar, srv ConsentServiceServer) {
	s.RegisterService(&ConsentService_ServiceDesc, srv)
}

func _ConsentService_GetConsentsForSubscription_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetConsentsForSubscriptionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ConsentServiceServer).GetConsentsForSubscription(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ConsentService_GetConsentsForSubscription_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ConsentServiceServer).GetConsentsForSubscription(ctx, req.(*GetConsentsForSubscriptionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ConsentService_CreateConsentForSubscription_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateConsentForSubscriptionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ConsentServiceServer).CreateConsentForSubscription(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ConsentService_CreateConsentForSubscription_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ConsentServiceServer).CreateConsentForSubscription(ctx, req.(*CreateConsentForSubscriptionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ConsentService_RevokeConsentForSubscription_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RevokeConsentForSubscriptionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ConsentServiceServer).RevokeConsentForSubscription(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ConsentService_RevokeConsentForSubscription_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ConsentServiceServer).RevokeConsentForSubscription(ctx, req.(*RevokeConsentForSubscriptionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// ConsentService_ServiceDesc is the grpc.ServiceDesc for ConsentService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ConsentService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "wgtwo.consents.v0.ConsentService",
	HandlerType: (*ConsentServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetConsentsForSubscription",
			Handler:    _ConsentService_GetConsentsForSubscription_Handler,
		},
		{
			MethodName: "CreateConsentForSubscription",
			Handler:    _ConsentService_CreateConsentForSubscription_Handler,
		},
		{
			MethodName: "RevokeConsentForSubscription",
			Handler:    _ConsentService_RevokeConsentForSubscription_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "wgtwo/consents/v0/consents.proto",
}
