// Copyright 2021 [Working Group Two]/[Cisco Systems]
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.8
// 	protoc        (unknown)
// source: wgtwo/consents/v1/consent_events.proto

package v1

import (
	_ "github.com/working-group-two/wgtwoapis/wgtwo/annotations"
	v11 "github.com/working-group-two/wgtwoapis/wgtwo/common/v1"
	v1 "github.com/working-group-two/wgtwoapis/wgtwo/events/v1"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// Request message for streaming consent change events.
type StreamConsentChangeEventsRequest struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// The stream configuration.
	StreamConfiguration *v1.StreamConfiguration `protobuf:"bytes,1,opt,name=stream_configuration,json=streamConfiguration,proto3" json:"stream_configuration,omitempty"`
	unknownFields       protoimpl.UnknownFields
	sizeCache           protoimpl.SizeCache
}

func (x *StreamConsentChangeEventsRequest) Reset() {
	*x = StreamConsentChangeEventsRequest{}
	mi := &file_wgtwo_consents_v1_consent_events_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *StreamConsentChangeEventsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StreamConsentChangeEventsRequest) ProtoMessage() {}

func (x *StreamConsentChangeEventsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_wgtwo_consents_v1_consent_events_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StreamConsentChangeEventsRequest.ProtoReflect.Descriptor instead.
func (*StreamConsentChangeEventsRequest) Descriptor() ([]byte, []int) {
	return file_wgtwo_consents_v1_consent_events_proto_rawDescGZIP(), []int{0}
}

func (x *StreamConsentChangeEventsRequest) GetStreamConfiguration() *v1.StreamConfiguration {
	if x != nil {
		return x.StreamConfiguration
	}
	return nil
}

// Response message for streaming consent change events.
type StreamConsentChangeEventsResponse struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Metadata for the stream.
	Metadata *v1.Metadata `protobuf:"bytes,1,opt,name=metadata,proto3" json:"metadata,omitempty"`
	// The consent change event.
	ConsentChangeEvent *ConsentChangeEvent `protobuf:"bytes,2,opt,name=consent_change_event,json=consentChangeEvent,proto3" json:"consent_change_event,omitempty"`
	unknownFields      protoimpl.UnknownFields
	sizeCache          protoimpl.SizeCache
}

func (x *StreamConsentChangeEventsResponse) Reset() {
	*x = StreamConsentChangeEventsResponse{}
	mi := &file_wgtwo_consents_v1_consent_events_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *StreamConsentChangeEventsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StreamConsentChangeEventsResponse) ProtoMessage() {}

func (x *StreamConsentChangeEventsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_wgtwo_consents_v1_consent_events_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StreamConsentChangeEventsResponse.ProtoReflect.Descriptor instead.
func (*StreamConsentChangeEventsResponse) Descriptor() ([]byte, []int) {
	return file_wgtwo_consents_v1_consent_events_proto_rawDescGZIP(), []int{1}
}

func (x *StreamConsentChangeEventsResponse) GetMetadata() *v1.Metadata {
	if x != nil {
		return x.Metadata
	}
	return nil
}

func (x *StreamConsentChangeEventsResponse) GetConsentChangeEvent() *ConsentChangeEvent {
	if x != nil {
		return x.ConsentChangeEvent
	}
	return nil
}

// Request message for acknowledging a consent change event.
type AckConsentChangeEventRequest struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Used to identify the event to acknowledge.
	AckInfo       *v1.AckInfo `protobuf:"bytes,1,opt,name=ack_info,json=ackInfo,proto3" json:"ack_info,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *AckConsentChangeEventRequest) Reset() {
	*x = AckConsentChangeEventRequest{}
	mi := &file_wgtwo_consents_v1_consent_events_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *AckConsentChangeEventRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AckConsentChangeEventRequest) ProtoMessage() {}

func (x *AckConsentChangeEventRequest) ProtoReflect() protoreflect.Message {
	mi := &file_wgtwo_consents_v1_consent_events_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AckConsentChangeEventRequest.ProtoReflect.Descriptor instead.
func (*AckConsentChangeEventRequest) Descriptor() ([]byte, []int) {
	return file_wgtwo_consents_v1_consent_events_proto_rawDescGZIP(), []int{2}
}

func (x *AckConsentChangeEventRequest) GetAckInfo() *v1.AckInfo {
	if x != nil {
		return x.AckInfo
	}
	return nil
}

// Response message for acknowledging a consent change event.
type AckConsentChangeEventResponse struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// The status response (success/failure) of the acknowledgement.
	AckStatus     *v1.AckStatus `protobuf:"bytes,1,opt,name=ack_status,json=ackStatus,proto3" json:"ack_status,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *AckConsentChangeEventResponse) Reset() {
	*x = AckConsentChangeEventResponse{}
	mi := &file_wgtwo_consents_v1_consent_events_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *AckConsentChangeEventResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AckConsentChangeEventResponse) ProtoMessage() {}

func (x *AckConsentChangeEventResponse) ProtoReflect() protoreflect.Message {
	mi := &file_wgtwo_consents_v1_consent_events_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AckConsentChangeEventResponse.ProtoReflect.Descriptor instead.
func (*AckConsentChangeEventResponse) Descriptor() ([]byte, []int) {
	return file_wgtwo_consents_v1_consent_events_proto_rawDescGZIP(), []int{3}
}

func (x *AckConsentChangeEventResponse) GetAckStatus() *v1.AckStatus {
	if x != nil {
		return x.AckStatus
	}
	return nil
}

// The consent change event message.
type ConsentChangeEvent struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// The type of the event.
	//
	// Types that are valid to be assigned to Type:
	//
	//	*ConsentChangeEvent_Added
	//	*ConsentChangeEvent_Updated
	//	*ConsentChangeEvent_Revoked
	Type isConsentChangeEvent_Type `protobuf_oneof:"type"`
	// The target of the event.
	//
	// Types that are valid to be assigned to Target:
	//
	//	*ConsentChangeEvent_Number
	//	*ConsentChangeEvent_Tenant
	Target        isConsentChangeEvent_Target `protobuf_oneof:"target"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ConsentChangeEvent) Reset() {
	*x = ConsentChangeEvent{}
	mi := &file_wgtwo_consents_v1_consent_events_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ConsentChangeEvent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ConsentChangeEvent) ProtoMessage() {}

func (x *ConsentChangeEvent) ProtoReflect() protoreflect.Message {
	mi := &file_wgtwo_consents_v1_consent_events_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ConsentChangeEvent.ProtoReflect.Descriptor instead.
func (*ConsentChangeEvent) Descriptor() ([]byte, []int) {
	return file_wgtwo_consents_v1_consent_events_proto_rawDescGZIP(), []int{4}
}

func (x *ConsentChangeEvent) GetType() isConsentChangeEvent_Type {
	if x != nil {
		return x.Type
	}
	return nil
}

func (x *ConsentChangeEvent) GetAdded() *ConsentAdded {
	if x != nil {
		if x, ok := x.Type.(*ConsentChangeEvent_Added); ok {
			return x.Added
		}
	}
	return nil
}

func (x *ConsentChangeEvent) GetUpdated() *ConsentUpdated {
	if x != nil {
		if x, ok := x.Type.(*ConsentChangeEvent_Updated); ok {
			return x.Updated
		}
	}
	return nil
}

func (x *ConsentChangeEvent) GetRevoked() *ConsentRevoked {
	if x != nil {
		if x, ok := x.Type.(*ConsentChangeEvent_Revoked); ok {
			return x.Revoked
		}
	}
	return nil
}

func (x *ConsentChangeEvent) GetTarget() isConsentChangeEvent_Target {
	if x != nil {
		return x.Target
	}
	return nil
}

func (x *ConsentChangeEvent) GetNumber() *v11.E164 {
	if x != nil {
		if x, ok := x.Target.(*ConsentChangeEvent_Number); ok {
			return x.Number
		}
	}
	return nil
}

func (x *ConsentChangeEvent) GetTenant() string {
	if x != nil {
		if x, ok := x.Target.(*ConsentChangeEvent_Tenant); ok {
			return x.Tenant
		}
	}
	return ""
}

type isConsentChangeEvent_Type interface {
	isConsentChangeEvent_Type()
}

type ConsentChangeEvent_Added struct {
	// A consent was added.
	Added *ConsentAdded `protobuf:"bytes,1,opt,name=added,proto3,oneof"`
}

type ConsentChangeEvent_Updated struct {
	// A consent was updated.
	Updated *ConsentUpdated `protobuf:"bytes,2,opt,name=updated,proto3,oneof"`
}

type ConsentChangeEvent_Revoked struct {
	// A consent was revoked.
	Revoked *ConsentRevoked `protobuf:"bytes,3,opt,name=revoked,proto3,oneof"`
}

func (*ConsentChangeEvent_Added) isConsentChangeEvent_Type() {}

func (*ConsentChangeEvent_Updated) isConsentChangeEvent_Type() {}

func (*ConsentChangeEvent_Revoked) isConsentChangeEvent_Type() {}

type isConsentChangeEvent_Target interface {
	isConsentChangeEvent_Target()
}

type ConsentChangeEvent_Number struct {
	// The international number of the subscriber.
	Number *v11.E164 `protobuf:"bytes,4,opt,name=number,proto3,oneof"`
}

type ConsentChangeEvent_Tenant struct {
	// The operator (tenant) on the platform.
	Tenant string `protobuf:"bytes,5,opt,name=tenant,proto3,oneof"`
}

func (*ConsentChangeEvent_Number) isConsentChangeEvent_Target() {}

func (*ConsentChangeEvent_Tenant) isConsentChangeEvent_Target() {}

// The consent added event message.
type ConsentAdded struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// The scopes for the consent.
	Scopes        []string `protobuf:"bytes,1,rep,name=scopes,proto3" json:"scopes,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ConsentAdded) Reset() {
	*x = ConsentAdded{}
	mi := &file_wgtwo_consents_v1_consent_events_proto_msgTypes[5]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ConsentAdded) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ConsentAdded) ProtoMessage() {}

func (x *ConsentAdded) ProtoReflect() protoreflect.Message {
	mi := &file_wgtwo_consents_v1_consent_events_proto_msgTypes[5]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ConsentAdded.ProtoReflect.Descriptor instead.
func (*ConsentAdded) Descriptor() ([]byte, []int) {
	return file_wgtwo_consents_v1_consent_events_proto_rawDescGZIP(), []int{5}
}

func (x *ConsentAdded) GetScopes() []string {
	if x != nil {
		return x.Scopes
	}
	return nil
}

// The consent updated event message.
type ConsentUpdated struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// The updated scopes for the consent.
	Scopes        []string `protobuf:"bytes,1,rep,name=scopes,proto3" json:"scopes,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ConsentUpdated) Reset() {
	*x = ConsentUpdated{}
	mi := &file_wgtwo_consents_v1_consent_events_proto_msgTypes[6]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ConsentUpdated) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ConsentUpdated) ProtoMessage() {}

func (x *ConsentUpdated) ProtoReflect() protoreflect.Message {
	mi := &file_wgtwo_consents_v1_consent_events_proto_msgTypes[6]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ConsentUpdated.ProtoReflect.Descriptor instead.
func (*ConsentUpdated) Descriptor() ([]byte, []int) {
	return file_wgtwo_consents_v1_consent_events_proto_rawDescGZIP(), []int{6}
}

func (x *ConsentUpdated) GetScopes() []string {
	if x != nil {
		return x.Scopes
	}
	return nil
}

// The consent revoked event message.
type ConsentRevoked struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ConsentRevoked) Reset() {
	*x = ConsentRevoked{}
	mi := &file_wgtwo_consents_v1_consent_events_proto_msgTypes[7]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ConsentRevoked) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ConsentRevoked) ProtoMessage() {}

func (x *ConsentRevoked) ProtoReflect() protoreflect.Message {
	mi := &file_wgtwo_consents_v1_consent_events_proto_msgTypes[7]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ConsentRevoked.ProtoReflect.Descriptor instead.
func (*ConsentRevoked) Descriptor() ([]byte, []int) {
	return file_wgtwo_consents_v1_consent_events_proto_rawDescGZIP(), []int{7}
}

var File_wgtwo_consents_v1_consent_events_proto protoreflect.FileDescriptor

const file_wgtwo_consents_v1_consent_events_proto_rawDesc = "" +
	"\n" +
	"&wgtwo/consents/v1/consent_events.proto\x12\x11wgtwo.consents.v1\x1a#wgtwo/annotations/annotations.proto\x1a!wgtwo/common/v1/phonenumber.proto\x1a\x1cwgtwo/events/v1/events.proto\"{\n" +
	" StreamConsentChangeEventsRequest\x12W\n" +
	"\x14stream_configuration\x18\x01 \x01(\v2$.wgtwo.events.v1.StreamConfigurationR\x13streamConfiguration\"\xb3\x01\n" +
	"!StreamConsentChangeEventsResponse\x125\n" +
	"\bmetadata\x18\x01 \x01(\v2\x19.wgtwo.events.v1.MetadataR\bmetadata\x12W\n" +
	"\x14consent_change_event\x18\x02 \x01(\v2%.wgtwo.consents.v1.ConsentChangeEventR\x12consentChangeEvent\"S\n" +
	"\x1cAckConsentChangeEventRequest\x123\n" +
	"\back_info\x18\x01 \x01(\v2\x18.wgtwo.events.v1.AckInfoR\aackInfo\"Z\n" +
	"\x1dAckConsentChangeEventResponse\x129\n" +
	"\n" +
	"ack_status\x18\x01 \x01(\v2\x1a.wgtwo.events.v1.AckStatusR\tackStatus\"\xa8\x02\n" +
	"\x12ConsentChangeEvent\x127\n" +
	"\x05added\x18\x01 \x01(\v2\x1f.wgtwo.consents.v1.ConsentAddedH\x00R\x05added\x12=\n" +
	"\aupdated\x18\x02 \x01(\v2!.wgtwo.consents.v1.ConsentUpdatedH\x00R\aupdated\x12=\n" +
	"\arevoked\x18\x03 \x01(\v2!.wgtwo.consents.v1.ConsentRevokedH\x00R\arevoked\x12/\n" +
	"\x06number\x18\x04 \x01(\v2\x15.wgtwo.common.v1.E164H\x01R\x06number\x12\x18\n" +
	"\x06tenant\x18\x05 \x01(\tH\x01R\x06tenantB\x06\n" +
	"\x04typeB\b\n" +
	"\x06target\"&\n" +
	"\fConsentAdded\x12\x16\n" +
	"\x06scopes\x18\x01 \x03(\tR\x06scopes\"(\n" +
	"\x0eConsentUpdated\x12\x16\n" +
	"\x06scopes\x18\x01 \x03(\tR\x06scopes\"\x10\n" +
	"\x0eConsentRevoked2\xa9\x02\n" +
	"\x13ConsentEventService\x12\x8e\x01\n" +
	"\x19StreamConsentChangeEvents\x123.wgtwo.consents.v1.StreamConsentChangeEventsRequest\x1a4.wgtwo.consents.v1.StreamConsentChangeEventsResponse\"\x04\xea\xb5\x18\x000\x01\x12\x80\x01\n" +
	"\x15AckConsentChangeEvent\x12/.wgtwo.consents.v1.AckConsentChangeEventRequest\x1a0.wgtwo.consents.v1.AckConsentChangeEventResponse\"\x04\xea\xb5\x18\x00B\xcb\x01\n" +
	"\x15com.wgtwo.consents.v1B\x12ConsentEventsProtoP\x01Z8github.com/working-group-two/wgtwoapis/wgtwo/consents/v1\xa2\x02\x03WCX\xaa\x02\x11Wgtwo.Consents.V1\xca\x02\x11Wgtwo\\Consents\\V1\xe2\x02\x1dWgtwo\\Consents\\V1\\GPBMetadata\xea\x02\x13Wgtwo::Consents::V1b\x06proto3"

var (
	file_wgtwo_consents_v1_consent_events_proto_rawDescOnce sync.Once
	file_wgtwo_consents_v1_consent_events_proto_rawDescData []byte
)

func file_wgtwo_consents_v1_consent_events_proto_rawDescGZIP() []byte {
	file_wgtwo_consents_v1_consent_events_proto_rawDescOnce.Do(func() {
		file_wgtwo_consents_v1_consent_events_proto_rawDescData = protoimpl.X.CompressGZIP(unsafe.Slice(unsafe.StringData(file_wgtwo_consents_v1_consent_events_proto_rawDesc), len(file_wgtwo_consents_v1_consent_events_proto_rawDesc)))
	})
	return file_wgtwo_consents_v1_consent_events_proto_rawDescData
}

var file_wgtwo_consents_v1_consent_events_proto_msgTypes = make([]protoimpl.MessageInfo, 8)
var file_wgtwo_consents_v1_consent_events_proto_goTypes = []any{
	(*StreamConsentChangeEventsRequest)(nil),  // 0: wgtwo.consents.v1.StreamConsentChangeEventsRequest
	(*StreamConsentChangeEventsResponse)(nil), // 1: wgtwo.consents.v1.StreamConsentChangeEventsResponse
	(*AckConsentChangeEventRequest)(nil),      // 2: wgtwo.consents.v1.AckConsentChangeEventRequest
	(*AckConsentChangeEventResponse)(nil),     // 3: wgtwo.consents.v1.AckConsentChangeEventResponse
	(*ConsentChangeEvent)(nil),                // 4: wgtwo.consents.v1.ConsentChangeEvent
	(*ConsentAdded)(nil),                      // 5: wgtwo.consents.v1.ConsentAdded
	(*ConsentUpdated)(nil),                    // 6: wgtwo.consents.v1.ConsentUpdated
	(*ConsentRevoked)(nil),                    // 7: wgtwo.consents.v1.ConsentRevoked
	(*v1.StreamConfiguration)(nil),            // 8: wgtwo.events.v1.StreamConfiguration
	(*v1.Metadata)(nil),                       // 9: wgtwo.events.v1.Metadata
	(*v1.AckInfo)(nil),                        // 10: wgtwo.events.v1.AckInfo
	(*v1.AckStatus)(nil),                      // 11: wgtwo.events.v1.AckStatus
	(*v11.E164)(nil),                          // 12: wgtwo.common.v1.E164
}
var file_wgtwo_consents_v1_consent_events_proto_depIdxs = []int32{
	8,  // 0: wgtwo.consents.v1.StreamConsentChangeEventsRequest.stream_configuration:type_name -> wgtwo.events.v1.StreamConfiguration
	9,  // 1: wgtwo.consents.v1.StreamConsentChangeEventsResponse.metadata:type_name -> wgtwo.events.v1.Metadata
	4,  // 2: wgtwo.consents.v1.StreamConsentChangeEventsResponse.consent_change_event:type_name -> wgtwo.consents.v1.ConsentChangeEvent
	10, // 3: wgtwo.consents.v1.AckConsentChangeEventRequest.ack_info:type_name -> wgtwo.events.v1.AckInfo
	11, // 4: wgtwo.consents.v1.AckConsentChangeEventResponse.ack_status:type_name -> wgtwo.events.v1.AckStatus
	5,  // 5: wgtwo.consents.v1.ConsentChangeEvent.added:type_name -> wgtwo.consents.v1.ConsentAdded
	6,  // 6: wgtwo.consents.v1.ConsentChangeEvent.updated:type_name -> wgtwo.consents.v1.ConsentUpdated
	7,  // 7: wgtwo.consents.v1.ConsentChangeEvent.revoked:type_name -> wgtwo.consents.v1.ConsentRevoked
	12, // 8: wgtwo.consents.v1.ConsentChangeEvent.number:type_name -> wgtwo.common.v1.E164
	0,  // 9: wgtwo.consents.v1.ConsentEventService.StreamConsentChangeEvents:input_type -> wgtwo.consents.v1.StreamConsentChangeEventsRequest
	2,  // 10: wgtwo.consents.v1.ConsentEventService.AckConsentChangeEvent:input_type -> wgtwo.consents.v1.AckConsentChangeEventRequest
	1,  // 11: wgtwo.consents.v1.ConsentEventService.StreamConsentChangeEvents:output_type -> wgtwo.consents.v1.StreamConsentChangeEventsResponse
	3,  // 12: wgtwo.consents.v1.ConsentEventService.AckConsentChangeEvent:output_type -> wgtwo.consents.v1.AckConsentChangeEventResponse
	11, // [11:13] is the sub-list for method output_type
	9,  // [9:11] is the sub-list for method input_type
	9,  // [9:9] is the sub-list for extension type_name
	9,  // [9:9] is the sub-list for extension extendee
	0,  // [0:9] is the sub-list for field type_name
}

func init() { file_wgtwo_consents_v1_consent_events_proto_init() }
func file_wgtwo_consents_v1_consent_events_proto_init() {
	if File_wgtwo_consents_v1_consent_events_proto != nil {
		return
	}
	file_wgtwo_consents_v1_consent_events_proto_msgTypes[4].OneofWrappers = []any{
		(*ConsentChangeEvent_Added)(nil),
		(*ConsentChangeEvent_Updated)(nil),
		(*ConsentChangeEvent_Revoked)(nil),
		(*ConsentChangeEvent_Number)(nil),
		(*ConsentChangeEvent_Tenant)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_wgtwo_consents_v1_consent_events_proto_rawDesc), len(file_wgtwo_consents_v1_consent_events_proto_rawDesc)),
			NumEnums:      0,
			NumMessages:   8,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_wgtwo_consents_v1_consent_events_proto_goTypes,
		DependencyIndexes: file_wgtwo_consents_v1_consent_events_proto_depIdxs,
		MessageInfos:      file_wgtwo_consents_v1_consent_events_proto_msgTypes,
	}.Build()
	File_wgtwo_consents_v1_consent_events_proto = out.File
	file_wgtwo_consents_v1_consent_events_proto_goTypes = nil
	file_wgtwo_consents_v1_consent_events_proto_depIdxs = nil
}
