// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             (unknown)
// source: wgtwo/consents/v1/consent_events.proto

package v1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// ConsentEventServiceClient is the client API for ConsentEventService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ConsentEventServiceClient interface {
	StreamConsentChangeEvents(ctx context.Context, in *StreamConsentChangeEventsRequest, opts ...grpc.CallOption) (ConsentEventService_StreamConsentChangeEventsClient, error)
	AckConsentChangeEvent(ctx context.Context, in *AckConsentChangeEventRequest, opts ...grpc.CallOption) (*AckConsentChangeEventResponse, error)
}

type consentEventServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewConsentEventServiceClient(cc grpc.ClientConnInterface) ConsentEventServiceClient {
	return &consentEventServiceClient{cc}
}

func (c *consentEventServiceClient) StreamConsentChangeEvents(ctx context.Context, in *StreamConsentChangeEventsRequest, opts ...grpc.CallOption) (ConsentEventService_StreamConsentChangeEventsClient, error) {
	stream, err := c.cc.NewStream(ctx, &ConsentEventService_ServiceDesc.Streams[0], "/wgtwo.consents.v1.ConsentEventService/StreamConsentChangeEvents", opts...)
	if err != nil {
		return nil, err
	}
	x := &consentEventServiceStreamConsentChangeEventsClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type ConsentEventService_StreamConsentChangeEventsClient interface {
	Recv() (*StreamConsentChangeEventsResponse, error)
	grpc.ClientStream
}

type consentEventServiceStreamConsentChangeEventsClient struct {
	grpc.ClientStream
}

func (x *consentEventServiceStreamConsentChangeEventsClient) Recv() (*StreamConsentChangeEventsResponse, error) {
	m := new(StreamConsentChangeEventsResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *consentEventServiceClient) AckConsentChangeEvent(ctx context.Context, in *AckConsentChangeEventRequest, opts ...grpc.CallOption) (*AckConsentChangeEventResponse, error) {
	out := new(AckConsentChangeEventResponse)
	err := c.cc.Invoke(ctx, "/wgtwo.consents.v1.ConsentEventService/AckConsentChangeEvent", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ConsentEventServiceServer is the server API for ConsentEventService service.
// All implementations should embed UnimplementedConsentEventServiceServer
// for forward compatibility
type ConsentEventServiceServer interface {
	StreamConsentChangeEvents(*StreamConsentChangeEventsRequest, ConsentEventService_StreamConsentChangeEventsServer) error
	AckConsentChangeEvent(context.Context, *AckConsentChangeEventRequest) (*AckConsentChangeEventResponse, error)
}

// UnimplementedConsentEventServiceServer should be embedded to have forward compatible implementations.
type UnimplementedConsentEventServiceServer struct {
}

func (UnimplementedConsentEventServiceServer) StreamConsentChangeEvents(*StreamConsentChangeEventsRequest, ConsentEventService_StreamConsentChangeEventsServer) error {
	return status.Errorf(codes.Unimplemented, "method StreamConsentChangeEvents not implemented")
}
func (UnimplementedConsentEventServiceServer) AckConsentChangeEvent(context.Context, *AckConsentChangeEventRequest) (*AckConsentChangeEventResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AckConsentChangeEvent not implemented")
}

// UnsafeConsentEventServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ConsentEventServiceServer will
// result in compilation errors.
type UnsafeConsentEventServiceServer interface {
	mustEmbedUnimplementedConsentEventServiceServer()
}

func RegisterConsentEventServiceServer(s grpc.ServiceRegistrar, srv ConsentEventServiceServer) {
	s.RegisterService(&ConsentEventService_ServiceDesc, srv)
}

func _ConsentEventService_StreamConsentChangeEvents_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(StreamConsentChangeEventsRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(ConsentEventServiceServer).StreamConsentChangeEvents(m, &consentEventServiceStreamConsentChangeEventsServer{stream})
}

type ConsentEventService_StreamConsentChangeEventsServer interface {
	Send(*StreamConsentChangeEventsResponse) error
	grpc.ServerStream
}

type consentEventServiceStreamConsentChangeEventsServer struct {
	grpc.ServerStream
}

func (x *consentEventServiceStreamConsentChangeEventsServer) Send(m *StreamConsentChangeEventsResponse) error {
	return x.ServerStream.SendMsg(m)
}

func _ConsentEventService_AckConsentChangeEvent_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AckConsentChangeEventRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ConsentEventServiceServer).AckConsentChangeEvent(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/wgtwo.consents.v1.ConsentEventService/AckConsentChangeEvent",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ConsentEventServiceServer).AckConsentChangeEvent(ctx, req.(*AckConsentChangeEventRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// ConsentEventService_ServiceDesc is the grpc.ServiceDesc for ConsentEventService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ConsentEventService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "wgtwo.consents.v1.ConsentEventService",
	HandlerType: (*ConsentEventServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "AckConsentChangeEvent",
			Handler:    _ConsentEventService_AckConsentChangeEvent_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "StreamConsentChangeEvents",
			Handler:       _ConsentEventService_StreamConsentChangeEvents_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "wgtwo/consents/v1/consent_events.proto",
}
