// Copyright 2021 [Working Group Two]/[Cisco Systems]
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//

// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             (unknown)
// source: wgtwo/consents/v1/consent_events.proto

package v1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	ConsentEventService_StreamConsentChangeEvents_FullMethodName = "/wgtwo.consents.v1.ConsentEventService/StreamConsentChangeEvents"
	ConsentEventService_AckConsentChangeEvent_FullMethodName     = "/wgtwo.consents.v1.ConsentEventService/AckConsentChangeEvent"
)

// ConsentEventServiceClient is the client API for ConsentEventService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// Consent events are events triggered by granting, updating or revoking consents for your product, either for a single
// user or for an operator. The events can originate from:
//
// - Bundling of your product for a subscriber
// - Preview consent added by Cisco on your behalf
// - Operator consent covering all subscribers for an operator
// - Subscriber signing up to your product
type ConsentEventServiceClient interface {
	// Stream consent change events.
	StreamConsentChangeEvents(ctx context.Context, in *StreamConsentChangeEventsRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[StreamConsentChangeEventsResponse], error)
	// Acknowledge a consent change event.
	AckConsentChangeEvent(ctx context.Context, in *AckConsentChangeEventRequest, opts ...grpc.CallOption) (*AckConsentChangeEventResponse, error)
}

type consentEventServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewConsentEventServiceClient(cc grpc.ClientConnInterface) ConsentEventServiceClient {
	return &consentEventServiceClient{cc}
}

func (c *consentEventServiceClient) StreamConsentChangeEvents(ctx context.Context, in *StreamConsentChangeEventsRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[StreamConsentChangeEventsResponse], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &ConsentEventService_ServiceDesc.Streams[0], ConsentEventService_StreamConsentChangeEvents_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[StreamConsentChangeEventsRequest, StreamConsentChangeEventsResponse]{ClientStream: stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type ConsentEventService_StreamConsentChangeEventsClient = grpc.ServerStreamingClient[StreamConsentChangeEventsResponse]

func (c *consentEventServiceClient) AckConsentChangeEvent(ctx context.Context, in *AckConsentChangeEventRequest, opts ...grpc.CallOption) (*AckConsentChangeEventResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(AckConsentChangeEventResponse)
	err := c.cc.Invoke(ctx, ConsentEventService_AckConsentChangeEvent_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ConsentEventServiceServer is the server API for ConsentEventService service.
// All implementations should embed UnimplementedConsentEventServiceServer
// for forward compatibility.
//
// Consent events are events triggered by granting, updating or revoking consents for your product, either for a single
// user or for an operator. The events can originate from:
//
// - Bundling of your product for a subscriber
// - Preview consent added by Cisco on your behalf
// - Operator consent covering all subscribers for an operator
// - Subscriber signing up to your product
type ConsentEventServiceServer interface {
	// Stream consent change events.
	StreamConsentChangeEvents(*StreamConsentChangeEventsRequest, grpc.ServerStreamingServer[StreamConsentChangeEventsResponse]) error
	// Acknowledge a consent change event.
	AckConsentChangeEvent(context.Context, *AckConsentChangeEventRequest) (*AckConsentChangeEventResponse, error)
}

// UnimplementedConsentEventServiceServer should be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedConsentEventServiceServer struct{}

func (UnimplementedConsentEventServiceServer) StreamConsentChangeEvents(*StreamConsentChangeEventsRequest, grpc.ServerStreamingServer[StreamConsentChangeEventsResponse]) error {
	return status.Errorf(codes.Unimplemented, "method StreamConsentChangeEvents not implemented")
}
func (UnimplementedConsentEventServiceServer) AckConsentChangeEvent(context.Context, *AckConsentChangeEventRequest) (*AckConsentChangeEventResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AckConsentChangeEvent not implemented")
}
func (UnimplementedConsentEventServiceServer) testEmbeddedByValue() {}

// UnsafeConsentEventServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ConsentEventServiceServer will
// result in compilation errors.
type UnsafeConsentEventServiceServer interface {
	mustEmbedUnimplementedConsentEventServiceServer()
}

func RegisterConsentEventServiceServer(s grpc.ServiceRegistrar, srv ConsentEventServiceServer) {
	// If the following call pancis, it indicates UnimplementedConsentEventServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&ConsentEventService_ServiceDesc, srv)
}

func _ConsentEventService_StreamConsentChangeEvents_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(StreamConsentChangeEventsRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(ConsentEventServiceServer).StreamConsentChangeEvents(m, &grpc.GenericServerStream[StreamConsentChangeEventsRequest, StreamConsentChangeEventsResponse]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type ConsentEventService_StreamConsentChangeEventsServer = grpc.ServerStreamingServer[StreamConsentChangeEventsResponse]

func _ConsentEventService_AckConsentChangeEvent_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AckConsentChangeEventRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ConsentEventServiceServer).AckConsentChangeEvent(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ConsentEventService_AckConsentChangeEvent_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ConsentEventServiceServer).AckConsentChangeEvent(ctx, req.(*AckConsentChangeEventRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// ConsentEventService_ServiceDesc is the grpc.ServiceDesc for ConsentEventService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ConsentEventService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "wgtwo.consents.v1.ConsentEventService",
	HandlerType: (*ConsentEventServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "AckConsentChangeEvent",
			Handler:    _ConsentEventService_AckConsentChangeEvent_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "StreamConsentChangeEvents",
			Handler:       _ConsentEventService_StreamConsentChangeEvents_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "wgtwo/consents/v1/consent_events.proto",
}
