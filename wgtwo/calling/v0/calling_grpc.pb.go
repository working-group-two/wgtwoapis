// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package v0

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion7

// CallingServiceClient is the client API for CallingService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type CallingServiceClient interface {
	StartCall(ctx context.Context, opts ...grpc.CallOption) (CallingService_StartCallClient, error)
	TransferCall(ctx context.Context, in *TransferCallRequest, opts ...grpc.CallOption) (*TransferCallResponse, error)
	SendDtmf(ctx context.Context, in *SendDtmfRequest, opts ...grpc.CallOption) (*SendDtmfResponse, error)
	HangupCall(ctx context.Context, in *HangupCallRequest, opts ...grpc.CallOption) (*HangupCallResponse, error)
	GetTurnServers(ctx context.Context, in *GetTurnServersRequest, opts ...grpc.CallOption) (*GetTurnServersResponse, error)
	SetIceCandidate(ctx context.Context, in *SendIceCandidateRequest, opts ...grpc.CallOption) (*SendIceCandidateResponse, error)
	GetIceCandidate(ctx context.Context, in *GetIceCandidateRequest, opts ...grpc.CallOption) (CallingService_GetIceCandidateClient, error)
}

type callingServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewCallingServiceClient(cc grpc.ClientConnInterface) CallingServiceClient {
	return &callingServiceClient{cc}
}

func (c *callingServiceClient) StartCall(ctx context.Context, opts ...grpc.CallOption) (CallingService_StartCallClient, error) {
	stream, err := c.cc.NewStream(ctx, &_CallingService_serviceDesc.Streams[0], "/wgtwo.calling.v0.CallingService/StartCall", opts...)
	if err != nil {
		return nil, err
	}
	x := &callingServiceStartCallClient{stream}
	return x, nil
}

type CallingService_StartCallClient interface {
	Send(*StartCallRequest) error
	Recv() (*StartCallResponse, error)
	grpc.ClientStream
}

type callingServiceStartCallClient struct {
	grpc.ClientStream
}

func (x *callingServiceStartCallClient) Send(m *StartCallRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *callingServiceStartCallClient) Recv() (*StartCallResponse, error) {
	m := new(StartCallResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *callingServiceClient) TransferCall(ctx context.Context, in *TransferCallRequest, opts ...grpc.CallOption) (*TransferCallResponse, error) {
	out := new(TransferCallResponse)
	err := c.cc.Invoke(ctx, "/wgtwo.calling.v0.CallingService/TransferCall", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *callingServiceClient) SendDtmf(ctx context.Context, in *SendDtmfRequest, opts ...grpc.CallOption) (*SendDtmfResponse, error) {
	out := new(SendDtmfResponse)
	err := c.cc.Invoke(ctx, "/wgtwo.calling.v0.CallingService/SendDtmf", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *callingServiceClient) HangupCall(ctx context.Context, in *HangupCallRequest, opts ...grpc.CallOption) (*HangupCallResponse, error) {
	out := new(HangupCallResponse)
	err := c.cc.Invoke(ctx, "/wgtwo.calling.v0.CallingService/HangupCall", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *callingServiceClient) GetTurnServers(ctx context.Context, in *GetTurnServersRequest, opts ...grpc.CallOption) (*GetTurnServersResponse, error) {
	out := new(GetTurnServersResponse)
	err := c.cc.Invoke(ctx, "/wgtwo.calling.v0.CallingService/GetTurnServers", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *callingServiceClient) SetIceCandidate(ctx context.Context, in *SendIceCandidateRequest, opts ...grpc.CallOption) (*SendIceCandidateResponse, error) {
	out := new(SendIceCandidateResponse)
	err := c.cc.Invoke(ctx, "/wgtwo.calling.v0.CallingService/SetIceCandidate", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *callingServiceClient) GetIceCandidate(ctx context.Context, in *GetIceCandidateRequest, opts ...grpc.CallOption) (CallingService_GetIceCandidateClient, error) {
	stream, err := c.cc.NewStream(ctx, &_CallingService_serviceDesc.Streams[1], "/wgtwo.calling.v0.CallingService/GetIceCandidate", opts...)
	if err != nil {
		return nil, err
	}
	x := &callingServiceGetIceCandidateClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type CallingService_GetIceCandidateClient interface {
	Recv() (*GetIceCandidateResponse, error)
	grpc.ClientStream
}

type callingServiceGetIceCandidateClient struct {
	grpc.ClientStream
}

func (x *callingServiceGetIceCandidateClient) Recv() (*GetIceCandidateResponse, error) {
	m := new(GetIceCandidateResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// CallingServiceServer is the server API for CallingService service.
// All implementations should embed UnimplementedCallingServiceServer
// for forward compatibility
type CallingServiceServer interface {
	StartCall(CallingService_StartCallServer) error
	TransferCall(context.Context, *TransferCallRequest) (*TransferCallResponse, error)
	SendDtmf(context.Context, *SendDtmfRequest) (*SendDtmfResponse, error)
	HangupCall(context.Context, *HangupCallRequest) (*HangupCallResponse, error)
	GetTurnServers(context.Context, *GetTurnServersRequest) (*GetTurnServersResponse, error)
	SetIceCandidate(context.Context, *SendIceCandidateRequest) (*SendIceCandidateResponse, error)
	GetIceCandidate(*GetIceCandidateRequest, CallingService_GetIceCandidateServer) error
}

// UnimplementedCallingServiceServer should be embedded to have forward compatible implementations.
type UnimplementedCallingServiceServer struct {
}

func (UnimplementedCallingServiceServer) StartCall(CallingService_StartCallServer) error {
	return status.Errorf(codes.Unimplemented, "method StartCall not implemented")
}
func (UnimplementedCallingServiceServer) TransferCall(context.Context, *TransferCallRequest) (*TransferCallResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method TransferCall not implemented")
}
func (UnimplementedCallingServiceServer) SendDtmf(context.Context, *SendDtmfRequest) (*SendDtmfResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SendDtmf not implemented")
}
func (UnimplementedCallingServiceServer) HangupCall(context.Context, *HangupCallRequest) (*HangupCallResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method HangupCall not implemented")
}
func (UnimplementedCallingServiceServer) GetTurnServers(context.Context, *GetTurnServersRequest) (*GetTurnServersResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTurnServers not implemented")
}
func (UnimplementedCallingServiceServer) SetIceCandidate(context.Context, *SendIceCandidateRequest) (*SendIceCandidateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetIceCandidate not implemented")
}
func (UnimplementedCallingServiceServer) GetIceCandidate(*GetIceCandidateRequest, CallingService_GetIceCandidateServer) error {
	return status.Errorf(codes.Unimplemented, "method GetIceCandidate not implemented")
}

// UnsafeCallingServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to CallingServiceServer will
// result in compilation errors.
type UnsafeCallingServiceServer interface {
	mustEmbedUnimplementedCallingServiceServer()
}

func RegisterCallingServiceServer(s grpc.ServiceRegistrar, srv CallingServiceServer) {
	s.RegisterService(&_CallingService_serviceDesc, srv)
}

func _CallingService_StartCall_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(CallingServiceServer).StartCall(&callingServiceStartCallServer{stream})
}

type CallingService_StartCallServer interface {
	Send(*StartCallResponse) error
	Recv() (*StartCallRequest, error)
	grpc.ServerStream
}

type callingServiceStartCallServer struct {
	grpc.ServerStream
}

func (x *callingServiceStartCallServer) Send(m *StartCallResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *callingServiceStartCallServer) Recv() (*StartCallRequest, error) {
	m := new(StartCallRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _CallingService_TransferCall_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TransferCallRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CallingServiceServer).TransferCall(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/wgtwo.calling.v0.CallingService/TransferCall",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CallingServiceServer).TransferCall(ctx, req.(*TransferCallRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CallingService_SendDtmf_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SendDtmfRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CallingServiceServer).SendDtmf(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/wgtwo.calling.v0.CallingService/SendDtmf",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CallingServiceServer).SendDtmf(ctx, req.(*SendDtmfRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CallingService_HangupCall_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(HangupCallRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CallingServiceServer).HangupCall(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/wgtwo.calling.v0.CallingService/HangupCall",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CallingServiceServer).HangupCall(ctx, req.(*HangupCallRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CallingService_GetTurnServers_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetTurnServersRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CallingServiceServer).GetTurnServers(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/wgtwo.calling.v0.CallingService/GetTurnServers",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CallingServiceServer).GetTurnServers(ctx, req.(*GetTurnServersRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CallingService_SetIceCandidate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SendIceCandidateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CallingServiceServer).SetIceCandidate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/wgtwo.calling.v0.CallingService/SetIceCandidate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CallingServiceServer).SetIceCandidate(ctx, req.(*SendIceCandidateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CallingService_GetIceCandidate_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(GetIceCandidateRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(CallingServiceServer).GetIceCandidate(m, &callingServiceGetIceCandidateServer{stream})
}

type CallingService_GetIceCandidateServer interface {
	Send(*GetIceCandidateResponse) error
	grpc.ServerStream
}

type callingServiceGetIceCandidateServer struct {
	grpc.ServerStream
}

func (x *callingServiceGetIceCandidateServer) Send(m *GetIceCandidateResponse) error {
	return x.ServerStream.SendMsg(m)
}

var _CallingService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "wgtwo.calling.v0.CallingService",
	HandlerType: (*CallingServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "TransferCall",
			Handler:    _CallingService_TransferCall_Handler,
		},
		{
			MethodName: "SendDtmf",
			Handler:    _CallingService_SendDtmf_Handler,
		},
		{
			MethodName: "HangupCall",
			Handler:    _CallingService_HangupCall_Handler,
		},
		{
			MethodName: "GetTurnServers",
			Handler:    _CallingService_GetTurnServers_Handler,
		},
		{
			MethodName: "SetIceCandidate",
			Handler:    _CallingService_SetIceCandidate_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "StartCall",
			Handler:       _CallingService_StartCall_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
		{
			StreamName:    "GetIceCandidate",
			Handler:       _CallingService_GetIceCandidate_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "wgtwo/calling/v0/calling.proto",
}
