// Copyright 2020 Working Group Two AS
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//

// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             (unknown)
// source: wgtwo/mms/v0/mms.proto

package v0

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	MmsService_SendMessageToSubscriber_FullMethodName   = "/wgtwo.mms.v0.MmsService/SendMessageToSubscriber"
	MmsService_SendMessageFromSubscriber_FullMethodName = "/wgtwo.mms.v0.MmsService/SendMessageFromSubscriber"
)

// MmsServiceClient is the client API for MmsService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type MmsServiceClient interface {
	SendMessageToSubscriber(ctx context.Context, in *SendMessageToSubscriberRequest, opts ...grpc.CallOption) (*SendResponse, error)
	SendMessageFromSubscriber(ctx context.Context, in *SendMessageFromSubscriberRequest, opts ...grpc.CallOption) (*SendResponse, error)
}

type mmsServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewMmsServiceClient(cc grpc.ClientConnInterface) MmsServiceClient {
	return &mmsServiceClient{cc}
}

func (c *mmsServiceClient) SendMessageToSubscriber(ctx context.Context, in *SendMessageToSubscriberRequest, opts ...grpc.CallOption) (*SendResponse, error) {
	out := new(SendResponse)
	err := c.cc.Invoke(ctx, MmsService_SendMessageToSubscriber_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mmsServiceClient) SendMessageFromSubscriber(ctx context.Context, in *SendMessageFromSubscriberRequest, opts ...grpc.CallOption) (*SendResponse, error) {
	out := new(SendResponse)
	err := c.cc.Invoke(ctx, MmsService_SendMessageFromSubscriber_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// MmsServiceServer is the server API for MmsService service.
// All implementations should embed UnimplementedMmsServiceServer
// for forward compatibility
type MmsServiceServer interface {
	SendMessageToSubscriber(context.Context, *SendMessageToSubscriberRequest) (*SendResponse, error)
	SendMessageFromSubscriber(context.Context, *SendMessageFromSubscriberRequest) (*SendResponse, error)
}

// UnimplementedMmsServiceServer should be embedded to have forward compatible implementations.
type UnimplementedMmsServiceServer struct {
}

func (UnimplementedMmsServiceServer) SendMessageToSubscriber(context.Context, *SendMessageToSubscriberRequest) (*SendResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SendMessageToSubscriber not implemented")
}
func (UnimplementedMmsServiceServer) SendMessageFromSubscriber(context.Context, *SendMessageFromSubscriberRequest) (*SendResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SendMessageFromSubscriber not implemented")
}

// UnsafeMmsServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to MmsServiceServer will
// result in compilation errors.
type UnsafeMmsServiceServer interface {
	mustEmbedUnimplementedMmsServiceServer()
}

func RegisterMmsServiceServer(s grpc.ServiceRegistrar, srv MmsServiceServer) {
	s.RegisterService(&MmsService_ServiceDesc, srv)
}

func _MmsService_SendMessageToSubscriber_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SendMessageToSubscriberRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MmsServiceServer).SendMessageToSubscriber(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MmsService_SendMessageToSubscriber_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MmsServiceServer).SendMessageToSubscriber(ctx, req.(*SendMessageToSubscriberRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MmsService_SendMessageFromSubscriber_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SendMessageFromSubscriberRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MmsServiceServer).SendMessageFromSubscriber(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MmsService_SendMessageFromSubscriber_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MmsServiceServer).SendMessageFromSubscriber(ctx, req.(*SendMessageFromSubscriberRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// MmsService_ServiceDesc is the grpc.ServiceDesc for MmsService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var MmsService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "wgtwo.mms.v0.MmsService",
	HandlerType: (*MmsServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "SendMessageToSubscriber",
			Handler:    _MmsService_SendMessageToSubscriber_Handler,
		},
		{
			MethodName: "SendMessageFromSubscriber",
			Handler:    _MmsService_SendMessageFromSubscriber_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "wgtwo/mms/v0/mms.proto",
}
