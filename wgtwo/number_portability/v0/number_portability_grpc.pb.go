// Copyright 2024 [Working Group Two]/[Cisco Systems]
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//

// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             (unknown)
// source: wgtwo/number_portability/v0/number_portability.proto

package v0

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	NumberPortabilityService_CreatePortingRecords_FullMethodName = "/wgtwo.number_portability.v0.NumberPortabilityService/CreatePortingRecords"
	NumberPortabilityService_ListPortingRecords_FullMethodName   = "/wgtwo.number_portability.v0.NumberPortabilityService/ListPortingRecords"
)

// NumberPortabilityServiceClient is the client API for NumberPortabilityService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// NumberPortabilityService is supposed to be used by tenants or third parties to import country-specific number
// porting records into Working Group Two's number portability database. A porting record consists of a subscriber
// number, recipient operator, porting date and optional routing code as well as tenant-specific metadata. Porting date
// can both be a past or a future date.
type NumberPortabilityServiceClient interface {
	// CreatePortingRecords is used to import porting records into the number portability database.
	CreatePortingRecords(ctx context.Context, in *CreatePortingRecordsRequest, opts ...grpc.CallOption) (*CreatePortingRecordsResponse, error)
	// ListPortingRecords is used to list porting records from the number portability database.
	ListPortingRecords(ctx context.Context, in *ListPortingRecordsRequest, opts ...grpc.CallOption) (*ListPortingRecordsResponse, error)
}

type numberPortabilityServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewNumberPortabilityServiceClient(cc grpc.ClientConnInterface) NumberPortabilityServiceClient {
	return &numberPortabilityServiceClient{cc}
}

func (c *numberPortabilityServiceClient) CreatePortingRecords(ctx context.Context, in *CreatePortingRecordsRequest, opts ...grpc.CallOption) (*CreatePortingRecordsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CreatePortingRecordsResponse)
	err := c.cc.Invoke(ctx, NumberPortabilityService_CreatePortingRecords_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *numberPortabilityServiceClient) ListPortingRecords(ctx context.Context, in *ListPortingRecordsRequest, opts ...grpc.CallOption) (*ListPortingRecordsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListPortingRecordsResponse)
	err := c.cc.Invoke(ctx, NumberPortabilityService_ListPortingRecords_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// NumberPortabilityServiceServer is the server API for NumberPortabilityService service.
// All implementations should embed UnimplementedNumberPortabilityServiceServer
// for forward compatibility.
//
// NumberPortabilityService is supposed to be used by tenants or third parties to import country-specific number
// porting records into Working Group Two's number portability database. A porting record consists of a subscriber
// number, recipient operator, porting date and optional routing code as well as tenant-specific metadata. Porting date
// can both be a past or a future date.
type NumberPortabilityServiceServer interface {
	// CreatePortingRecords is used to import porting records into the number portability database.
	CreatePortingRecords(context.Context, *CreatePortingRecordsRequest) (*CreatePortingRecordsResponse, error)
	// ListPortingRecords is used to list porting records from the number portability database.
	ListPortingRecords(context.Context, *ListPortingRecordsRequest) (*ListPortingRecordsResponse, error)
}

// UnimplementedNumberPortabilityServiceServer should be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedNumberPortabilityServiceServer struct{}

func (UnimplementedNumberPortabilityServiceServer) CreatePortingRecords(context.Context, *CreatePortingRecordsRequest) (*CreatePortingRecordsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreatePortingRecords not implemented")
}
func (UnimplementedNumberPortabilityServiceServer) ListPortingRecords(context.Context, *ListPortingRecordsRequest) (*ListPortingRecordsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListPortingRecords not implemented")
}
func (UnimplementedNumberPortabilityServiceServer) testEmbeddedByValue() {}

// UnsafeNumberPortabilityServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to NumberPortabilityServiceServer will
// result in compilation errors.
type UnsafeNumberPortabilityServiceServer interface {
	mustEmbedUnimplementedNumberPortabilityServiceServer()
}

func RegisterNumberPortabilityServiceServer(s grpc.ServiceRegistrar, srv NumberPortabilityServiceServer) {
	// If the following call pancis, it indicates UnimplementedNumberPortabilityServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&NumberPortabilityService_ServiceDesc, srv)
}

func _NumberPortabilityService_CreatePortingRecords_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreatePortingRecordsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NumberPortabilityServiceServer).CreatePortingRecords(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: NumberPortabilityService_CreatePortingRecords_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NumberPortabilityServiceServer).CreatePortingRecords(ctx, req.(*CreatePortingRecordsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NumberPortabilityService_ListPortingRecords_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListPortingRecordsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NumberPortabilityServiceServer).ListPortingRecords(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: NumberPortabilityService_ListPortingRecords_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NumberPortabilityServiceServer).ListPortingRecords(ctx, req.(*ListPortingRecordsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// NumberPortabilityService_ServiceDesc is the grpc.ServiceDesc for NumberPortabilityService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var NumberPortabilityService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "wgtwo.number_portability.v0.NumberPortabilityService",
	HandlerType: (*NumberPortabilityServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreatePortingRecords",
			Handler:    _NumberPortabilityService_CreatePortingRecords_Handler,
		},
		{
			MethodName: "ListPortingRecords",
			Handler:    _NumberPortabilityService_ListPortingRecords_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "wgtwo/number_portability/v0/number_portability.proto",
}
