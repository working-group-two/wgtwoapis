// Copyright 2024 Cisco Systems
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.35.2
// 	protoc        (unknown)
// source: wgtwo/number_portability/v1/number_portability.proto

package v1

import (
	_ "github.com/working-group-two/wgtwoapis/wgtwo/annotations"
	v1 "github.com/working-group-two/wgtwoapis/wgtwo/common/v1"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type NumberBlockStatus int32

const (
	NumberBlockStatus_UNKNOWN_UNSPECIFIED      NumberBlockStatus = 0
	NumberBlockStatus_R_RESERVED               NumberBlockStatus = 1 // R Number Range reserved
	NumberBlockStatus_A_ALLOCATED              NumberBlockStatus = 2 // A Allocated
	NumberBlockStatus_F_FREE                   NumberBlockStatus = 3 // F Number range Free
	NumberBlockStatus_RC_RESERVED              NumberBlockStatus = 4 // RC Number Range reserved
	NumberBlockStatus_T_RESERVED_UNDER_TESTING NumberBlockStatus = 5 // T Number range reserved under testing
	NumberBlockStatus_U_UNAVAILABLE            NumberBlockStatus = 6 // U Unavailable
	NumberBlockStatus_B_BLOCKED                NumberBlockStatus = 7 // B Blocked (no reservation possible)
)

// Enum value maps for NumberBlockStatus.
var (
	NumberBlockStatus_name = map[int32]string{
		0: "UNKNOWN_UNSPECIFIED",
		1: "R_RESERVED",
		2: "A_ALLOCATED",
		3: "F_FREE",
		4: "RC_RESERVED",
		5: "T_RESERVED_UNDER_TESTING",
		6: "U_UNAVAILABLE",
		7: "B_BLOCKED",
	}
	NumberBlockStatus_value = map[string]int32{
		"UNKNOWN_UNSPECIFIED":      0,
		"R_RESERVED":               1,
		"A_ALLOCATED":              2,
		"F_FREE":                   3,
		"RC_RESERVED":              4,
		"T_RESERVED_UNDER_TESTING": 5,
		"U_UNAVAILABLE":            6,
		"B_BLOCKED":                7,
	}
)

func (x NumberBlockStatus) Enum() *NumberBlockStatus {
	p := new(NumberBlockStatus)
	*p = x
	return p
}

func (x NumberBlockStatus) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (NumberBlockStatus) Descriptor() protoreflect.EnumDescriptor {
	return file_wgtwo_number_portability_v1_number_portability_proto_enumTypes[0].Descriptor()
}

func (NumberBlockStatus) Type() protoreflect.EnumType {
	return &file_wgtwo_number_portability_v1_number_portability_proto_enumTypes[0]
}

func (x NumberBlockStatus) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use NumberBlockStatus.Descriptor instead.
func (NumberBlockStatus) EnumDescriptor() ([]byte, []int) {
	return file_wgtwo_number_portability_v1_number_portability_proto_rawDescGZIP(), []int{0}
}

// Request message to create porting records.
type CreatePortingRecordsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Porting records to be created.
	Records []*PortingRecord `protobuf:"bytes,1,rep,name=records,proto3" json:"records,omitempty"`
}

func (x *CreatePortingRecordsRequest) Reset() {
	*x = CreatePortingRecordsRequest{}
	mi := &file_wgtwo_number_portability_v1_number_portability_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CreatePortingRecordsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreatePortingRecordsRequest) ProtoMessage() {}

func (x *CreatePortingRecordsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_wgtwo_number_portability_v1_number_portability_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreatePortingRecordsRequest.ProtoReflect.Descriptor instead.
func (*CreatePortingRecordsRequest) Descriptor() ([]byte, []int) {
	return file_wgtwo_number_portability_v1_number_portability_proto_rawDescGZIP(), []int{0}
}

func (x *CreatePortingRecordsRequest) GetRecords() []*PortingRecord {
	if x != nil {
		return x.Records
	}
	return nil
}

// Response message for create porting records.
type CreatePortingRecordsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *CreatePortingRecordsResponse) Reset() {
	*x = CreatePortingRecordsResponse{}
	mi := &file_wgtwo_number_portability_v1_number_portability_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CreatePortingRecordsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreatePortingRecordsResponse) ProtoMessage() {}

func (x *CreatePortingRecordsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_wgtwo_number_portability_v1_number_portability_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreatePortingRecordsResponse.ProtoReflect.Descriptor instead.
func (*CreatePortingRecordsResponse) Descriptor() ([]byte, []int) {
	return file_wgtwo_number_portability_v1_number_portability_proto_rawDescGZIP(), []int{1}
}

// Request message to list porting records.
type ListPortingRecordsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Optional operator code to filter porting records.
	OperatorCode *string `protobuf:"bytes,1,opt,name=operator_code,json=operatorCode,proto3,oneof" json:"operator_code,omitempty"`
	// Optional subscriber number prefix to filter porting records.
	SubscriberNumberPrefix *string `protobuf:"bytes,2,opt,name=subscriber_number_prefix,json=subscriberNumberPrefix,proto3,oneof" json:"subscriber_number_prefix,omitempty"`
	// Optional destination ID to filter porting records.
	DestinationId *string `protobuf:"bytes,3,opt,name=destination_id,json=destinationId,proto3,oneof" json:"destination_id,omitempty"`
	// Optional minimum porting date to filter porting records.
	ValidFrom *timestamppb.Timestamp `protobuf:"bytes,4,opt,name=valid_from,json=validFrom,proto3,oneof" json:"valid_from,omitempty"`
}

func (x *ListPortingRecordsRequest) Reset() {
	*x = ListPortingRecordsRequest{}
	mi := &file_wgtwo_number_portability_v1_number_portability_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ListPortingRecordsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListPortingRecordsRequest) ProtoMessage() {}

func (x *ListPortingRecordsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_wgtwo_number_portability_v1_number_portability_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListPortingRecordsRequest.ProtoReflect.Descriptor instead.
func (*ListPortingRecordsRequest) Descriptor() ([]byte, []int) {
	return file_wgtwo_number_portability_v1_number_portability_proto_rawDescGZIP(), []int{2}
}

func (x *ListPortingRecordsRequest) GetOperatorCode() string {
	if x != nil && x.OperatorCode != nil {
		return *x.OperatorCode
	}
	return ""
}

func (x *ListPortingRecordsRequest) GetSubscriberNumberPrefix() string {
	if x != nil && x.SubscriberNumberPrefix != nil {
		return *x.SubscriberNumberPrefix
	}
	return ""
}

func (x *ListPortingRecordsRequest) GetDestinationId() string {
	if x != nil && x.DestinationId != nil {
		return *x.DestinationId
	}
	return ""
}

func (x *ListPortingRecordsRequest) GetValidFrom() *timestamppb.Timestamp {
	if x != nil {
		return x.ValidFrom
	}
	return nil
}

// Response message for list porting records.
type ListPortingRecordsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Porting records.
	Records []*PortingRecord `protobuf:"bytes,1,rep,name=records,proto3" json:"records,omitempty"`
}

func (x *ListPortingRecordsResponse) Reset() {
	*x = ListPortingRecordsResponse{}
	mi := &file_wgtwo_number_portability_v1_number_portability_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ListPortingRecordsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListPortingRecordsResponse) ProtoMessage() {}

func (x *ListPortingRecordsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_wgtwo_number_portability_v1_number_portability_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListPortingRecordsResponse.ProtoReflect.Descriptor instead.
func (*ListPortingRecordsResponse) Descriptor() ([]byte, []int) {
	return file_wgtwo_number_portability_v1_number_portability_proto_rawDescGZIP(), []int{3}
}

func (x *ListPortingRecordsResponse) GetRecords() []*PortingRecord {
	if x != nil {
		return x.Records
	}
	return nil
}

// Message representing a porting record (or lack thereof, in case destination_id, operator_code and routing_code are
// empty).
type PortingRecord struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Subscriber number with a country code.
	SubscriberNumber *v1.E164 `protobuf:"bytes,1,opt,name=subscriber_number,json=subscriberNumber,proto3" json:"subscriber_number,omitempty"`
	// Porting date and time.
	ValidFrom *timestamppb.Timestamp `protobuf:"bytes,2,opt,name=valid_from,json=validFrom,proto3" json:"valid_from,omitempty"`
	// Destination ID to route calls or messages to.
	// May be empty if destinations are not used.
	DestinationId string `protobuf:"bytes,3,opt,name=destination_id,json=destinationId,proto3" json:"destination_id,omitempty"`
	// A free-form operator code (in Sweden this is SPID allocated by SNPAC). May be empty.
	OperatorCode string `protobuf:"bytes,4,opt,name=operator_code,json=operatorCode,proto3" json:"operator_code,omitempty"`
	// Country-specific code used to route calls or messages
	// If empty and destination_id is set, the effective routing code is resolved from the destination.
	RoutingCode string `protobuf:"bytes,5,opt,name=routing_code,json=routingCode,proto3" json:"routing_code,omitempty"`
	// May be used to store tenant-specific data.
	Metadata map[string]string `protobuf:"bytes,6,rep,name=metadata,proto3" json:"metadata,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *PortingRecord) Reset() {
	*x = PortingRecord{}
	mi := &file_wgtwo_number_portability_v1_number_portability_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *PortingRecord) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PortingRecord) ProtoMessage() {}

func (x *PortingRecord) ProtoReflect() protoreflect.Message {
	mi := &file_wgtwo_number_portability_v1_number_portability_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PortingRecord.ProtoReflect.Descriptor instead.
func (*PortingRecord) Descriptor() ([]byte, []int) {
	return file_wgtwo_number_portability_v1_number_portability_proto_rawDescGZIP(), []int{4}
}

func (x *PortingRecord) GetSubscriberNumber() *v1.E164 {
	if x != nil {
		return x.SubscriberNumber
	}
	return nil
}

func (x *PortingRecord) GetValidFrom() *timestamppb.Timestamp {
	if x != nil {
		return x.ValidFrom
	}
	return nil
}

func (x *PortingRecord) GetDestinationId() string {
	if x != nil {
		return x.DestinationId
	}
	return ""
}

func (x *PortingRecord) GetOperatorCode() string {
	if x != nil {
		return x.OperatorCode
	}
	return ""
}

func (x *PortingRecord) GetRoutingCode() string {
	if x != nil {
		return x.RoutingCode
	}
	return ""
}

func (x *PortingRecord) GetMetadata() map[string]string {
	if x != nil {
		return x.Metadata
	}
	return nil
}

type CreateOrUpdateDestinationRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Destination *RoutingDestination `protobuf:"bytes,1,opt,name=destination,proto3" json:"destination,omitempty"`
}

func (x *CreateOrUpdateDestinationRequest) Reset() {
	*x = CreateOrUpdateDestinationRequest{}
	mi := &file_wgtwo_number_portability_v1_number_portability_proto_msgTypes[5]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CreateOrUpdateDestinationRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateOrUpdateDestinationRequest) ProtoMessage() {}

func (x *CreateOrUpdateDestinationRequest) ProtoReflect() protoreflect.Message {
	mi := &file_wgtwo_number_portability_v1_number_portability_proto_msgTypes[5]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateOrUpdateDestinationRequest.ProtoReflect.Descriptor instead.
func (*CreateOrUpdateDestinationRequest) Descriptor() ([]byte, []int) {
	return file_wgtwo_number_portability_v1_number_portability_proto_rawDescGZIP(), []int{5}
}

func (x *CreateOrUpdateDestinationRequest) GetDestination() *RoutingDestination {
	if x != nil {
		return x.Destination
	}
	return nil
}

type CreateOrUpdateDestinationResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DestinationId string `protobuf:"bytes,1,opt,name=destination_id,json=destinationId,proto3" json:"destination_id,omitempty"`
}

func (x *CreateOrUpdateDestinationResponse) Reset() {
	*x = CreateOrUpdateDestinationResponse{}
	mi := &file_wgtwo_number_portability_v1_number_portability_proto_msgTypes[6]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CreateOrUpdateDestinationResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateOrUpdateDestinationResponse) ProtoMessage() {}

func (x *CreateOrUpdateDestinationResponse) ProtoReflect() protoreflect.Message {
	mi := &file_wgtwo_number_portability_v1_number_portability_proto_msgTypes[6]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateOrUpdateDestinationResponse.ProtoReflect.Descriptor instead.
func (*CreateOrUpdateDestinationResponse) Descriptor() ([]byte, []int) {
	return file_wgtwo_number_portability_v1_number_portability_proto_rawDescGZIP(), []int{6}
}

func (x *CreateOrUpdateDestinationResponse) GetDestinationId() string {
	if x != nil {
		return x.DestinationId
	}
	return ""
}

type DeleteDestinationRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DestinationId string `protobuf:"bytes,1,opt,name=destination_id,json=destinationId,proto3" json:"destination_id,omitempty"`
}

func (x *DeleteDestinationRequest) Reset() {
	*x = DeleteDestinationRequest{}
	mi := &file_wgtwo_number_portability_v1_number_portability_proto_msgTypes[7]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DeleteDestinationRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteDestinationRequest) ProtoMessage() {}

func (x *DeleteDestinationRequest) ProtoReflect() protoreflect.Message {
	mi := &file_wgtwo_number_portability_v1_number_portability_proto_msgTypes[7]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteDestinationRequest.ProtoReflect.Descriptor instead.
func (*DeleteDestinationRequest) Descriptor() ([]byte, []int) {
	return file_wgtwo_number_portability_v1_number_portability_proto_rawDescGZIP(), []int{7}
}

func (x *DeleteDestinationRequest) GetDestinationId() string {
	if x != nil {
		return x.DestinationId
	}
	return ""
}

type DeleteDestinationResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *DeleteDestinationResponse) Reset() {
	*x = DeleteDestinationResponse{}
	mi := &file_wgtwo_number_portability_v1_number_portability_proto_msgTypes[8]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DeleteDestinationResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteDestinationResponse) ProtoMessage() {}

func (x *DeleteDestinationResponse) ProtoReflect() protoreflect.Message {
	mi := &file_wgtwo_number_portability_v1_number_portability_proto_msgTypes[8]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteDestinationResponse.ProtoReflect.Descriptor instead.
func (*DeleteDestinationResponse) Descriptor() ([]byte, []int) {
	return file_wgtwo_number_portability_v1_number_portability_proto_rawDescGZIP(), []int{8}
}

type ListDestinationsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DestinationId *string `protobuf:"bytes,1,opt,name=destination_id,json=destinationId,proto3,oneof" json:"destination_id,omitempty"`
}

func (x *ListDestinationsRequest) Reset() {
	*x = ListDestinationsRequest{}
	mi := &file_wgtwo_number_portability_v1_number_portability_proto_msgTypes[9]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ListDestinationsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListDestinationsRequest) ProtoMessage() {}

func (x *ListDestinationsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_wgtwo_number_portability_v1_number_portability_proto_msgTypes[9]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListDestinationsRequest.ProtoReflect.Descriptor instead.
func (*ListDestinationsRequest) Descriptor() ([]byte, []int) {
	return file_wgtwo_number_portability_v1_number_portability_proto_rawDescGZIP(), []int{9}
}

func (x *ListDestinationsRequest) GetDestinationId() string {
	if x != nil && x.DestinationId != nil {
		return *x.DestinationId
	}
	return ""
}

type ListDestinationsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Destinations []*RoutingDestination `protobuf:"bytes,1,rep,name=destinations,proto3" json:"destinations,omitempty"`
}

func (x *ListDestinationsResponse) Reset() {
	*x = ListDestinationsResponse{}
	mi := &file_wgtwo_number_portability_v1_number_portability_proto_msgTypes[10]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ListDestinationsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListDestinationsResponse) ProtoMessage() {}

func (x *ListDestinationsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_wgtwo_number_portability_v1_number_portability_proto_msgTypes[10]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListDestinationsResponse.ProtoReflect.Descriptor instead.
func (*ListDestinationsResponse) Descriptor() ([]byte, []int) {
	return file_wgtwo_number_portability_v1_number_portability_proto_rawDescGZIP(), []int{10}
}

func (x *ListDestinationsResponse) GetDestinations() []*RoutingDestination {
	if x != nil {
		return x.Destinations
	}
	return nil
}

// Routing destination defines how the messages or calls should be routed.
// It can correspond to an operator, a particular subset of numbers, an interconnect partner, etc.
// In the current implementation, it defines the routing code which is appended to the subscriber number when
// sending messages or making calls.
type RoutingDestination struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Destination's unique identifier. Mandatory.
	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// Informational destination name.
	Name string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	// Country-specific code used to route calls or messages
	// In Belgium this is a C-code that is the earliest block assigned to an operator by the regulator.
	RoutingCode string `protobuf:"bytes,3,opt,name=routing_code,json=routingCode,proto3" json:"routing_code,omitempty"`
}

func (x *RoutingDestination) Reset() {
	*x = RoutingDestination{}
	mi := &file_wgtwo_number_portability_v1_number_portability_proto_msgTypes[11]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *RoutingDestination) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RoutingDestination) ProtoMessage() {}

func (x *RoutingDestination) ProtoReflect() protoreflect.Message {
	mi := &file_wgtwo_number_portability_v1_number_portability_proto_msgTypes[11]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RoutingDestination.ProtoReflect.Descriptor instead.
func (*RoutingDestination) Descriptor() ([]byte, []int) {
	return file_wgtwo_number_portability_v1_number_portability_proto_rawDescGZIP(), []int{11}
}

func (x *RoutingDestination) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *RoutingDestination) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *RoutingDestination) GetRoutingCode() string {
	if x != nil {
		return x.RoutingCode
	}
	return ""
}

type CreateOrUpdateNumberBlockRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Block *NumberBlock `protobuf:"bytes,1,opt,name=block,proto3" json:"block,omitempty"`
}

func (x *CreateOrUpdateNumberBlockRequest) Reset() {
	*x = CreateOrUpdateNumberBlockRequest{}
	mi := &file_wgtwo_number_portability_v1_number_portability_proto_msgTypes[12]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CreateOrUpdateNumberBlockRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateOrUpdateNumberBlockRequest) ProtoMessage() {}

func (x *CreateOrUpdateNumberBlockRequest) ProtoReflect() protoreflect.Message {
	mi := &file_wgtwo_number_portability_v1_number_portability_proto_msgTypes[12]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateOrUpdateNumberBlockRequest.ProtoReflect.Descriptor instead.
func (*CreateOrUpdateNumberBlockRequest) Descriptor() ([]byte, []int) {
	return file_wgtwo_number_portability_v1_number_portability_proto_rawDescGZIP(), []int{12}
}

func (x *CreateOrUpdateNumberBlockRequest) GetBlock() *NumberBlock {
	if x != nil {
		return x.Block
	}
	return nil
}

type CreateOrUpdateNumberBlockResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *CreateOrUpdateNumberBlockResponse) Reset() {
	*x = CreateOrUpdateNumberBlockResponse{}
	mi := &file_wgtwo_number_portability_v1_number_portability_proto_msgTypes[13]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CreateOrUpdateNumberBlockResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateOrUpdateNumberBlockResponse) ProtoMessage() {}

func (x *CreateOrUpdateNumberBlockResponse) ProtoReflect() protoreflect.Message {
	mi := &file_wgtwo_number_portability_v1_number_portability_proto_msgTypes[13]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateOrUpdateNumberBlockResponse.ProtoReflect.Descriptor instead.
func (*CreateOrUpdateNumberBlockResponse) Descriptor() ([]byte, []int) {
	return file_wgtwo_number_portability_v1_number_portability_proto_rawDescGZIP(), []int{13}
}

type DeleteNumberBlockRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DestinationId string `protobuf:"bytes,1,opt,name=destination_id,json=destinationId,proto3" json:"destination_id,omitempty"`
	Prefix        string `protobuf:"bytes,2,opt,name=prefix,proto3" json:"prefix,omitempty"`
}

func (x *DeleteNumberBlockRequest) Reset() {
	*x = DeleteNumberBlockRequest{}
	mi := &file_wgtwo_number_portability_v1_number_portability_proto_msgTypes[14]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DeleteNumberBlockRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteNumberBlockRequest) ProtoMessage() {}

func (x *DeleteNumberBlockRequest) ProtoReflect() protoreflect.Message {
	mi := &file_wgtwo_number_portability_v1_number_portability_proto_msgTypes[14]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteNumberBlockRequest.ProtoReflect.Descriptor instead.
func (*DeleteNumberBlockRequest) Descriptor() ([]byte, []int) {
	return file_wgtwo_number_portability_v1_number_portability_proto_rawDescGZIP(), []int{14}
}

func (x *DeleteNumberBlockRequest) GetDestinationId() string {
	if x != nil {
		return x.DestinationId
	}
	return ""
}

func (x *DeleteNumberBlockRequest) GetPrefix() string {
	if x != nil {
		return x.Prefix
	}
	return ""
}

type DeleteNumberBlockResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *DeleteNumberBlockResponse) Reset() {
	*x = DeleteNumberBlockResponse{}
	mi := &file_wgtwo_number_portability_v1_number_portability_proto_msgTypes[15]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DeleteNumberBlockResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteNumberBlockResponse) ProtoMessage() {}

func (x *DeleteNumberBlockResponse) ProtoReflect() protoreflect.Message {
	mi := &file_wgtwo_number_portability_v1_number_portability_proto_msgTypes[15]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteNumberBlockResponse.ProtoReflect.Descriptor instead.
func (*DeleteNumberBlockResponse) Descriptor() ([]byte, []int) {
	return file_wgtwo_number_portability_v1_number_portability_proto_rawDescGZIP(), []int{15}
}

type ListNumberBlocksRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DestinationId *string            `protobuf:"bytes,1,opt,name=destination_id,json=destinationId,proto3,oneof" json:"destination_id,omitempty"`
	Prefix        *string            `protobuf:"bytes,2,opt,name=prefix,proto3,oneof" json:"prefix,omitempty"`
	Status        *NumberBlockStatus `protobuf:"varint,3,opt,name=status,proto3,enum=wgtwo.number_portability.v1.NumberBlockStatus,oneof" json:"status,omitempty"`
}

func (x *ListNumberBlocksRequest) Reset() {
	*x = ListNumberBlocksRequest{}
	mi := &file_wgtwo_number_portability_v1_number_portability_proto_msgTypes[16]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ListNumberBlocksRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListNumberBlocksRequest) ProtoMessage() {}

func (x *ListNumberBlocksRequest) ProtoReflect() protoreflect.Message {
	mi := &file_wgtwo_number_portability_v1_number_portability_proto_msgTypes[16]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListNumberBlocksRequest.ProtoReflect.Descriptor instead.
func (*ListNumberBlocksRequest) Descriptor() ([]byte, []int) {
	return file_wgtwo_number_portability_v1_number_portability_proto_rawDescGZIP(), []int{16}
}

func (x *ListNumberBlocksRequest) GetDestinationId() string {
	if x != nil && x.DestinationId != nil {
		return *x.DestinationId
	}
	return ""
}

func (x *ListNumberBlocksRequest) GetPrefix() string {
	if x != nil && x.Prefix != nil {
		return *x.Prefix
	}
	return ""
}

func (x *ListNumberBlocksRequest) GetStatus() NumberBlockStatus {
	if x != nil && x.Status != nil {
		return *x.Status
	}
	return NumberBlockStatus_UNKNOWN_UNSPECIFIED
}

type ListNumberBlocksResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Blocks []*NumberBlock `protobuf:"bytes,1,rep,name=blocks,proto3" json:"blocks,omitempty"`
}

func (x *ListNumberBlocksResponse) Reset() {
	*x = ListNumberBlocksResponse{}
	mi := &file_wgtwo_number_portability_v1_number_portability_proto_msgTypes[17]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ListNumberBlocksResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListNumberBlocksResponse) ProtoMessage() {}

func (x *ListNumberBlocksResponse) ProtoReflect() protoreflect.Message {
	mi := &file_wgtwo_number_portability_v1_number_portability_proto_msgTypes[17]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListNumberBlocksResponse.ProtoReflect.Descriptor instead.
func (*ListNumberBlocksResponse) Descriptor() ([]byte, []int) {
	return file_wgtwo_number_portability_v1_number_portability_proto_rawDescGZIP(), []int{17}
}

func (x *ListNumberBlocksResponse) GetBlocks() []*NumberBlock {
	if x != nil {
		return x.Blocks
	}
	return nil
}

// A block of subscriber numbers identified by a prefix.
// Non-ported numbers will be matched against the prefixes to determine the routing destination,
// which in turn will be used to determine the routing code.
type NumberBlock struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// A reference to the destination created in the RoutingDestinationService.
	DestinationId string `protobuf:"bytes,1,opt,name=destination_id,json=destinationId,proto3" json:"destination_id,omitempty"`
	// Subscriber number prefix.
	Prefix string `protobuf:"bytes,2,opt,name=prefix,proto3" json:"prefix,omitempty"`
	// Status of a number block.
	// Only reserved and allocated blocks are used for the lookups.
	Status NumberBlockStatus `protobuf:"varint,3,opt,name=status,proto3,enum=wgtwo.number_portability.v1.NumberBlockStatus" json:"status,omitempty"`
	// Only blocks with assignment date in the past are used for the lookups.
	AssignmentDate *timestamppb.Timestamp `protobuf:"bytes,4,opt,name=assignment_date,json=assignmentDate,proto3,oneof" json:"assignment_date,omitempty"`
}

func (x *NumberBlock) Reset() {
	*x = NumberBlock{}
	mi := &file_wgtwo_number_portability_v1_number_portability_proto_msgTypes[18]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *NumberBlock) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NumberBlock) ProtoMessage() {}

func (x *NumberBlock) ProtoReflect() protoreflect.Message {
	mi := &file_wgtwo_number_portability_v1_number_portability_proto_msgTypes[18]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NumberBlock.ProtoReflect.Descriptor instead.
func (*NumberBlock) Descriptor() ([]byte, []int) {
	return file_wgtwo_number_portability_v1_number_portability_proto_rawDescGZIP(), []int{18}
}

func (x *NumberBlock) GetDestinationId() string {
	if x != nil {
		return x.DestinationId
	}
	return ""
}

func (x *NumberBlock) GetPrefix() string {
	if x != nil {
		return x.Prefix
	}
	return ""
}

func (x *NumberBlock) GetStatus() NumberBlockStatus {
	if x != nil {
		return x.Status
	}
	return NumberBlockStatus_UNKNOWN_UNSPECIFIED
}

func (x *NumberBlock) GetAssignmentDate() *timestamppb.Timestamp {
	if x != nil {
		return x.AssignmentDate
	}
	return nil
}

var File_wgtwo_number_portability_v1_number_portability_proto protoreflect.FileDescriptor

var file_wgtwo_number_portability_v1_number_portability_proto_rawDesc = []byte{
	0x0a, 0x34, 0x77, 0x67, 0x74, 0x77, 0x6f, 0x2f, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x5f, 0x70,
	0x6f, 0x72, 0x74, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x2f, 0x76, 0x31, 0x2f, 0x6e, 0x75,
	0x6d, 0x62, 0x65, 0x72, 0x5f, 0x70, 0x6f, 0x72, 0x74, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x1b, 0x77, 0x67, 0x74, 0x77, 0x6f, 0x2e, 0x6e, 0x75,
	0x6d, 0x62, 0x65, 0x72, 0x5f, 0x70, 0x6f, 0x72, 0x74, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79,
	0x2e, 0x76, 0x31, 0x1a, 0x1c, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x61, 0x70, 0x69, 0x2f,
	0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x1a, 0x1f, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x1a, 0x23, 0x77, 0x67, 0x74, 0x77, 0x6f, 0x2f, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x21, 0x77, 0x67, 0x74, 0x77, 0x6f, 0x2f, 0x63,
	0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2f, 0x76, 0x31, 0x2f, 0x70, 0x68, 0x6f, 0x6e, 0x65, 0x6e, 0x75,
	0x6d, 0x62, 0x65, 0x72, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x63, 0x0a, 0x1b, 0x43, 0x72,
	0x65, 0x61, 0x74, 0x65, 0x50, 0x6f, 0x72, 0x74, 0x69, 0x6e, 0x67, 0x52, 0x65, 0x63, 0x6f, 0x72,
	0x64, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x44, 0x0a, 0x07, 0x72, 0x65, 0x63,
	0x6f, 0x72, 0x64, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2a, 0x2e, 0x77, 0x67, 0x74,
	0x77, 0x6f, 0x2e, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x5f, 0x70, 0x6f, 0x72, 0x74, 0x61, 0x62,
	0x69, 0x6c, 0x69, 0x74, 0x79, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x6f, 0x72, 0x74, 0x69, 0x6e, 0x67,
	0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x52, 0x07, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x73, 0x22,
	0x1e, 0x0a, 0x1c, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x50, 0x6f, 0x72, 0x74, 0x69, 0x6e, 0x67,
	0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22,
	0xc1, 0x02, 0x0a, 0x19, 0x4c, 0x69, 0x73, 0x74, 0x50, 0x6f, 0x72, 0x74, 0x69, 0x6e, 0x67, 0x52,
	0x65, 0x63, 0x6f, 0x72, 0x64, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x28, 0x0a,
	0x0d, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x0c, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72,
	0x43, 0x6f, 0x64, 0x65, 0x88, 0x01, 0x01, 0x12, 0x3d, 0x0a, 0x18, 0x73, 0x75, 0x62, 0x73, 0x63,
	0x72, 0x69, 0x62, 0x65, 0x72, 0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x5f, 0x70, 0x72, 0x65,
	0x66, 0x69, 0x78, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x48, 0x01, 0x52, 0x16, 0x73, 0x75, 0x62,
	0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x72, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x50, 0x72, 0x65,
	0x66, 0x69, 0x78, 0x88, 0x01, 0x01, 0x12, 0x2a, 0x0a, 0x0e, 0x64, 0x65, 0x73, 0x74, 0x69, 0x6e,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x48, 0x02,
	0x52, 0x0d, 0x64, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x88,
	0x01, 0x01, 0x12, 0x3e, 0x0a, 0x0a, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x5f, 0x66, 0x72, 0x6f, 0x6d,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61,
	0x6d, 0x70, 0x48, 0x03, 0x52, 0x09, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x46, 0x72, 0x6f, 0x6d, 0x88,
	0x01, 0x01, 0x42, 0x10, 0x0a, 0x0e, 0x5f, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x5f,
	0x63, 0x6f, 0x64, 0x65, 0x42, 0x1b, 0x0a, 0x19, 0x5f, 0x73, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69,
	0x62, 0x65, 0x72, 0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x5f, 0x70, 0x72, 0x65, 0x66, 0x69,
	0x78, 0x42, 0x11, 0x0a, 0x0f, 0x5f, 0x64, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x5f, 0x69, 0x64, 0x42, 0x0d, 0x0a, 0x0b, 0x5f, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x5f, 0x66,
	0x72, 0x6f, 0x6d, 0x22, 0x62, 0x0a, 0x1a, 0x4c, 0x69, 0x73, 0x74, 0x50, 0x6f, 0x72, 0x74, 0x69,
	0x6e, 0x67, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x12, 0x44, 0x0a, 0x07, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x73, 0x18, 0x01, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x2a, 0x2e, 0x77, 0x67, 0x74, 0x77, 0x6f, 0x2e, 0x6e, 0x75, 0x6d, 0x62, 0x65,
	0x72, 0x5f, 0x70, 0x6f, 0x72, 0x74, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x2e, 0x76, 0x31,
	0x2e, 0x50, 0x6f, 0x72, 0x74, 0x69, 0x6e, 0x67, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x52, 0x07,
	0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x73, 0x22, 0x90, 0x03, 0x0a, 0x0d, 0x50, 0x6f, 0x72, 0x74,
	0x69, 0x6e, 0x67, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x12, 0x42, 0x0a, 0x11, 0x73, 0x75, 0x62,
	0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x72, 0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x77, 0x67, 0x74, 0x77, 0x6f, 0x2e, 0x63, 0x6f, 0x6d,
	0x6d, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x45, 0x31, 0x36, 0x34, 0x52, 0x10, 0x73, 0x75, 0x62,
	0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x72, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x39, 0x0a,
	0x0a, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x5f, 0x66, 0x72, 0x6f, 0x6d, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x09, 0x76,
	0x61, 0x6c, 0x69, 0x64, 0x46, 0x72, 0x6f, 0x6d, 0x12, 0x25, 0x0a, 0x0e, 0x64, 0x65, 0x73, 0x74,
	0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0d, 0x64, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12,
	0x23, 0x0a, 0x0d, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x6f, 0x64, 0x65,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72,
	0x43, 0x6f, 0x64, 0x65, 0x12, 0x21, 0x0a, 0x0c, 0x72, 0x6f, 0x75, 0x74, 0x69, 0x6e, 0x67, 0x5f,
	0x63, 0x6f, 0x64, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x72, 0x6f, 0x75, 0x74,
	0x69, 0x6e, 0x67, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x54, 0x0a, 0x08, 0x6d, 0x65, 0x74, 0x61, 0x64,
	0x61, 0x74, 0x61, 0x18, 0x06, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x38, 0x2e, 0x77, 0x67, 0x74, 0x77,
	0x6f, 0x2e, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x5f, 0x70, 0x6f, 0x72, 0x74, 0x61, 0x62, 0x69,
	0x6c, 0x69, 0x74, 0x79, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x6f, 0x72, 0x74, 0x69, 0x6e, 0x67, 0x52,
	0x65, 0x63, 0x6f, 0x72, 0x64, 0x2e, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x45, 0x6e,
	0x74, 0x72, 0x79, 0x52, 0x08, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x1a, 0x3b, 0x0a,
	0x0d, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10,
	0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79,
	0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0x75, 0x0a, 0x20, 0x43, 0x72,
	0x65, 0x61, 0x74, 0x65, 0x4f, 0x72, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x44, 0x65, 0x73, 0x74,
	0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x51,
	0x0a, 0x0b, 0x64, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x2f, 0x2e, 0x77, 0x67, 0x74, 0x77, 0x6f, 0x2e, 0x6e, 0x75, 0x6d, 0x62,
	0x65, 0x72, 0x5f, 0x70, 0x6f, 0x72, 0x74, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x2e, 0x76,
	0x31, 0x2e, 0x52, 0x6f, 0x75, 0x74, 0x69, 0x6e, 0x67, 0x44, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x22, 0x4a, 0x0a, 0x21, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x4f, 0x72, 0x55, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x44, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x25, 0x0a, 0x0e, 0x64, 0x65, 0x73, 0x74, 0x69, 0x6e,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d,
	0x64, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x22, 0x41, 0x0a,
	0x18, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x44, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x25, 0x0a, 0x0e, 0x64, 0x65, 0x73,
	0x74, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0d, 0x64, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64,
	0x22, 0x1b, 0x0a, 0x19, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x44, 0x65, 0x73, 0x74, 0x69, 0x6e,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x58, 0x0a,
	0x17, 0x4c, 0x69, 0x73, 0x74, 0x44, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x2a, 0x0a, 0x0e, 0x64, 0x65, 0x73, 0x74,
	0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x48, 0x00, 0x52, 0x0d, 0x64, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49,
	0x64, 0x88, 0x01, 0x01, 0x42, 0x11, 0x0a, 0x0f, 0x5f, 0x64, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x22, 0x6f, 0x0a, 0x18, 0x4c, 0x69, 0x73, 0x74, 0x44,
	0x65, 0x73, 0x74, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x53, 0x0a, 0x0c, 0x64, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2f, 0x2e, 0x77, 0x67, 0x74, 0x77,
	0x6f, 0x2e, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x5f, 0x70, 0x6f, 0x72, 0x74, 0x61, 0x62, 0x69,
	0x6c, 0x69, 0x74, 0x79, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x6f, 0x75, 0x74, 0x69, 0x6e, 0x67, 0x44,
	0x65, 0x73, 0x74, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0c, 0x64, 0x65, 0x73, 0x74,
	0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x22, 0x5b, 0x0a, 0x12, 0x52, 0x6f, 0x75, 0x74,
	0x69, 0x6e, 0x67, 0x44, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x0e,
	0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x12,
	0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61,
	0x6d, 0x65, 0x12, 0x21, 0x0a, 0x0c, 0x72, 0x6f, 0x75, 0x74, 0x69, 0x6e, 0x67, 0x5f, 0x63, 0x6f,
	0x64, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x72, 0x6f, 0x75, 0x74, 0x69, 0x6e,
	0x67, 0x43, 0x6f, 0x64, 0x65, 0x22, 0x62, 0x0a, 0x20, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x4f,
	0x72, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x42, 0x6c, 0x6f,
	0x63, 0x6b, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x3e, 0x0a, 0x05, 0x62, 0x6c, 0x6f,
	0x63, 0x6b, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x77, 0x67, 0x74, 0x77, 0x6f,
	0x2e, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x5f, 0x70, 0x6f, 0x72, 0x74, 0x61, 0x62, 0x69, 0x6c,
	0x69, 0x74, 0x79, 0x2e, 0x76, 0x31, 0x2e, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x42, 0x6c, 0x6f,
	0x63, 0x6b, 0x52, 0x05, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x22, 0x23, 0x0a, 0x21, 0x43, 0x72, 0x65,
	0x61, 0x74, 0x65, 0x4f, 0x72, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x4e, 0x75, 0x6d, 0x62, 0x65,
	0x72, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x59,
	0x0a, 0x18, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x42, 0x6c,
	0x6f, 0x63, 0x6b, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x25, 0x0a, 0x0e, 0x64, 0x65,
	0x73, 0x74, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0d, 0x64, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49,
	0x64, 0x12, 0x16, 0x0a, 0x06, 0x70, 0x72, 0x65, 0x66, 0x69, 0x78, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x06, 0x70, 0x72, 0x65, 0x66, 0x69, 0x78, 0x22, 0x1b, 0x0a, 0x19, 0x44, 0x65, 0x6c,
	0x65, 0x74, 0x65, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0xd8, 0x01, 0x0a, 0x17, 0x4c, 0x69, 0x73, 0x74, 0x4e,
	0x75, 0x6d, 0x62, 0x65, 0x72, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x2a, 0x0a, 0x0e, 0x64, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x0d, 0x64, 0x65,
	0x73, 0x74, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x88, 0x01, 0x01, 0x12, 0x1b,
	0x0a, 0x06, 0x70, 0x72, 0x65, 0x66, 0x69, 0x78, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x48, 0x01,
	0x52, 0x06, 0x70, 0x72, 0x65, 0x66, 0x69, 0x78, 0x88, 0x01, 0x01, 0x12, 0x4b, 0x0a, 0x06, 0x73,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x2e, 0x2e, 0x77, 0x67,
	0x74, 0x77, 0x6f, 0x2e, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x5f, 0x70, 0x6f, 0x72, 0x74, 0x61,
	0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x2e, 0x76, 0x31, 0x2e, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72,
	0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x48, 0x02, 0x52, 0x06, 0x73,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x88, 0x01, 0x01, 0x42, 0x11, 0x0a, 0x0f, 0x5f, 0x64, 0x65, 0x73,
	0x74, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x42, 0x09, 0x0a, 0x07, 0x5f,
	0x70, 0x72, 0x65, 0x66, 0x69, 0x78, 0x42, 0x09, 0x0a, 0x07, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x22, 0x5c, 0x0a, 0x18, 0x4c, 0x69, 0x73, 0x74, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x42,
	0x6c, 0x6f, 0x63, 0x6b, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x40, 0x0a,
	0x06, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x28, 0x2e,
	0x77, 0x67, 0x74, 0x77, 0x6f, 0x2e, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x5f, 0x70, 0x6f, 0x72,
	0x74, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x2e, 0x76, 0x31, 0x2e, 0x4e, 0x75, 0x6d, 0x62,
	0x65, 0x72, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x52, 0x06, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x73, 0x22,
	0xf2, 0x01, 0x0a, 0x0b, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x12,
	0x25, 0x0a, 0x0e, 0x64, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x64, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x70, 0x72, 0x65, 0x66, 0x69, 0x78,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x70, 0x72, 0x65, 0x66, 0x69, 0x78, 0x12, 0x46,
	0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x2e,
	0x2e, 0x77, 0x67, 0x74, 0x77, 0x6f, 0x2e, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x5f, 0x70, 0x6f,
	0x72, 0x74, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x2e, 0x76, 0x31, 0x2e, 0x4e, 0x75, 0x6d,
	0x62, 0x65, 0x72, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x06,
	0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x48, 0x0a, 0x0f, 0x61, 0x73, 0x73, 0x69, 0x67, 0x6e,
	0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x64, 0x61, 0x74, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x48, 0x00, 0x52, 0x0e, 0x61,
	0x73, 0x73, 0x69, 0x67, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x44, 0x61, 0x74, 0x65, 0x88, 0x01, 0x01,
	0x42, 0x12, 0x0a, 0x10, 0x5f, 0x61, 0x73, 0x73, 0x69, 0x67, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x5f,
	0x64, 0x61, 0x74, 0x65, 0x2a, 0xaa, 0x01, 0x0a, 0x11, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x42,
	0x6c, 0x6f, 0x63, 0x6b, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x17, 0x0a, 0x13, 0x55, 0x4e,
	0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45,
	0x44, 0x10, 0x00, 0x12, 0x0e, 0x0a, 0x0a, 0x52, 0x5f, 0x52, 0x45, 0x53, 0x45, 0x52, 0x56, 0x45,
	0x44, 0x10, 0x01, 0x12, 0x0f, 0x0a, 0x0b, 0x41, 0x5f, 0x41, 0x4c, 0x4c, 0x4f, 0x43, 0x41, 0x54,
	0x45, 0x44, 0x10, 0x02, 0x12, 0x0a, 0x0a, 0x06, 0x46, 0x5f, 0x46, 0x52, 0x45, 0x45, 0x10, 0x03,
	0x12, 0x0f, 0x0a, 0x0b, 0x52, 0x43, 0x5f, 0x52, 0x45, 0x53, 0x45, 0x52, 0x56, 0x45, 0x44, 0x10,
	0x04, 0x12, 0x1c, 0x0a, 0x18, 0x54, 0x5f, 0x52, 0x45, 0x53, 0x45, 0x52, 0x56, 0x45, 0x44, 0x5f,
	0x55, 0x4e, 0x44, 0x45, 0x52, 0x5f, 0x54, 0x45, 0x53, 0x54, 0x49, 0x4e, 0x47, 0x10, 0x05, 0x12,
	0x11, 0x0a, 0x0d, 0x55, 0x5f, 0x55, 0x4e, 0x41, 0x56, 0x41, 0x49, 0x4c, 0x41, 0x42, 0x4c, 0x45,
	0x10, 0x06, 0x12, 0x0d, 0x0a, 0x09, 0x42, 0x5f, 0x42, 0x4c, 0x4f, 0x43, 0x4b, 0x45, 0x44, 0x10,
	0x07, 0x32, 0xa3, 0x03, 0x0a, 0x18, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x50, 0x6f, 0x72, 0x74,
	0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0xc6,
	0x01, 0x0a, 0x14, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x50, 0x6f, 0x72, 0x74, 0x69, 0x6e, 0x67,
	0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x73, 0x12, 0x38, 0x2e, 0x77, 0x67, 0x74, 0x77, 0x6f, 0x2e,
	0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x5f, 0x70, 0x6f, 0x72, 0x74, 0x61, 0x62, 0x69, 0x6c, 0x69,
	0x74, 0x79, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x50, 0x6f, 0x72, 0x74,
	0x69, 0x6e, 0x67, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x39, 0x2e, 0x77, 0x67, 0x74, 0x77, 0x6f, 0x2e, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72,
	0x5f, 0x70, 0x6f, 0x72, 0x74, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x2e, 0x76, 0x31, 0x2e,
	0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x50, 0x6f, 0x72, 0x74, 0x69, 0x6e, 0x67, 0x52, 0x65, 0x63,
	0x6f, 0x72, 0x64, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x39, 0xea, 0xb5,
	0x18, 0x00, 0xf8, 0xb5, 0x18, 0x02, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x2b, 0x3a, 0x01, 0x2a, 0x22,
	0x26, 0x2f, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x2d, 0x70, 0x6f, 0x72, 0x74, 0x61, 0x62, 0x69,
	0x6c, 0x69, 0x74, 0x79, 0x2f, 0x76, 0x31, 0x2f, 0x70, 0x6f, 0x72, 0x74, 0x69, 0x6e, 0x67, 0x2d,
	0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x73, 0x12, 0xbd, 0x01, 0x0a, 0x12, 0x4c, 0x69, 0x73, 0x74,
	0x50, 0x6f, 0x72, 0x74, 0x69, 0x6e, 0x67, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x73, 0x12, 0x36,
	0x2e, 0x77, 0x67, 0x74, 0x77, 0x6f, 0x2e, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x5f, 0x70, 0x6f,
	0x72, 0x74, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x69, 0x73,
	0x74, 0x50, 0x6f, 0x72, 0x74, 0x69, 0x6e, 0x67, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x73, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x37, 0x2e, 0x77, 0x67, 0x74, 0x77, 0x6f, 0x2e, 0x6e,
	0x75, 0x6d, 0x62, 0x65, 0x72, 0x5f, 0x70, 0x6f, 0x72, 0x74, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74,
	0x79, 0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x50, 0x6f, 0x72, 0x74, 0x69, 0x6e, 0x67,
	0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22,
	0x36, 0xea, 0xb5, 0x18, 0x00, 0xf8, 0xb5, 0x18, 0x02, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x28, 0x12,
	0x26, 0x2f, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x2d, 0x70, 0x6f, 0x72, 0x74, 0x61, 0x62, 0x69,
	0x6c, 0x69, 0x74, 0x79, 0x2f, 0x76, 0x31, 0x2f, 0x70, 0x6f, 0x72, 0x74, 0x69, 0x6e, 0x67, 0x2d,
	0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x73, 0x32, 0xdd, 0x03, 0x0a, 0x19, 0x52, 0x6f, 0x75, 0x74,
	0x69, 0x6e, 0x67, 0x44, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0xa4, 0x01, 0x0a, 0x19, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x4f, 0x72, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x44, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x12, 0x3d, 0x2e, 0x77, 0x67, 0x74, 0x77, 0x6f, 0x2e, 0x6e, 0x75, 0x6d, 0x62,
	0x65, 0x72, 0x5f, 0x70, 0x6f, 0x72, 0x74, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x2e, 0x76,
	0x31, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x4f, 0x72, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x44, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x3e, 0x2e, 0x77, 0x67, 0x74, 0x77, 0x6f, 0x2e, 0x6e, 0x75, 0x6d, 0x62, 0x65,
	0x72, 0x5f, 0x70, 0x6f, 0x72, 0x74, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x2e, 0x76, 0x31,
	0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x4f, 0x72, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x44,
	0x65, 0x73, 0x74, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x22, 0x08, 0xea, 0xb5, 0x18, 0x00, 0xf8, 0xb5, 0x18, 0x02, 0x12, 0x8c, 0x01, 0x0a,
	0x11, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x44, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x12, 0x35, 0x2e, 0x77, 0x67, 0x74, 0x77, 0x6f, 0x2e, 0x6e, 0x75, 0x6d, 0x62, 0x65,
	0x72, 0x5f, 0x70, 0x6f, 0x72, 0x74, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x2e, 0x76, 0x31,
	0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x44, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x36, 0x2e, 0x77, 0x67, 0x74, 0x77,
	0x6f, 0x2e, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x5f, 0x70, 0x6f, 0x72, 0x74, 0x61, 0x62, 0x69,
	0x6c, 0x69, 0x74, 0x79, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x44, 0x65,
	0x73, 0x74, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x22, 0x08, 0xea, 0xb5, 0x18, 0x00, 0xf8, 0xb5, 0x18, 0x02, 0x12, 0x89, 0x01, 0x0a, 0x10,
	0x4c, 0x69, 0x73, 0x74, 0x44, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73,
	0x12, 0x34, 0x2e, 0x77, 0x67, 0x74, 0x77, 0x6f, 0x2e, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x5f,
	0x70, 0x6f, 0x72, 0x74, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x2e, 0x76, 0x31, 0x2e, 0x4c,
	0x69, 0x73, 0x74, 0x44, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x35, 0x2e, 0x77, 0x67, 0x74, 0x77, 0x6f, 0x2e, 0x6e,
	0x75, 0x6d, 0x62, 0x65, 0x72, 0x5f, 0x70, 0x6f, 0x72, 0x74, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74,
	0x79, 0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x44, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x08, 0xea,
	0xb5, 0x18, 0x00, 0xf8, 0xb5, 0x18, 0x02, 0x32, 0xd6, 0x03, 0x0a, 0x12, 0x4e, 0x75, 0x6d, 0x62,
	0x65, 0x72, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0xa4,
	0x01, 0x0a, 0x19, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x4f, 0x72, 0x55, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x12, 0x3d, 0x2e, 0x77,
	0x67, 0x74, 0x77, 0x6f, 0x2e, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x5f, 0x70, 0x6f, 0x72, 0x74,
	0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74,
	0x65, 0x4f, 0x72, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x42,
	0x6c, 0x6f, 0x63, 0x6b, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x3e, 0x2e, 0x77, 0x67,
	0x74, 0x77, 0x6f, 0x2e, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x5f, 0x70, 0x6f, 0x72, 0x74, 0x61,
	0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x4f, 0x72, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x42, 0x6c,
	0x6f, 0x63, 0x6b, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x08, 0xea, 0xb5, 0x18,
	0x00, 0xf8, 0xb5, 0x18, 0x02, 0x12, 0x8c, 0x01, 0x0a, 0x11, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65,
	0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x12, 0x35, 0x2e, 0x77, 0x67,
	0x74, 0x77, 0x6f, 0x2e, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x5f, 0x70, 0x6f, 0x72, 0x74, 0x61,
	0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65,
	0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x36, 0x2e, 0x77, 0x67, 0x74, 0x77, 0x6f, 0x2e, 0x6e, 0x75, 0x6d, 0x62, 0x65,
	0x72, 0x5f, 0x70, 0x6f, 0x72, 0x74, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x2e, 0x76, 0x31,
	0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x42, 0x6c, 0x6f,
	0x63, 0x6b, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x08, 0xea, 0xb5, 0x18, 0x00,
	0xf8, 0xb5, 0x18, 0x02, 0x12, 0x89, 0x01, 0x0a, 0x10, 0x4c, 0x69, 0x73, 0x74, 0x4e, 0x75, 0x6d,
	0x62, 0x65, 0x72, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x73, 0x12, 0x34, 0x2e, 0x77, 0x67, 0x74, 0x77,
	0x6f, 0x2e, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x5f, 0x70, 0x6f, 0x72, 0x74, 0x61, 0x62, 0x69,
	0x6c, 0x69, 0x74, 0x79, 0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x4e, 0x75, 0x6d, 0x62,
	0x65, 0x72, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x35, 0x2e, 0x77, 0x67, 0x74, 0x77, 0x6f, 0x2e, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x5f, 0x70,
	0x6f, 0x72, 0x74, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x69,
	0x73, 0x74, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x73, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x08, 0xea, 0xb5, 0x18, 0x00, 0xf8, 0xb5, 0x18, 0x02,
	0x42, 0x87, 0x02, 0x0a, 0x1f, 0x63, 0x6f, 0x6d, 0x2e, 0x77, 0x67, 0x74, 0x77, 0x6f, 0x2e, 0x6e,
	0x75, 0x6d, 0x62, 0x65, 0x72, 0x5f, 0x70, 0x6f, 0x72, 0x74, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74,
	0x79, 0x2e, 0x76, 0x31, 0x42, 0x16, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x50, 0x6f, 0x72, 0x74,
	0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x50, 0x01, 0x5a, 0x42,
	0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x77, 0x6f, 0x72, 0x6b, 0x69,
	0x6e, 0x67, 0x2d, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x2d, 0x74, 0x77, 0x6f, 0x2f, 0x77, 0x67, 0x74,
	0x77, 0x6f, 0x61, 0x70, 0x69, 0x73, 0x2f, 0x77, 0x67, 0x74, 0x77, 0x6f, 0x2f, 0x6e, 0x75, 0x6d,
	0x62, 0x65, 0x72, 0x5f, 0x70, 0x6f, 0x72, 0x74, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x2f,
	0x76, 0x31, 0xa2, 0x02, 0x03, 0x57, 0x4e, 0x58, 0xaa, 0x02, 0x1a, 0x57, 0x67, 0x74, 0x77, 0x6f,
	0x2e, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x50, 0x6f, 0x72, 0x74, 0x61, 0x62, 0x69, 0x6c, 0x69,
	0x74, 0x79, 0x2e, 0x56, 0x31, 0xca, 0x02, 0x1a, 0x57, 0x67, 0x74, 0x77, 0x6f, 0x5c, 0x4e, 0x75,
	0x6d, 0x62, 0x65, 0x72, 0x50, 0x6f, 0x72, 0x74, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x5c,
	0x56, 0x31, 0xe2, 0x02, 0x26, 0x57, 0x67, 0x74, 0x77, 0x6f, 0x5c, 0x4e, 0x75, 0x6d, 0x62, 0x65,
	0x72, 0x50, 0x6f, 0x72, 0x74, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x5c, 0x56, 0x31, 0x5c,
	0x47, 0x50, 0x42, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0xea, 0x02, 0x1c, 0x57, 0x67,
	0x74, 0x77, 0x6f, 0x3a, 0x3a, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x50, 0x6f, 0x72, 0x74, 0x61,
	0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x3a, 0x3a, 0x56, 0x31, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x33,
}

var (
	file_wgtwo_number_portability_v1_number_portability_proto_rawDescOnce sync.Once
	file_wgtwo_number_portability_v1_number_portability_proto_rawDescData = file_wgtwo_number_portability_v1_number_portability_proto_rawDesc
)

func file_wgtwo_number_portability_v1_number_portability_proto_rawDescGZIP() []byte {
	file_wgtwo_number_portability_v1_number_portability_proto_rawDescOnce.Do(func() {
		file_wgtwo_number_portability_v1_number_portability_proto_rawDescData = protoimpl.X.CompressGZIP(file_wgtwo_number_portability_v1_number_portability_proto_rawDescData)
	})
	return file_wgtwo_number_portability_v1_number_portability_proto_rawDescData
}

var file_wgtwo_number_portability_v1_number_portability_proto_enumTypes = make([]protoimpl.EnumInfo, 1)
var file_wgtwo_number_portability_v1_number_portability_proto_msgTypes = make([]protoimpl.MessageInfo, 20)
var file_wgtwo_number_portability_v1_number_portability_proto_goTypes = []any{
	(NumberBlockStatus)(0),                    // 0: wgtwo.number_portability.v1.NumberBlockStatus
	(*CreatePortingRecordsRequest)(nil),       // 1: wgtwo.number_portability.v1.CreatePortingRecordsRequest
	(*CreatePortingRecordsResponse)(nil),      // 2: wgtwo.number_portability.v1.CreatePortingRecordsResponse
	(*ListPortingRecordsRequest)(nil),         // 3: wgtwo.number_portability.v1.ListPortingRecordsRequest
	(*ListPortingRecordsResponse)(nil),        // 4: wgtwo.number_portability.v1.ListPortingRecordsResponse
	(*PortingRecord)(nil),                     // 5: wgtwo.number_portability.v1.PortingRecord
	(*CreateOrUpdateDestinationRequest)(nil),  // 6: wgtwo.number_portability.v1.CreateOrUpdateDestinationRequest
	(*CreateOrUpdateDestinationResponse)(nil), // 7: wgtwo.number_portability.v1.CreateOrUpdateDestinationResponse
	(*DeleteDestinationRequest)(nil),          // 8: wgtwo.number_portability.v1.DeleteDestinationRequest
	(*DeleteDestinationResponse)(nil),         // 9: wgtwo.number_portability.v1.DeleteDestinationResponse
	(*ListDestinationsRequest)(nil),           // 10: wgtwo.number_portability.v1.ListDestinationsRequest
	(*ListDestinationsResponse)(nil),          // 11: wgtwo.number_portability.v1.ListDestinationsResponse
	(*RoutingDestination)(nil),                // 12: wgtwo.number_portability.v1.RoutingDestination
	(*CreateOrUpdateNumberBlockRequest)(nil),  // 13: wgtwo.number_portability.v1.CreateOrUpdateNumberBlockRequest
	(*CreateOrUpdateNumberBlockResponse)(nil), // 14: wgtwo.number_portability.v1.CreateOrUpdateNumberBlockResponse
	(*DeleteNumberBlockRequest)(nil),          // 15: wgtwo.number_portability.v1.DeleteNumberBlockRequest
	(*DeleteNumberBlockResponse)(nil),         // 16: wgtwo.number_portability.v1.DeleteNumberBlockResponse
	(*ListNumberBlocksRequest)(nil),           // 17: wgtwo.number_portability.v1.ListNumberBlocksRequest
	(*ListNumberBlocksResponse)(nil),          // 18: wgtwo.number_portability.v1.ListNumberBlocksResponse
	(*NumberBlock)(nil),                       // 19: wgtwo.number_portability.v1.NumberBlock
	nil,                                       // 20: wgtwo.number_portability.v1.PortingRecord.MetadataEntry
	(*timestamppb.Timestamp)(nil),             // 21: google.protobuf.Timestamp
	(*v1.E164)(nil),                           // 22: wgtwo.common.v1.E164
}
var file_wgtwo_number_portability_v1_number_portability_proto_depIdxs = []int32{
	5,  // 0: wgtwo.number_portability.v1.CreatePortingRecordsRequest.records:type_name -> wgtwo.number_portability.v1.PortingRecord
	21, // 1: wgtwo.number_portability.v1.ListPortingRecordsRequest.valid_from:type_name -> google.protobuf.Timestamp
	5,  // 2: wgtwo.number_portability.v1.ListPortingRecordsResponse.records:type_name -> wgtwo.number_portability.v1.PortingRecord
	22, // 3: wgtwo.number_portability.v1.PortingRecord.subscriber_number:type_name -> wgtwo.common.v1.E164
	21, // 4: wgtwo.number_portability.v1.PortingRecord.valid_from:type_name -> google.protobuf.Timestamp
	20, // 5: wgtwo.number_portability.v1.PortingRecord.metadata:type_name -> wgtwo.number_portability.v1.PortingRecord.MetadataEntry
	12, // 6: wgtwo.number_portability.v1.CreateOrUpdateDestinationRequest.destination:type_name -> wgtwo.number_portability.v1.RoutingDestination
	12, // 7: wgtwo.number_portability.v1.ListDestinationsResponse.destinations:type_name -> wgtwo.number_portability.v1.RoutingDestination
	19, // 8: wgtwo.number_portability.v1.CreateOrUpdateNumberBlockRequest.block:type_name -> wgtwo.number_portability.v1.NumberBlock
	0,  // 9: wgtwo.number_portability.v1.ListNumberBlocksRequest.status:type_name -> wgtwo.number_portability.v1.NumberBlockStatus
	19, // 10: wgtwo.number_portability.v1.ListNumberBlocksResponse.blocks:type_name -> wgtwo.number_portability.v1.NumberBlock
	0,  // 11: wgtwo.number_portability.v1.NumberBlock.status:type_name -> wgtwo.number_portability.v1.NumberBlockStatus
	21, // 12: wgtwo.number_portability.v1.NumberBlock.assignment_date:type_name -> google.protobuf.Timestamp
	1,  // 13: wgtwo.number_portability.v1.NumberPortabilityService.CreatePortingRecords:input_type -> wgtwo.number_portability.v1.CreatePortingRecordsRequest
	3,  // 14: wgtwo.number_portability.v1.NumberPortabilityService.ListPortingRecords:input_type -> wgtwo.number_portability.v1.ListPortingRecordsRequest
	6,  // 15: wgtwo.number_portability.v1.RoutingDestinationService.CreateOrUpdateDestination:input_type -> wgtwo.number_portability.v1.CreateOrUpdateDestinationRequest
	8,  // 16: wgtwo.number_portability.v1.RoutingDestinationService.DeleteDestination:input_type -> wgtwo.number_portability.v1.DeleteDestinationRequest
	10, // 17: wgtwo.number_portability.v1.RoutingDestinationService.ListDestinations:input_type -> wgtwo.number_portability.v1.ListDestinationsRequest
	13, // 18: wgtwo.number_portability.v1.NumberBlockService.CreateOrUpdateNumberBlock:input_type -> wgtwo.number_portability.v1.CreateOrUpdateNumberBlockRequest
	15, // 19: wgtwo.number_portability.v1.NumberBlockService.DeleteNumberBlock:input_type -> wgtwo.number_portability.v1.DeleteNumberBlockRequest
	17, // 20: wgtwo.number_portability.v1.NumberBlockService.ListNumberBlocks:input_type -> wgtwo.number_portability.v1.ListNumberBlocksRequest
	2,  // 21: wgtwo.number_portability.v1.NumberPortabilityService.CreatePortingRecords:output_type -> wgtwo.number_portability.v1.CreatePortingRecordsResponse
	4,  // 22: wgtwo.number_portability.v1.NumberPortabilityService.ListPortingRecords:output_type -> wgtwo.number_portability.v1.ListPortingRecordsResponse
	7,  // 23: wgtwo.number_portability.v1.RoutingDestinationService.CreateOrUpdateDestination:output_type -> wgtwo.number_portability.v1.CreateOrUpdateDestinationResponse
	9,  // 24: wgtwo.number_portability.v1.RoutingDestinationService.DeleteDestination:output_type -> wgtwo.number_portability.v1.DeleteDestinationResponse
	11, // 25: wgtwo.number_portability.v1.RoutingDestinationService.ListDestinations:output_type -> wgtwo.number_portability.v1.ListDestinationsResponse
	14, // 26: wgtwo.number_portability.v1.NumberBlockService.CreateOrUpdateNumberBlock:output_type -> wgtwo.number_portability.v1.CreateOrUpdateNumberBlockResponse
	16, // 27: wgtwo.number_portability.v1.NumberBlockService.DeleteNumberBlock:output_type -> wgtwo.number_portability.v1.DeleteNumberBlockResponse
	18, // 28: wgtwo.number_portability.v1.NumberBlockService.ListNumberBlocks:output_type -> wgtwo.number_portability.v1.ListNumberBlocksResponse
	21, // [21:29] is the sub-list for method output_type
	13, // [13:21] is the sub-list for method input_type
	13, // [13:13] is the sub-list for extension type_name
	13, // [13:13] is the sub-list for extension extendee
	0,  // [0:13] is the sub-list for field type_name
}

func init() { file_wgtwo_number_portability_v1_number_portability_proto_init() }
func file_wgtwo_number_portability_v1_number_portability_proto_init() {
	if File_wgtwo_number_portability_v1_number_portability_proto != nil {
		return
	}
	file_wgtwo_number_portability_v1_number_portability_proto_msgTypes[2].OneofWrappers = []any{}
	file_wgtwo_number_portability_v1_number_portability_proto_msgTypes[9].OneofWrappers = []any{}
	file_wgtwo_number_portability_v1_number_portability_proto_msgTypes[16].OneofWrappers = []any{}
	file_wgtwo_number_portability_v1_number_portability_proto_msgTypes[18].OneofWrappers = []any{}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_wgtwo_number_portability_v1_number_portability_proto_rawDesc,
			NumEnums:      1,
			NumMessages:   20,
			NumExtensions: 0,
			NumServices:   3,
		},
		GoTypes:           file_wgtwo_number_portability_v1_number_portability_proto_goTypes,
		DependencyIndexes: file_wgtwo_number_portability_v1_number_portability_proto_depIdxs,
		EnumInfos:         file_wgtwo_number_portability_v1_number_portability_proto_enumTypes,
		MessageInfos:      file_wgtwo_number_portability_v1_number_portability_proto_msgTypes,
	}.Build()
	File_wgtwo_number_portability_v1_number_portability_proto = out.File
	file_wgtwo_number_portability_v1_number_portability_proto_rawDesc = nil
	file_wgtwo_number_portability_v1_number_portability_proto_goTypes = nil
	file_wgtwo_number_portability_v1_number_portability_proto_depIdxs = nil
}
