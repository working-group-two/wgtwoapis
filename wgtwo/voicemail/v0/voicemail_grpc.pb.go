// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             (unknown)
// source: wgtwo/voicemail/v0/voicemail.proto

package v0

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// VoicemailMediaServiceClient is the client API for VoicemailMediaService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type VoicemailMediaServiceClient interface {
	//
	// Receive metadata for each voicemail available for a given MSISDN.
	// The metadata contains information about the corresponding voicemail including its ID,
	// allowing the user to fetch the voicemail media file.
	//
	// Client-side errors:
	// - INVALID ARGUMENT: Invalid MSISDN
	// - INTERNAL: DB error
	GetAllVoicemailMetadata(ctx context.Context, in *GetAllVoicemailMetadataRequest, opts ...grpc.CallOption) (*GetAllVoicemailMetadataResponse, error)
	//
	// Receive voicemail media file corresponding to the given voicemail ID.
	//
	// Client-side errors:
	// - INVALID ARGUMENT: Invalid voicemail ID
	// - NOT FOUND: Voicemail not found
	//
	// Server-side errors:
	// - INTERNAL: Voicemail file is too big to be returned
	// - INTERNAL: DB error
	GetVoicemail(ctx context.Context, in *GetVoicemailRequest, opts ...grpc.CallOption) (*GetVoicemailResponse, error)
	//
	// Mark as read the voicemail corresponding to the given voicemail ID.
	// This updates the "played" metadata of the voicemail to true.
	//
	// Client-side errors:
	// - INVALID ARGUMENT: Invalid voicemail ID
	// - NOT FOUND: Voicemail not found
	//
	// Server-side errors:
	// - INTERNAL: DB error
	MarkVoicemailAsRead(ctx context.Context, in *MarkVoicemailAsReadRequest, opts ...grpc.CallOption) (*MarkVoicemailAsReadResponse, error)
	//
	// Delete the voicemail corresponding to the given voicemail ID.
	// The voicemail media file and its metadata will be deleted.
	//
	// Client-side errors:
	// - INVALID ARGUMENT: Invalid voicemail ID
	// - NOT FOUND: Voicemail not found
	//
	// Server-side errors:
	// - INTERNAL: DB error
	DeleteVoicemail(ctx context.Context, in *DeleteVoicemailRequest, opts ...grpc.CallOption) (*DeleteVoicemailResponse, error)
	//
	// Resets the voicemail greeting of the given subscriber (MSISDN).
	// The voicemail greeting (media file) will be deleted.
	//
	// Client-side errors:
	// - INVALID ARGUMENT: Invalid MSISDN
	//
	// Server-side errors:
	// - INTERNAL: DB error
	ResetVoicemailGreeting(ctx context.Context, in *ResetVoicemailGreetingRequest, opts ...grpc.CallOption) (*ResetVoicemailGreetingResponse, error)
}

type voicemailMediaServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewVoicemailMediaServiceClient(cc grpc.ClientConnInterface) VoicemailMediaServiceClient {
	return &voicemailMediaServiceClient{cc}
}

func (c *voicemailMediaServiceClient) GetAllVoicemailMetadata(ctx context.Context, in *GetAllVoicemailMetadataRequest, opts ...grpc.CallOption) (*GetAllVoicemailMetadataResponse, error) {
	out := new(GetAllVoicemailMetadataResponse)
	err := c.cc.Invoke(ctx, "/wgtwo.voicemail.v0.VoicemailMediaService/GetAllVoicemailMetadata", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *voicemailMediaServiceClient) GetVoicemail(ctx context.Context, in *GetVoicemailRequest, opts ...grpc.CallOption) (*GetVoicemailResponse, error) {
	out := new(GetVoicemailResponse)
	err := c.cc.Invoke(ctx, "/wgtwo.voicemail.v0.VoicemailMediaService/GetVoicemail", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *voicemailMediaServiceClient) MarkVoicemailAsRead(ctx context.Context, in *MarkVoicemailAsReadRequest, opts ...grpc.CallOption) (*MarkVoicemailAsReadResponse, error) {
	out := new(MarkVoicemailAsReadResponse)
	err := c.cc.Invoke(ctx, "/wgtwo.voicemail.v0.VoicemailMediaService/MarkVoicemailAsRead", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *voicemailMediaServiceClient) DeleteVoicemail(ctx context.Context, in *DeleteVoicemailRequest, opts ...grpc.CallOption) (*DeleteVoicemailResponse, error) {
	out := new(DeleteVoicemailResponse)
	err := c.cc.Invoke(ctx, "/wgtwo.voicemail.v0.VoicemailMediaService/DeleteVoicemail", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *voicemailMediaServiceClient) ResetVoicemailGreeting(ctx context.Context, in *ResetVoicemailGreetingRequest, opts ...grpc.CallOption) (*ResetVoicemailGreetingResponse, error) {
	out := new(ResetVoicemailGreetingResponse)
	err := c.cc.Invoke(ctx, "/wgtwo.voicemail.v0.VoicemailMediaService/ResetVoicemailGreeting", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// VoicemailMediaServiceServer is the server API for VoicemailMediaService service.
// All implementations should embed UnimplementedVoicemailMediaServiceServer
// for forward compatibility
type VoicemailMediaServiceServer interface {
	//
	// Receive metadata for each voicemail available for a given MSISDN.
	// The metadata contains information about the corresponding voicemail including its ID,
	// allowing the user to fetch the voicemail media file.
	//
	// Client-side errors:
	// - INVALID ARGUMENT: Invalid MSISDN
	// - INTERNAL: DB error
	GetAllVoicemailMetadata(context.Context, *GetAllVoicemailMetadataRequest) (*GetAllVoicemailMetadataResponse, error)
	//
	// Receive voicemail media file corresponding to the given voicemail ID.
	//
	// Client-side errors:
	// - INVALID ARGUMENT: Invalid voicemail ID
	// - NOT FOUND: Voicemail not found
	//
	// Server-side errors:
	// - INTERNAL: Voicemail file is too big to be returned
	// - INTERNAL: DB error
	GetVoicemail(context.Context, *GetVoicemailRequest) (*GetVoicemailResponse, error)
	//
	// Mark as read the voicemail corresponding to the given voicemail ID.
	// This updates the "played" metadata of the voicemail to true.
	//
	// Client-side errors:
	// - INVALID ARGUMENT: Invalid voicemail ID
	// - NOT FOUND: Voicemail not found
	//
	// Server-side errors:
	// - INTERNAL: DB error
	MarkVoicemailAsRead(context.Context, *MarkVoicemailAsReadRequest) (*MarkVoicemailAsReadResponse, error)
	//
	// Delete the voicemail corresponding to the given voicemail ID.
	// The voicemail media file and its metadata will be deleted.
	//
	// Client-side errors:
	// - INVALID ARGUMENT: Invalid voicemail ID
	// - NOT FOUND: Voicemail not found
	//
	// Server-side errors:
	// - INTERNAL: DB error
	DeleteVoicemail(context.Context, *DeleteVoicemailRequest) (*DeleteVoicemailResponse, error)
	//
	// Resets the voicemail greeting of the given subscriber (MSISDN).
	// The voicemail greeting (media file) will be deleted.
	//
	// Client-side errors:
	// - INVALID ARGUMENT: Invalid MSISDN
	//
	// Server-side errors:
	// - INTERNAL: DB error
	ResetVoicemailGreeting(context.Context, *ResetVoicemailGreetingRequest) (*ResetVoicemailGreetingResponse, error)
}

// UnimplementedVoicemailMediaServiceServer should be embedded to have forward compatible implementations.
type UnimplementedVoicemailMediaServiceServer struct {
}

func (UnimplementedVoicemailMediaServiceServer) GetAllVoicemailMetadata(context.Context, *GetAllVoicemailMetadataRequest) (*GetAllVoicemailMetadataResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAllVoicemailMetadata not implemented")
}
func (UnimplementedVoicemailMediaServiceServer) GetVoicemail(context.Context, *GetVoicemailRequest) (*GetVoicemailResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetVoicemail not implemented")
}
func (UnimplementedVoicemailMediaServiceServer) MarkVoicemailAsRead(context.Context, *MarkVoicemailAsReadRequest) (*MarkVoicemailAsReadResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MarkVoicemailAsRead not implemented")
}
func (UnimplementedVoicemailMediaServiceServer) DeleteVoicemail(context.Context, *DeleteVoicemailRequest) (*DeleteVoicemailResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteVoicemail not implemented")
}
func (UnimplementedVoicemailMediaServiceServer) ResetVoicemailGreeting(context.Context, *ResetVoicemailGreetingRequest) (*ResetVoicemailGreetingResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ResetVoicemailGreeting not implemented")
}

// UnsafeVoicemailMediaServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to VoicemailMediaServiceServer will
// result in compilation errors.
type UnsafeVoicemailMediaServiceServer interface {
	mustEmbedUnimplementedVoicemailMediaServiceServer()
}

func RegisterVoicemailMediaServiceServer(s grpc.ServiceRegistrar, srv VoicemailMediaServiceServer) {
	s.RegisterService(&VoicemailMediaService_ServiceDesc, srv)
}

func _VoicemailMediaService_GetAllVoicemailMetadata_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetAllVoicemailMetadataRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VoicemailMediaServiceServer).GetAllVoicemailMetadata(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/wgtwo.voicemail.v0.VoicemailMediaService/GetAllVoicemailMetadata",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VoicemailMediaServiceServer).GetAllVoicemailMetadata(ctx, req.(*GetAllVoicemailMetadataRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _VoicemailMediaService_GetVoicemail_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetVoicemailRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VoicemailMediaServiceServer).GetVoicemail(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/wgtwo.voicemail.v0.VoicemailMediaService/GetVoicemail",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VoicemailMediaServiceServer).GetVoicemail(ctx, req.(*GetVoicemailRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _VoicemailMediaService_MarkVoicemailAsRead_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MarkVoicemailAsReadRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VoicemailMediaServiceServer).MarkVoicemailAsRead(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/wgtwo.voicemail.v0.VoicemailMediaService/MarkVoicemailAsRead",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VoicemailMediaServiceServer).MarkVoicemailAsRead(ctx, req.(*MarkVoicemailAsReadRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _VoicemailMediaService_DeleteVoicemail_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteVoicemailRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VoicemailMediaServiceServer).DeleteVoicemail(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/wgtwo.voicemail.v0.VoicemailMediaService/DeleteVoicemail",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VoicemailMediaServiceServer).DeleteVoicemail(ctx, req.(*DeleteVoicemailRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _VoicemailMediaService_ResetVoicemailGreeting_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ResetVoicemailGreetingRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VoicemailMediaServiceServer).ResetVoicemailGreeting(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/wgtwo.voicemail.v0.VoicemailMediaService/ResetVoicemailGreeting",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VoicemailMediaServiceServer).ResetVoicemailGreeting(ctx, req.(*ResetVoicemailGreetingRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// VoicemailMediaService_ServiceDesc is the grpc.ServiceDesc for VoicemailMediaService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var VoicemailMediaService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "wgtwo.voicemail.v0.VoicemailMediaService",
	HandlerType: (*VoicemailMediaServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetAllVoicemailMetadata",
			Handler:    _VoicemailMediaService_GetAllVoicemailMetadata_Handler,
		},
		{
			MethodName: "GetVoicemail",
			Handler:    _VoicemailMediaService_GetVoicemail_Handler,
		},
		{
			MethodName: "MarkVoicemailAsRead",
			Handler:    _VoicemailMediaService_MarkVoicemailAsRead_Handler,
		},
		{
			MethodName: "DeleteVoicemail",
			Handler:    _VoicemailMediaService_DeleteVoicemail_Handler,
		},
		{
			MethodName: "ResetVoicemailGreeting",
			Handler:    _VoicemailMediaService_ResetVoicemailGreeting_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "wgtwo/voicemail/v0/voicemail.proto",
}
