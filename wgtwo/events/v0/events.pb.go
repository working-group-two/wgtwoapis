// Copyright 2020 Working Group Two AS
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.28.1
// 	protoc        (unknown)
// source: wgtwo/events/v0/events.proto

package v0

import (
	_ "github.com/working-group-two/wgtwoapis/wgtwo/annotations"
	v0 "github.com/working-group-two/wgtwoapis/wgtwo/common/v0"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	durationpb "google.golang.org/protobuf/types/known/durationpb"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type EventType int32

const (
	EventType_UNSPECIFIED               EventType = 0
	EventType_VOICE_EVENT               EventType = 1
	EventType_VOICEMAIL_EVENT           EventType = 2
	EventType_LOCATION_UPDATE_EVENT     EventType = 3
	EventType_COUNTRY_CHANGE_EVENT      EventType = 4
	EventType_TOKEN_AUDIT_EVENT         EventType = 5
	EventType_SMS_EVENT                 EventType = 6
	EventType_SMS_DELIVERY_REPORT_EVENT EventType = 7
	EventType_CONSENT_REVOKE_EVENT      EventType = 8
	EventType_HANDSET_UPDATE_EVENT      EventType = 9
	EventType_FIRST_ATTACHMENT_EVENT    EventType = 10
	EventType_PERIODIC_COUNTRY_EVENT    EventType = 11
)

// Enum value maps for EventType.
var (
	EventType_name = map[int32]string{
		0:  "UNSPECIFIED",
		1:  "VOICE_EVENT",
		2:  "VOICEMAIL_EVENT",
		3:  "LOCATION_UPDATE_EVENT",
		4:  "COUNTRY_CHANGE_EVENT",
		5:  "TOKEN_AUDIT_EVENT",
		6:  "SMS_EVENT",
		7:  "SMS_DELIVERY_REPORT_EVENT",
		8:  "CONSENT_REVOKE_EVENT",
		9:  "HANDSET_UPDATE_EVENT",
		10: "FIRST_ATTACHMENT_EVENT",
		11: "PERIODIC_COUNTRY_EVENT",
	}
	EventType_value = map[string]int32{
		"UNSPECIFIED":               0,
		"VOICE_EVENT":               1,
		"VOICEMAIL_EVENT":           2,
		"LOCATION_UPDATE_EVENT":     3,
		"COUNTRY_CHANGE_EVENT":      4,
		"TOKEN_AUDIT_EVENT":         5,
		"SMS_EVENT":                 6,
		"SMS_DELIVERY_REPORT_EVENT": 7,
		"CONSENT_REVOKE_EVENT":      8,
		"HANDSET_UPDATE_EVENT":      9,
		"FIRST_ATTACHMENT_EVENT":    10,
		"PERIODIC_COUNTRY_EVENT":    11,
	}
)

func (x EventType) Enum() *EventType {
	p := new(EventType)
	*p = x
	return p
}

func (x EventType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (EventType) Descriptor() protoreflect.EnumDescriptor {
	return file_wgtwo_events_v0_events_proto_enumTypes[0].Descriptor()
}

func (EventType) Type() protoreflect.EnumType {
	return &file_wgtwo_events_v0_events_proto_enumTypes[0]
}

func (x EventType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use EventType.Descriptor instead.
func (EventType) EnumDescriptor() ([]byte, []int) {
	return file_wgtwo_events_v0_events_proto_rawDescGZIP(), []int{0}
}

type VoiceEvent_VoiceEventType int32

const (
	VoiceEvent_UNSPECIFIED        VoiceEvent_VoiceEventType = 0
	VoiceEvent_CALL_INITIATED     VoiceEvent_VoiceEventType = 1
	VoiceEvent_CALL_RINGING       VoiceEvent_VoiceEventType = 2
	VoiceEvent_CALL_ANSWERED      VoiceEvent_VoiceEventType = 3
	VoiceEvent_CALL_ENDED         VoiceEvent_VoiceEventType = 4
	VoiceEvent_CALL_FWD_VOICEMAIL VoiceEvent_VoiceEventType = 5
)

// Enum value maps for VoiceEvent_VoiceEventType.
var (
	VoiceEvent_VoiceEventType_name = map[int32]string{
		0: "UNSPECIFIED",
		1: "CALL_INITIATED",
		2: "CALL_RINGING",
		3: "CALL_ANSWERED",
		4: "CALL_ENDED",
		5: "CALL_FWD_VOICEMAIL",
	}
	VoiceEvent_VoiceEventType_value = map[string]int32{
		"UNSPECIFIED":        0,
		"CALL_INITIATED":     1,
		"CALL_RINGING":       2,
		"CALL_ANSWERED":      3,
		"CALL_ENDED":         4,
		"CALL_FWD_VOICEMAIL": 5,
	}
)

func (x VoiceEvent_VoiceEventType) Enum() *VoiceEvent_VoiceEventType {
	p := new(VoiceEvent_VoiceEventType)
	*p = x
	return p
}

func (x VoiceEvent_VoiceEventType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (VoiceEvent_VoiceEventType) Descriptor() protoreflect.EnumDescriptor {
	return file_wgtwo_events_v0_events_proto_enumTypes[1].Descriptor()
}

func (VoiceEvent_VoiceEventType) Type() protoreflect.EnumType {
	return &file_wgtwo_events_v0_events_proto_enumTypes[1]
}

func (x VoiceEvent_VoiceEventType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use VoiceEvent_VoiceEventType.Descriptor instead.
func (VoiceEvent_VoiceEventType) EnumDescriptor() ([]byte, []int) {
	return file_wgtwo_events_v0_events_proto_rawDescGZIP(), []int{9, 0}
}

type VoicemailEvent_VoicemailEventType int32

const (
	VoicemailEvent_UNSPECIFIED   VoicemailEvent_VoicemailEventType = 0
	VoicemailEvent_NEW_VOICEMAIL VoicemailEvent_VoicemailEventType = 1
)

// Enum value maps for VoicemailEvent_VoicemailEventType.
var (
	VoicemailEvent_VoicemailEventType_name = map[int32]string{
		0: "UNSPECIFIED",
		1: "NEW_VOICEMAIL",
	}
	VoicemailEvent_VoicemailEventType_value = map[string]int32{
		"UNSPECIFIED":   0,
		"NEW_VOICEMAIL": 1,
	}
)

func (x VoicemailEvent_VoicemailEventType) Enum() *VoicemailEvent_VoicemailEventType {
	p := new(VoicemailEvent_VoicemailEventType)
	*p = x
	return p
}

func (x VoicemailEvent_VoicemailEventType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (VoicemailEvent_VoicemailEventType) Descriptor() protoreflect.EnumDescriptor {
	return file_wgtwo_events_v0_events_proto_enumTypes[2].Descriptor()
}

func (VoicemailEvent_VoicemailEventType) Type() protoreflect.EnumType {
	return &file_wgtwo_events_v0_events_proto_enumTypes[2]
}

func (x VoicemailEvent_VoicemailEventType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use VoicemailEvent_VoicemailEventType.Descriptor instead.
func (VoicemailEvent_VoicemailEventType) EnumDescriptor() ([]byte, []int) {
	return file_wgtwo_events_v0_events_proto_rawDescGZIP(), []int{10, 0}
}

type TokenAuditEvent_Operation int32

const (
	TokenAuditEvent_UNDEFINED TokenAuditEvent_Operation = 0
	TokenAuditEvent_CREATED   TokenAuditEvent_Operation = 1
	TokenAuditEvent_MODIFIED  TokenAuditEvent_Operation = 2
	TokenAuditEvent_DELETED   TokenAuditEvent_Operation = 3
)

// Enum value maps for TokenAuditEvent_Operation.
var (
	TokenAuditEvent_Operation_name = map[int32]string{
		0: "UNDEFINED",
		1: "CREATED",
		2: "MODIFIED",
		3: "DELETED",
	}
	TokenAuditEvent_Operation_value = map[string]int32{
		"UNDEFINED": 0,
		"CREATED":   1,
		"MODIFIED":  2,
		"DELETED":   3,
	}
)

func (x TokenAuditEvent_Operation) Enum() *TokenAuditEvent_Operation {
	p := new(TokenAuditEvent_Operation)
	*p = x
	return p
}

func (x TokenAuditEvent_Operation) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (TokenAuditEvent_Operation) Descriptor() protoreflect.EnumDescriptor {
	return file_wgtwo_events_v0_events_proto_enumTypes[3].Descriptor()
}

func (TokenAuditEvent_Operation) Type() protoreflect.EnumType {
	return &file_wgtwo_events_v0_events_proto_enumTypes[3]
}

func (x TokenAuditEvent_Operation) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use TokenAuditEvent_Operation.Descriptor instead.
func (TokenAuditEvent_Operation) EnumDescriptor() ([]byte, []int) {
	return file_wgtwo_events_v0_events_proto_rawDescGZIP(), []int{15, 0}
}

type SmsEvent_Direction int32

const (
	SmsEvent_UNKNOWN         SmsEvent_Direction = 0
	SmsEvent_FROM_SUBSCRIBER SmsEvent_Direction = 1
	SmsEvent_TO_SUBSCRIBER   SmsEvent_Direction = 2
)

// Enum value maps for SmsEvent_Direction.
var (
	SmsEvent_Direction_name = map[int32]string{
		0: "UNKNOWN",
		1: "FROM_SUBSCRIBER",
		2: "TO_SUBSCRIBER",
	}
	SmsEvent_Direction_value = map[string]int32{
		"UNKNOWN":         0,
		"FROM_SUBSCRIBER": 1,
		"TO_SUBSCRIBER":   2,
	}
)

func (x SmsEvent_Direction) Enum() *SmsEvent_Direction {
	p := new(SmsEvent_Direction)
	*p = x
	return p
}

func (x SmsEvent_Direction) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (SmsEvent_Direction) Descriptor() protoreflect.EnumDescriptor {
	return file_wgtwo_events_v0_events_proto_enumTypes[4].Descriptor()
}

func (SmsEvent_Direction) Type() protoreflect.EnumType {
	return &file_wgtwo_events_v0_events_proto_enumTypes[4]
}

func (x SmsEvent_Direction) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use SmsEvent_Direction.Descriptor instead.
func (SmsEvent_Direction) EnumDescriptor() ([]byte, []int) {
	return file_wgtwo_events_v0_events_proto_rawDescGZIP(), []int{16, 0}
}

type SmsDeliveryReportEvent_Direction int32

const (
	SmsDeliveryReportEvent_DIRECTION_UNKNOWN SmsDeliveryReportEvent_Direction = 0
	SmsDeliveryReportEvent_FROM_SUBSCRIBER   SmsDeliveryReportEvent_Direction = 1
	SmsDeliveryReportEvent_TO_SUBSCRIBER     SmsDeliveryReportEvent_Direction = 2
)

// Enum value maps for SmsDeliveryReportEvent_Direction.
var (
	SmsDeliveryReportEvent_Direction_name = map[int32]string{
		0: "DIRECTION_UNKNOWN",
		1: "FROM_SUBSCRIBER",
		2: "TO_SUBSCRIBER",
	}
	SmsDeliveryReportEvent_Direction_value = map[string]int32{
		"DIRECTION_UNKNOWN": 0,
		"FROM_SUBSCRIBER":   1,
		"TO_SUBSCRIBER":     2,
	}
)

func (x SmsDeliveryReportEvent_Direction) Enum() *SmsDeliveryReportEvent_Direction {
	p := new(SmsDeliveryReportEvent_Direction)
	*p = x
	return p
}

func (x SmsDeliveryReportEvent_Direction) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (SmsDeliveryReportEvent_Direction) Descriptor() protoreflect.EnumDescriptor {
	return file_wgtwo_events_v0_events_proto_enumTypes[5].Descriptor()
}

func (SmsDeliveryReportEvent_Direction) Type() protoreflect.EnumType {
	return &file_wgtwo_events_v0_events_proto_enumTypes[5]
}

func (x SmsDeliveryReportEvent_Direction) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use SmsDeliveryReportEvent_Direction.Descriptor instead.
func (SmsDeliveryReportEvent_Direction) EnumDescriptor() ([]byte, []int) {
	return file_wgtwo_events_v0_events_proto_rawDescGZIP(), []int{17, 0}
}

type SmsDeliveryReportEvent_Status int32

const (
	SmsDeliveryReportEvent_STATUS_UNKNOWN    SmsDeliveryReportEvent_Status = 0
	SmsDeliveryReportEvent_DELIVERED         SmsDeliveryReportEvent_Status = 1
	SmsDeliveryReportEvent_TEMPORARY_FAILURE SmsDeliveryReportEvent_Status = 2
	SmsDeliveryReportEvent_FINAL_FAILURE     SmsDeliveryReportEvent_Status = 3
	SmsDeliveryReportEvent_EXPIRED           SmsDeliveryReportEvent_Status = 4
)

// Enum value maps for SmsDeliveryReportEvent_Status.
var (
	SmsDeliveryReportEvent_Status_name = map[int32]string{
		0: "STATUS_UNKNOWN",
		1: "DELIVERED",
		2: "TEMPORARY_FAILURE",
		3: "FINAL_FAILURE",
		4: "EXPIRED",
	}
	SmsDeliveryReportEvent_Status_value = map[string]int32{
		"STATUS_UNKNOWN":    0,
		"DELIVERED":         1,
		"TEMPORARY_FAILURE": 2,
		"FINAL_FAILURE":     3,
		"EXPIRED":           4,
	}
)

func (x SmsDeliveryReportEvent_Status) Enum() *SmsDeliveryReportEvent_Status {
	p := new(SmsDeliveryReportEvent_Status)
	*p = x
	return p
}

func (x SmsDeliveryReportEvent_Status) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (SmsDeliveryReportEvent_Status) Descriptor() protoreflect.EnumDescriptor {
	return file_wgtwo_events_v0_events_proto_enumTypes[6].Descriptor()
}

func (SmsDeliveryReportEvent_Status) Type() protoreflect.EnumType {
	return &file_wgtwo_events_v0_events_proto_enumTypes[6]
}

func (x SmsDeliveryReportEvent_Status) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use SmsDeliveryReportEvent_Status.Descriptor instead.
func (SmsDeliveryReportEvent_Status) EnumDescriptor() ([]byte, []int) {
	return file_wgtwo_events_v0_events_proto_rawDescGZIP(), []int{17, 1}
}

type ManualAckConfig struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Enable  bool                 `protobuf:"varint,1,opt,name=enable,proto3" json:"enable,omitempty"`
	Timeout *durationpb.Duration `protobuf:"bytes,2,opt,name=timeout,proto3" json:"timeout,omitempty"`
}

func (x *ManualAckConfig) Reset() {
	*x = ManualAckConfig{}
	if protoimpl.UnsafeEnabled {
		mi := &file_wgtwo_events_v0_events_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ManualAckConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ManualAckConfig) ProtoMessage() {}

func (x *ManualAckConfig) ProtoReflect() protoreflect.Message {
	mi := &file_wgtwo_events_v0_events_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ManualAckConfig.ProtoReflect.Descriptor instead.
func (*ManualAckConfig) Descriptor() ([]byte, []int) {
	return file_wgtwo_events_v0_events_proto_rawDescGZIP(), []int{0}
}

func (x *ManualAckConfig) GetEnable() bool {
	if x != nil {
		return x.Enable
	}
	return false
}

func (x *ManualAckConfig) GetTimeout() *durationpb.Duration {
	if x != nil {
		return x.Timeout
	}
	return nil
}

type SubscribeEventsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Type []EventType `protobuf:"varint,1,rep,packed,name=type,proto3,enum=wgtwo.events.v0.EventType" json:"type,omitempty"`
	// Types that are assignable to StartPosition:
	//	*SubscribeEventsRequest_StartAtSequence
	//	*SubscribeEventsRequest_StartAtTimestamp
	//	*SubscribeEventsRequest_StartAtTimeDelta
	//	*SubscribeEventsRequest_StartWithLastReceived
	//	*SubscribeEventsRequest_StartAtOldestPossible
	StartPosition isSubscribeEventsRequest_StartPosition `protobuf_oneof:"start_position"`
	ClientId      string                                 `protobuf:"bytes,6,opt,name=client_id,json=clientId,proto3" json:"client_id,omitempty"`
	QueueName     string                                 `protobuf:"bytes,7,opt,name=queue_name,json=queueName,proto3" json:"queue_name,omitempty"`
	DurableName   string                                 `protobuf:"bytes,8,opt,name=durable_name,json=durableName,proto3" json:"durable_name,omitempty"`
	MaxInFlight   uint32                                 `protobuf:"varint,9,opt,name=max_in_flight,json=maxInFlight,proto3" json:"max_in_flight,omitempty"`
	ManualAck     *ManualAckConfig                       `protobuf:"bytes,10,opt,name=manual_ack,json=manualAck,proto3" json:"manual_ack,omitempty"`
}

func (x *SubscribeEventsRequest) Reset() {
	*x = SubscribeEventsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_wgtwo_events_v0_events_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SubscribeEventsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SubscribeEventsRequest) ProtoMessage() {}

func (x *SubscribeEventsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_wgtwo_events_v0_events_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SubscribeEventsRequest.ProtoReflect.Descriptor instead.
func (*SubscribeEventsRequest) Descriptor() ([]byte, []int) {
	return file_wgtwo_events_v0_events_proto_rawDescGZIP(), []int{1}
}

func (x *SubscribeEventsRequest) GetType() []EventType {
	if x != nil {
		return x.Type
	}
	return nil
}

func (m *SubscribeEventsRequest) GetStartPosition() isSubscribeEventsRequest_StartPosition {
	if m != nil {
		return m.StartPosition
	}
	return nil
}

func (x *SubscribeEventsRequest) GetStartAtSequence() uint64 {
	if x, ok := x.GetStartPosition().(*SubscribeEventsRequest_StartAtSequence); ok {
		return x.StartAtSequence
	}
	return 0
}

func (x *SubscribeEventsRequest) GetStartAtTimestamp() *timestamppb.Timestamp {
	if x, ok := x.GetStartPosition().(*SubscribeEventsRequest_StartAtTimestamp); ok {
		return x.StartAtTimestamp
	}
	return nil
}

func (x *SubscribeEventsRequest) GetStartAtTimeDelta() *durationpb.Duration {
	if x, ok := x.GetStartPosition().(*SubscribeEventsRequest_StartAtTimeDelta); ok {
		return x.StartAtTimeDelta
	}
	return nil
}

func (x *SubscribeEventsRequest) GetStartWithLastReceived() *emptypb.Empty {
	if x, ok := x.GetStartPosition().(*SubscribeEventsRequest_StartWithLastReceived); ok {
		return x.StartWithLastReceived
	}
	return nil
}

func (x *SubscribeEventsRequest) GetStartAtOldestPossible() *emptypb.Empty {
	if x, ok := x.GetStartPosition().(*SubscribeEventsRequest_StartAtOldestPossible); ok {
		return x.StartAtOldestPossible
	}
	return nil
}

func (x *SubscribeEventsRequest) GetClientId() string {
	if x != nil {
		return x.ClientId
	}
	return ""
}

func (x *SubscribeEventsRequest) GetQueueName() string {
	if x != nil {
		return x.QueueName
	}
	return ""
}

func (x *SubscribeEventsRequest) GetDurableName() string {
	if x != nil {
		return x.DurableName
	}
	return ""
}

func (x *SubscribeEventsRequest) GetMaxInFlight() uint32 {
	if x != nil {
		return x.MaxInFlight
	}
	return 0
}

func (x *SubscribeEventsRequest) GetManualAck() *ManualAckConfig {
	if x != nil {
		return x.ManualAck
	}
	return nil
}

type isSubscribeEventsRequest_StartPosition interface {
	isSubscribeEventsRequest_StartPosition()
}

type SubscribeEventsRequest_StartAtSequence struct {
	StartAtSequence uint64 `protobuf:"varint,2,opt,name=start_at_sequence,json=startAtSequence,proto3,oneof"`
}

type SubscribeEventsRequest_StartAtTimestamp struct {
	StartAtTimestamp *timestamppb.Timestamp `protobuf:"bytes,3,opt,name=start_at_timestamp,json=startAtTimestamp,proto3,oneof"`
}

type SubscribeEventsRequest_StartAtTimeDelta struct {
	StartAtTimeDelta *durationpb.Duration `protobuf:"bytes,4,opt,name=start_at_time_delta,json=startAtTimeDelta,proto3,oneof"`
}

type SubscribeEventsRequest_StartWithLastReceived struct {
	StartWithLastReceived *emptypb.Empty `protobuf:"bytes,5,opt,name=start_with_last_received,json=startWithLastReceived,proto3,oneof"`
}

type SubscribeEventsRequest_StartAtOldestPossible struct {
	StartAtOldestPossible *emptypb.Empty `protobuf:"bytes,11,opt,name=start_at_oldest_possible,json=startAtOldestPossible,proto3,oneof"`
}

func (*SubscribeEventsRequest_StartAtSequence) isSubscribeEventsRequest_StartPosition() {}

func (*SubscribeEventsRequest_StartAtTimestamp) isSubscribeEventsRequest_StartPosition() {}

func (*SubscribeEventsRequest_StartAtTimeDelta) isSubscribeEventsRequest_StartPosition() {}

func (*SubscribeEventsRequest_StartWithLastReceived) isSubscribeEventsRequest_StartPosition() {}

func (*SubscribeEventsRequest_StartAtOldestPossible) isSubscribeEventsRequest_StartPosition() {}

type SubscribeEventsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Event *Event `protobuf:"bytes,1,opt,name=event,proto3" json:"event,omitempty"`
}

func (x *SubscribeEventsResponse) Reset() {
	*x = SubscribeEventsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_wgtwo_events_v0_events_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SubscribeEventsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SubscribeEventsResponse) ProtoMessage() {}

func (x *SubscribeEventsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_wgtwo_events_v0_events_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SubscribeEventsResponse.ProtoReflect.Descriptor instead.
func (*SubscribeEventsResponse) Descriptor() ([]byte, []int) {
	return file_wgtwo_events_v0_events_proto_rawDescGZIP(), []int{2}
}

func (x *SubscribeEventsResponse) GetEvent() *Event {
	if x != nil {
		return x.Event
	}
	return nil
}

type AckRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Inbox    string `protobuf:"bytes,1,opt,name=inbox,proto3" json:"inbox,omitempty"`
	Sequence uint64 `protobuf:"varint,2,opt,name=sequence,proto3" json:"sequence,omitempty"`
}

func (x *AckRequest) Reset() {
	*x = AckRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_wgtwo_events_v0_events_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AckRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AckRequest) ProtoMessage() {}

func (x *AckRequest) ProtoReflect() protoreflect.Message {
	mi := &file_wgtwo_events_v0_events_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AckRequest.ProtoReflect.Descriptor instead.
func (*AckRequest) Descriptor() ([]byte, []int) {
	return file_wgtwo_events_v0_events_proto_rawDescGZIP(), []int{3}
}

func (x *AckRequest) GetInbox() string {
	if x != nil {
		return x.Inbox
	}
	return ""
}

func (x *AckRequest) GetSequence() uint64 {
	if x != nil {
		return x.Sequence
	}
	return 0
}

type AckResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *AckResponse) Reset() {
	*x = AckResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_wgtwo_events_v0_events_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AckResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AckResponse) ProtoMessage() {}

func (x *AckResponse) ProtoReflect() protoreflect.Message {
	mi := &file_wgtwo_events_v0_events_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AckResponse.ProtoReflect.Descriptor instead.
func (*AckResponse) Descriptor() ([]byte, []int) {
	return file_wgtwo_events_v0_events_proto_rawDescGZIP(), []int{4}
}

type EventMetadata struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Sequence      uint64 `protobuf:"varint,1,opt,name=sequence,proto3" json:"sequence,omitempty"`
	IsRedelivered bool   `protobuf:"varint,2,opt,name=is_redelivered,json=isRedelivered,proto3" json:"is_redelivered,omitempty"`
	AckInbox      string `protobuf:"bytes,3,opt,name=ack_inbox,json=ackInbox,proto3" json:"ack_inbox,omitempty"`
}

func (x *EventMetadata) Reset() {
	*x = EventMetadata{}
	if protoimpl.UnsafeEnabled {
		mi := &file_wgtwo_events_v0_events_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EventMetadata) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EventMetadata) ProtoMessage() {}

func (x *EventMetadata) ProtoReflect() protoreflect.Message {
	mi := &file_wgtwo_events_v0_events_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EventMetadata.ProtoReflect.Descriptor instead.
func (*EventMetadata) Descriptor() ([]byte, []int) {
	return file_wgtwo_events_v0_events_proto_rawDescGZIP(), []int{5}
}

func (x *EventMetadata) GetSequence() uint64 {
	if x != nil {
		return x.Sequence
	}
	return 0
}

func (x *EventMetadata) GetIsRedelivered() bool {
	if x != nil {
		return x.IsRedelivered
	}
	return false
}

func (x *EventMetadata) GetAckInbox() string {
	if x != nil {
		return x.AckInbox
	}
	return ""
}

type Owner struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PhoneNumber *v0.PhoneNumber `protobuf:"bytes,1,opt,name=phone_number,json=phoneNumber,proto3" json:"phone_number,omitempty"`
	Sub         string          `protobuf:"bytes,2,opt,name=sub,proto3" json:"sub,omitempty"`
}

func (x *Owner) Reset() {
	*x = Owner{}
	if protoimpl.UnsafeEnabled {
		mi := &file_wgtwo_events_v0_events_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Owner) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Owner) ProtoMessage() {}

func (x *Owner) ProtoReflect() protoreflect.Message {
	mi := &file_wgtwo_events_v0_events_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Owner.ProtoReflect.Descriptor instead.
func (*Owner) Descriptor() ([]byte, []int) {
	return file_wgtwo_events_v0_events_proto_rawDescGZIP(), []int{6}
}

func (x *Owner) GetPhoneNumber() *v0.PhoneNumber {
	if x != nil {
		return x.PhoneNumber
	}
	return nil
}

func (x *Owner) GetSub() string {
	if x != nil {
		return x.Sub
	}
	return ""
}

type Event struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Metadata  *EventMetadata         `protobuf:"bytes,1,opt,name=metadata,proto3" json:"metadata,omitempty"`
	Timestamp *timestamppb.Timestamp `protobuf:"bytes,2,opt,name=timestamp,proto3" json:"timestamp,omitempty"`
	ServiceId string                 `protobuf:"bytes,3,opt,name=service_id,json=serviceId,proto3" json:"service_id,omitempty"`
	// Types that are assignable to Event:
	//	*Event_VoiceEvent
	//	*Event_VoicemailEvent
	//	*Event_LocationUpdateEvent
	//	*Event_CountryChangeEvent
	//	*Event_TokenAuditEvent
	//	*Event_SmsEvent
	//	*Event_SmsDeliveryReportEvent
	//	*Event_ConsentRevokeEvent
	//	*Event_HandsetUpdateEvent
	//	*Event_FirstAttachmentEvent
	//	*Event_PeriodicCountryEvent
	Event isEvent_Event `protobuf_oneof:"event"`
	Owner *Owner        `protobuf:"bytes,12,opt,name=owner,proto3" json:"owner,omitempty"`
}

func (x *Event) Reset() {
	*x = Event{}
	if protoimpl.UnsafeEnabled {
		mi := &file_wgtwo_events_v0_events_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Event) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Event) ProtoMessage() {}

func (x *Event) ProtoReflect() protoreflect.Message {
	mi := &file_wgtwo_events_v0_events_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Event.ProtoReflect.Descriptor instead.
func (*Event) Descriptor() ([]byte, []int) {
	return file_wgtwo_events_v0_events_proto_rawDescGZIP(), []int{7}
}

func (x *Event) GetMetadata() *EventMetadata {
	if x != nil {
		return x.Metadata
	}
	return nil
}

func (x *Event) GetTimestamp() *timestamppb.Timestamp {
	if x != nil {
		return x.Timestamp
	}
	return nil
}

func (x *Event) GetServiceId() string {
	if x != nil {
		return x.ServiceId
	}
	return ""
}

func (m *Event) GetEvent() isEvent_Event {
	if m != nil {
		return m.Event
	}
	return nil
}

func (x *Event) GetVoiceEvent() *VoiceEvent {
	if x, ok := x.GetEvent().(*Event_VoiceEvent); ok {
		return x.VoiceEvent
	}
	return nil
}

func (x *Event) GetVoicemailEvent() *VoicemailEvent {
	if x, ok := x.GetEvent().(*Event_VoicemailEvent); ok {
		return x.VoicemailEvent
	}
	return nil
}

func (x *Event) GetLocationUpdateEvent() *LocationUpdateEvent {
	if x, ok := x.GetEvent().(*Event_LocationUpdateEvent); ok {
		return x.LocationUpdateEvent
	}
	return nil
}

func (x *Event) GetCountryChangeEvent() *CountryChangeEvent {
	if x, ok := x.GetEvent().(*Event_CountryChangeEvent); ok {
		return x.CountryChangeEvent
	}
	return nil
}

func (x *Event) GetTokenAuditEvent() *TokenAuditEvent {
	if x, ok := x.GetEvent().(*Event_TokenAuditEvent); ok {
		return x.TokenAuditEvent
	}
	return nil
}

func (x *Event) GetSmsEvent() *SmsEvent {
	if x, ok := x.GetEvent().(*Event_SmsEvent); ok {
		return x.SmsEvent
	}
	return nil
}

func (x *Event) GetSmsDeliveryReportEvent() *SmsDeliveryReportEvent {
	if x, ok := x.GetEvent().(*Event_SmsDeliveryReportEvent); ok {
		return x.SmsDeliveryReportEvent
	}
	return nil
}

func (x *Event) GetConsentRevokeEvent() *ConsentRevokeEvent {
	if x, ok := x.GetEvent().(*Event_ConsentRevokeEvent); ok {
		return x.ConsentRevokeEvent
	}
	return nil
}

func (x *Event) GetHandsetUpdateEvent() *HandsetUpdateEvent {
	if x, ok := x.GetEvent().(*Event_HandsetUpdateEvent); ok {
		return x.HandsetUpdateEvent
	}
	return nil
}

func (x *Event) GetFirstAttachmentEvent() *FirstAttachmentEvent {
	if x, ok := x.GetEvent().(*Event_FirstAttachmentEvent); ok {
		return x.FirstAttachmentEvent
	}
	return nil
}

func (x *Event) GetPeriodicCountryEvent() *PeriodicCountryEvent {
	if x, ok := x.GetEvent().(*Event_PeriodicCountryEvent); ok {
		return x.PeriodicCountryEvent
	}
	return nil
}

func (x *Event) GetOwner() *Owner {
	if x != nil {
		return x.Owner
	}
	return nil
}

type isEvent_Event interface {
	isEvent_Event()
}

type Event_VoiceEvent struct {
	VoiceEvent *VoiceEvent `protobuf:"bytes,4,opt,name=voice_event,json=voiceEvent,proto3,oneof"`
}

type Event_VoicemailEvent struct {
	VoicemailEvent *VoicemailEvent `protobuf:"bytes,5,opt,name=voicemail_event,json=voicemailEvent,proto3,oneof"`
}

type Event_LocationUpdateEvent struct {
	LocationUpdateEvent *LocationUpdateEvent `protobuf:"bytes,6,opt,name=location_update_event,json=locationUpdateEvent,proto3,oneof"`
}

type Event_CountryChangeEvent struct {
	CountryChangeEvent *CountryChangeEvent `protobuf:"bytes,7,opt,name=country_change_event,json=countryChangeEvent,proto3,oneof"`
}

type Event_TokenAuditEvent struct {
	TokenAuditEvent *TokenAuditEvent `protobuf:"bytes,8,opt,name=token_audit_event,json=tokenAuditEvent,proto3,oneof"`
}

type Event_SmsEvent struct {
	SmsEvent *SmsEvent `protobuf:"bytes,9,opt,name=sms_event,json=smsEvent,proto3,oneof"`
}

type Event_SmsDeliveryReportEvent struct {
	SmsDeliveryReportEvent *SmsDeliveryReportEvent `protobuf:"bytes,10,opt,name=sms_delivery_report_event,json=smsDeliveryReportEvent,proto3,oneof"`
}

type Event_ConsentRevokeEvent struct {
	ConsentRevokeEvent *ConsentRevokeEvent `protobuf:"bytes,11,opt,name=consent_revoke_event,json=consentRevokeEvent,proto3,oneof"`
}

type Event_HandsetUpdateEvent struct {
	HandsetUpdateEvent *HandsetUpdateEvent `protobuf:"bytes,13,opt,name=handset_update_event,json=handsetUpdateEvent,proto3,oneof"`
}

type Event_FirstAttachmentEvent struct {
	FirstAttachmentEvent *FirstAttachmentEvent `protobuf:"bytes,14,opt,name=first_attachment_event,json=firstAttachmentEvent,proto3,oneof"`
}

type Event_PeriodicCountryEvent struct {
	PeriodicCountryEvent *PeriodicCountryEvent `protobuf:"bytes,15,opt,name=periodic_country_event,json=periodicCountryEvent,proto3,oneof"`
}

func (*Event_VoiceEvent) isEvent_Event() {}

func (*Event_VoicemailEvent) isEvent_Event() {}

func (*Event_LocationUpdateEvent) isEvent_Event() {}

func (*Event_CountryChangeEvent) isEvent_Event() {}

func (*Event_TokenAuditEvent) isEvent_Event() {}

func (*Event_SmsEvent) isEvent_Event() {}

func (*Event_SmsDeliveryReportEvent) isEvent_Event() {}

func (*Event_ConsentRevokeEvent) isEvent_Event() {}

func (*Event_HandsetUpdateEvent) isEvent_Event() {}

func (*Event_FirstAttachmentEvent) isEvent_Event() {}

func (*Event_PeriodicCountryEvent) isEvent_Event() {}

type ConsentRevokeEvent struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Msisdn *v0.PhoneNumber `protobuf:"bytes,1,opt,name=msisdn,proto3" json:"msisdn,omitempty"`
}

func (x *ConsentRevokeEvent) Reset() {
	*x = ConsentRevokeEvent{}
	if protoimpl.UnsafeEnabled {
		mi := &file_wgtwo_events_v0_events_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ConsentRevokeEvent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ConsentRevokeEvent) ProtoMessage() {}

func (x *ConsentRevokeEvent) ProtoReflect() protoreflect.Message {
	mi := &file_wgtwo_events_v0_events_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ConsentRevokeEvent.ProtoReflect.Descriptor instead.
func (*ConsentRevokeEvent) Descriptor() ([]byte, []int) {
	return file_wgtwo_events_v0_events_proto_rawDescGZIP(), []int{8}
}

func (x *ConsentRevokeEvent) GetMsisdn() *v0.PhoneNumber {
	if x != nil {
		return x.Msisdn
	}
	return nil
}

type VoiceEvent struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CallId         string                    `protobuf:"bytes,1,opt,name=call_id,json=callId,proto3" json:"call_id,omitempty"`
	Type           VoiceEvent_VoiceEventType `protobuf:"varint,2,opt,name=type,proto3,enum=wgtwo.events.v0.VoiceEvent_VoiceEventType" json:"type,omitempty"`
	FromNumber     *v0.PhoneNumber           `protobuf:"bytes,3,opt,name=from_number,json=fromNumber,proto3" json:"from_number,omitempty"`
	ToNumber       *v0.PhoneNumber           `protobuf:"bytes,4,opt,name=to_number,json=toNumber,proto3" json:"to_number,omitempty"`
	CallerIdHidden bool                      `protobuf:"varint,6,opt,name=caller_id_hidden,json=callerIdHidden,proto3" json:"caller_id_hidden,omitempty"`
}

func (x *VoiceEvent) Reset() {
	*x = VoiceEvent{}
	if protoimpl.UnsafeEnabled {
		mi := &file_wgtwo_events_v0_events_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *VoiceEvent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VoiceEvent) ProtoMessage() {}

func (x *VoiceEvent) ProtoReflect() protoreflect.Message {
	mi := &file_wgtwo_events_v0_events_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VoiceEvent.ProtoReflect.Descriptor instead.
func (*VoiceEvent) Descriptor() ([]byte, []int) {
	return file_wgtwo_events_v0_events_proto_rawDescGZIP(), []int{9}
}

func (x *VoiceEvent) GetCallId() string {
	if x != nil {
		return x.CallId
	}
	return ""
}

func (x *VoiceEvent) GetType() VoiceEvent_VoiceEventType {
	if x != nil {
		return x.Type
	}
	return VoiceEvent_UNSPECIFIED
}

func (x *VoiceEvent) GetFromNumber() *v0.PhoneNumber {
	if x != nil {
		return x.FromNumber
	}
	return nil
}

func (x *VoiceEvent) GetToNumber() *v0.PhoneNumber {
	if x != nil {
		return x.ToNumber
	}
	return nil
}

func (x *VoiceEvent) GetCallerIdHidden() bool {
	if x != nil {
		return x.CallerIdHidden
	}
	return false
}

type VoicemailEvent struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	VoicemailId string                            `protobuf:"bytes,1,opt,name=voicemail_id,json=voicemailId,proto3" json:"voicemail_id,omitempty"`
	Type        VoicemailEvent_VoicemailEventType `protobuf:"varint,2,opt,name=type,proto3,enum=wgtwo.events.v0.VoicemailEvent_VoicemailEventType" json:"type,omitempty"`
	FromNumber  *v0.PhoneNumber                   `protobuf:"bytes,3,opt,name=from_number,json=fromNumber,proto3" json:"from_number,omitempty"`
	ToNumber    *v0.PhoneNumber                   `protobuf:"bytes,4,opt,name=to_number,json=toNumber,proto3" json:"to_number,omitempty"`
}

func (x *VoicemailEvent) Reset() {
	*x = VoicemailEvent{}
	if protoimpl.UnsafeEnabled {
		mi := &file_wgtwo_events_v0_events_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *VoicemailEvent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VoicemailEvent) ProtoMessage() {}

func (x *VoicemailEvent) ProtoReflect() protoreflect.Message {
	mi := &file_wgtwo_events_v0_events_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VoicemailEvent.ProtoReflect.Descriptor instead.
func (*VoicemailEvent) Descriptor() ([]byte, []int) {
	return file_wgtwo_events_v0_events_proto_rawDescGZIP(), []int{10}
}

func (x *VoicemailEvent) GetVoicemailId() string {
	if x != nil {
		return x.VoicemailId
	}
	return ""
}

func (x *VoicemailEvent) GetType() VoicemailEvent_VoicemailEventType {
	if x != nil {
		return x.Type
	}
	return VoicemailEvent_UNSPECIFIED
}

func (x *VoicemailEvent) GetFromNumber() *v0.PhoneNumber {
	if x != nil {
		return x.FromNumber
	}
	return nil
}

func (x *VoicemailEvent) GetToNumber() *v0.PhoneNumber {
	if x != nil {
		return x.ToNumber
	}
	return nil
}

type LocationUpdateEvent struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Number   *v0.PhoneNumber                `protobuf:"bytes,2,opt,name=number,proto3" json:"number,omitempty"`
	Previous *LocationUpdateEvent_Locations `protobuf:"bytes,3,opt,name=previous,proto3" json:"previous,omitempty"`
	Current  *LocationUpdateEvent_Locations `protobuf:"bytes,4,opt,name=current,proto3" json:"current,omitempty"`
}

func (x *LocationUpdateEvent) Reset() {
	*x = LocationUpdateEvent{}
	if protoimpl.UnsafeEnabled {
		mi := &file_wgtwo_events_v0_events_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LocationUpdateEvent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LocationUpdateEvent) ProtoMessage() {}

func (x *LocationUpdateEvent) ProtoReflect() protoreflect.Message {
	mi := &file_wgtwo_events_v0_events_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LocationUpdateEvent.ProtoReflect.Descriptor instead.
func (*LocationUpdateEvent) Descriptor() ([]byte, []int) {
	return file_wgtwo_events_v0_events_proto_rawDescGZIP(), []int{11}
}

func (x *LocationUpdateEvent) GetNumber() *v0.PhoneNumber {
	if x != nil {
		return x.Number
	}
	return nil
}

func (x *LocationUpdateEvent) GetPrevious() *LocationUpdateEvent_Locations {
	if x != nil {
		return x.Previous
	}
	return nil
}

func (x *LocationUpdateEvent) GetCurrent() *LocationUpdateEvent_Locations {
	if x != nil {
		return x.Current
	}
	return nil
}

type FirstAttachmentEvent struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Number *v0.PhoneNumber `protobuf:"bytes,1,opt,name=number,proto3" json:"number,omitempty"`
	Imsi   *Imsi           `protobuf:"bytes,2,opt,name=imsi,proto3" json:"imsi,omitempty"`
}

func (x *FirstAttachmentEvent) Reset() {
	*x = FirstAttachmentEvent{}
	if protoimpl.UnsafeEnabled {
		mi := &file_wgtwo_events_v0_events_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FirstAttachmentEvent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FirstAttachmentEvent) ProtoMessage() {}

func (x *FirstAttachmentEvent) ProtoReflect() protoreflect.Message {
	mi := &file_wgtwo_events_v0_events_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FirstAttachmentEvent.ProtoReflect.Descriptor instead.
func (*FirstAttachmentEvent) Descriptor() ([]byte, []int) {
	return file_wgtwo_events_v0_events_proto_rawDescGZIP(), []int{12}
}

func (x *FirstAttachmentEvent) GetNumber() *v0.PhoneNumber {
	if x != nil {
		return x.Number
	}
	return nil
}

func (x *FirstAttachmentEvent) GetImsi() *Imsi {
	if x != nil {
		return x.Imsi
	}
	return nil
}

type PeriodicCountryEvent struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Number  *v0.PhoneNumber             `protobuf:"bytes,1,opt,name=number,proto3" json:"number,omitempty"`
	Imsi    *Imsi                       `protobuf:"bytes,2,opt,name=imsi,proto3" json:"imsi,omitempty"`
	Country *CountryChangeEvent_Country `protobuf:"bytes,3,opt,name=country,proto3" json:"country,omitempty"`
}

func (x *PeriodicCountryEvent) Reset() {
	*x = PeriodicCountryEvent{}
	if protoimpl.UnsafeEnabled {
		mi := &file_wgtwo_events_v0_events_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PeriodicCountryEvent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PeriodicCountryEvent) ProtoMessage() {}

func (x *PeriodicCountryEvent) ProtoReflect() protoreflect.Message {
	mi := &file_wgtwo_events_v0_events_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PeriodicCountryEvent.ProtoReflect.Descriptor instead.
func (*PeriodicCountryEvent) Descriptor() ([]byte, []int) {
	return file_wgtwo_events_v0_events_proto_rawDescGZIP(), []int{13}
}

func (x *PeriodicCountryEvent) GetNumber() *v0.PhoneNumber {
	if x != nil {
		return x.Number
	}
	return nil
}

func (x *PeriodicCountryEvent) GetImsi() *Imsi {
	if x != nil {
		return x.Imsi
	}
	return nil
}

func (x *PeriodicCountryEvent) GetCountry() *CountryChangeEvent_Country {
	if x != nil {
		return x.Country
	}
	return nil
}

type CountryChangeEvent struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Msisdn   *v0.PhoneNumber             `protobuf:"bytes,2,opt,name=msisdn,proto3" json:"msisdn,omitempty"`
	Previous *CountryChangeEvent_Country `protobuf:"bytes,3,opt,name=previous,proto3" json:"previous,omitempty"`
	Current  *CountryChangeEvent_Country `protobuf:"bytes,4,opt,name=current,proto3" json:"current,omitempty"`
}

func (x *CountryChangeEvent) Reset() {
	*x = CountryChangeEvent{}
	if protoimpl.UnsafeEnabled {
		mi := &file_wgtwo_events_v0_events_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CountryChangeEvent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CountryChangeEvent) ProtoMessage() {}

func (x *CountryChangeEvent) ProtoReflect() protoreflect.Message {
	mi := &file_wgtwo_events_v0_events_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CountryChangeEvent.ProtoReflect.Descriptor instead.
func (*CountryChangeEvent) Descriptor() ([]byte, []int) {
	return file_wgtwo_events_v0_events_proto_rawDescGZIP(), []int{14}
}

func (x *CountryChangeEvent) GetMsisdn() *v0.PhoneNumber {
	if x != nil {
		return x.Msisdn
	}
	return nil
}

func (x *CountryChangeEvent) GetPrevious() *CountryChangeEvent_Country {
	if x != nil {
		return x.Previous
	}
	return nil
}

func (x *CountryChangeEvent) GetCurrent() *CountryChangeEvent_Country {
	if x != nil {
		return x.Current
	}
	return nil
}

type TokenAuditEvent struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Operation TokenAuditEvent_Operation `protobuf:"varint,1,opt,name=operation,proto3,enum=wgtwo.events.v0.TokenAuditEvent_Operation" json:"operation,omitempty"`
	// Types that are assignable to TokenChanged:
	//	*TokenAuditEvent_OperatorToken
	TokenChanged isTokenAuditEvent_TokenChanged `protobuf_oneof:"token_changed"`
}

func (x *TokenAuditEvent) Reset() {
	*x = TokenAuditEvent{}
	if protoimpl.UnsafeEnabled {
		mi := &file_wgtwo_events_v0_events_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TokenAuditEvent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TokenAuditEvent) ProtoMessage() {}

func (x *TokenAuditEvent) ProtoReflect() protoreflect.Message {
	mi := &file_wgtwo_events_v0_events_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TokenAuditEvent.ProtoReflect.Descriptor instead.
func (*TokenAuditEvent) Descriptor() ([]byte, []int) {
	return file_wgtwo_events_v0_events_proto_rawDescGZIP(), []int{15}
}

func (x *TokenAuditEvent) GetOperation() TokenAuditEvent_Operation {
	if x != nil {
		return x.Operation
	}
	return TokenAuditEvent_UNDEFINED
}

func (m *TokenAuditEvent) GetTokenChanged() isTokenAuditEvent_TokenChanged {
	if m != nil {
		return m.TokenChanged
	}
	return nil
}

func (x *TokenAuditEvent) GetOperatorToken() *TokenAuditEvent_OperatorTokenChanged {
	if x, ok := x.GetTokenChanged().(*TokenAuditEvent_OperatorToken); ok {
		return x.OperatorToken
	}
	return nil
}

type isTokenAuditEvent_TokenChanged interface {
	isTokenAuditEvent_TokenChanged()
}

type TokenAuditEvent_OperatorToken struct {
	OperatorToken *TokenAuditEvent_OperatorTokenChanged `protobuf:"bytes,2,opt,name=operator_token,json=operatorToken,proto3,oneof"`
}

func (*TokenAuditEvent_OperatorToken) isTokenAuditEvent_TokenChanged() {}

type SmsEvent struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	//
	// Identifier referring to a unique instance of this message during its routing.
	// If the message is delivered multiple times to the same receiver, this ID will be different.
	// See uuid that is constant across all routes.
	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// Types that are assignable to FromAddress:
	//	*SmsEvent_FromE164
	//	*SmsEvent_FromNationalPhoneNumber
	//	*SmsEvent_FromTextAddress
	FromAddress isSmsEvent_FromAddress `protobuf_oneof:"from_address"`
	// Types that are assignable to ToAddress:
	//	*SmsEvent_ToE164
	//	*SmsEvent_ToNationalPhoneNumber
	//	*SmsEvent_ToTextAddress
	ToAddress isSmsEvent_ToAddress `protobuf_oneof:"to_address"`
	Direction SmsEvent_Direction   `protobuf:"varint,8,opt,name=direction,proto3,enum=wgtwo.events.v0.SmsEvent_Direction" json:"direction,omitempty"`
	// Types that are assignable to Content:
	//	*SmsEvent_Text
	Content isSmsEvent_Content `protobuf_oneof:"content"`
	//
	// Unique identifier of a message.
	// If the message is delivered multiple times to the same receiver, this uuid will remain the same.
	Uuid string `protobuf:"bytes,10,opt,name=uuid,proto3" json:"uuid,omitempty"`
}

func (x *SmsEvent) Reset() {
	*x = SmsEvent{}
	if protoimpl.UnsafeEnabled {
		mi := &file_wgtwo_events_v0_events_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SmsEvent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SmsEvent) ProtoMessage() {}

func (x *SmsEvent) ProtoReflect() protoreflect.Message {
	mi := &file_wgtwo_events_v0_events_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SmsEvent.ProtoReflect.Descriptor instead.
func (*SmsEvent) Descriptor() ([]byte, []int) {
	return file_wgtwo_events_v0_events_proto_rawDescGZIP(), []int{16}
}

func (x *SmsEvent) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (m *SmsEvent) GetFromAddress() isSmsEvent_FromAddress {
	if m != nil {
		return m.FromAddress
	}
	return nil
}

func (x *SmsEvent) GetFromE164() *v0.PhoneNumber {
	if x, ok := x.GetFromAddress().(*SmsEvent_FromE164); ok {
		return x.FromE164
	}
	return nil
}

func (x *SmsEvent) GetFromNationalPhoneNumber() *v0.NationalPhoneNumber {
	if x, ok := x.GetFromAddress().(*SmsEvent_FromNationalPhoneNumber); ok {
		return x.FromNationalPhoneNumber
	}
	return nil
}

func (x *SmsEvent) GetFromTextAddress() *v0.TextAddress {
	if x, ok := x.GetFromAddress().(*SmsEvent_FromTextAddress); ok {
		return x.FromTextAddress
	}
	return nil
}

func (m *SmsEvent) GetToAddress() isSmsEvent_ToAddress {
	if m != nil {
		return m.ToAddress
	}
	return nil
}

func (x *SmsEvent) GetToE164() *v0.PhoneNumber {
	if x, ok := x.GetToAddress().(*SmsEvent_ToE164); ok {
		return x.ToE164
	}
	return nil
}

func (x *SmsEvent) GetToNationalPhoneNumber() *v0.NationalPhoneNumber {
	if x, ok := x.GetToAddress().(*SmsEvent_ToNationalPhoneNumber); ok {
		return x.ToNationalPhoneNumber
	}
	return nil
}

func (x *SmsEvent) GetToTextAddress() *v0.TextAddress {
	if x, ok := x.GetToAddress().(*SmsEvent_ToTextAddress); ok {
		return x.ToTextAddress
	}
	return nil
}

func (x *SmsEvent) GetDirection() SmsEvent_Direction {
	if x != nil {
		return x.Direction
	}
	return SmsEvent_UNKNOWN
}

func (m *SmsEvent) GetContent() isSmsEvent_Content {
	if m != nil {
		return m.Content
	}
	return nil
}

func (x *SmsEvent) GetText() string {
	if x, ok := x.GetContent().(*SmsEvent_Text); ok {
		return x.Text
	}
	return ""
}

func (x *SmsEvent) GetUuid() string {
	if x != nil {
		return x.Uuid
	}
	return ""
}

type isSmsEvent_FromAddress interface {
	isSmsEvent_FromAddress()
}

type SmsEvent_FromE164 struct {
	FromE164 *v0.PhoneNumber `protobuf:"bytes,2,opt,name=from_e164,json=fromE164,proto3,oneof"`
}

type SmsEvent_FromNationalPhoneNumber struct {
	FromNationalPhoneNumber *v0.NationalPhoneNumber `protobuf:"bytes,3,opt,name=from_national_phone_number,json=fromNationalPhoneNumber,proto3,oneof"`
}

type SmsEvent_FromTextAddress struct {
	FromTextAddress *v0.TextAddress `protobuf:"bytes,4,opt,name=from_text_address,json=fromTextAddress,proto3,oneof"`
}

func (*SmsEvent_FromE164) isSmsEvent_FromAddress() {}

func (*SmsEvent_FromNationalPhoneNumber) isSmsEvent_FromAddress() {}

func (*SmsEvent_FromTextAddress) isSmsEvent_FromAddress() {}

type isSmsEvent_ToAddress interface {
	isSmsEvent_ToAddress()
}

type SmsEvent_ToE164 struct {
	ToE164 *v0.PhoneNumber `protobuf:"bytes,5,opt,name=to_e164,json=toE164,proto3,oneof"`
}

type SmsEvent_ToNationalPhoneNumber struct {
	ToNationalPhoneNumber *v0.NationalPhoneNumber `protobuf:"bytes,6,opt,name=to_national_phone_number,json=toNationalPhoneNumber,proto3,oneof"`
}

type SmsEvent_ToTextAddress struct {
	ToTextAddress *v0.TextAddress `protobuf:"bytes,7,opt,name=to_text_address,json=toTextAddress,proto3,oneof"`
}

func (*SmsEvent_ToE164) isSmsEvent_ToAddress() {}

func (*SmsEvent_ToNationalPhoneNumber) isSmsEvent_ToAddress() {}

func (*SmsEvent_ToTextAddress) isSmsEvent_ToAddress() {}

type isSmsEvent_Content interface {
	isSmsEvent_Content()
}

type SmsEvent_Text struct {
	Text string `protobuf:"bytes,9,opt,name=text,proto3,oneof"`
}

func (*SmsEvent_Text) isSmsEvent_Content() {}

type SmsDeliveryReportEvent struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// Types that are assignable to FromAddress:
	//	*SmsDeliveryReportEvent_FromE164
	//	*SmsDeliveryReportEvent_FromNationalPhoneNumber
	//	*SmsDeliveryReportEvent_FromTextAddress
	FromAddress isSmsDeliveryReportEvent_FromAddress `protobuf_oneof:"from_address"`
	// Types that are assignable to ToAddress:
	//	*SmsDeliveryReportEvent_ToE164
	//	*SmsDeliveryReportEvent_ToNationalPhoneNumber
	//	*SmsDeliveryReportEvent_ToTextAddress
	ToAddress isSmsDeliveryReportEvent_ToAddress `protobuf_oneof:"to_address"`
	Direction SmsDeliveryReportEvent_Direction   `protobuf:"varint,8,opt,name=direction,proto3,enum=wgtwo.events.v0.SmsDeliveryReportEvent_Direction" json:"direction,omitempty"`
	SmsId     string                             `protobuf:"bytes,9,opt,name=sms_id,json=smsId,proto3" json:"sms_id,omitempty"`
	Status    SmsDeliveryReportEvent_Status      `protobuf:"varint,10,opt,name=status,proto3,enum=wgtwo.events.v0.SmsDeliveryReportEvent_Status" json:"status,omitempty"`
}

func (x *SmsDeliveryReportEvent) Reset() {
	*x = SmsDeliveryReportEvent{}
	if protoimpl.UnsafeEnabled {
		mi := &file_wgtwo_events_v0_events_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SmsDeliveryReportEvent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SmsDeliveryReportEvent) ProtoMessage() {}

func (x *SmsDeliveryReportEvent) ProtoReflect() protoreflect.Message {
	mi := &file_wgtwo_events_v0_events_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SmsDeliveryReportEvent.ProtoReflect.Descriptor instead.
func (*SmsDeliveryReportEvent) Descriptor() ([]byte, []int) {
	return file_wgtwo_events_v0_events_proto_rawDescGZIP(), []int{17}
}

func (x *SmsDeliveryReportEvent) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (m *SmsDeliveryReportEvent) GetFromAddress() isSmsDeliveryReportEvent_FromAddress {
	if m != nil {
		return m.FromAddress
	}
	return nil
}

func (x *SmsDeliveryReportEvent) GetFromE164() *v0.PhoneNumber {
	if x, ok := x.GetFromAddress().(*SmsDeliveryReportEvent_FromE164); ok {
		return x.FromE164
	}
	return nil
}

func (x *SmsDeliveryReportEvent) GetFromNationalPhoneNumber() *v0.NationalPhoneNumber {
	if x, ok := x.GetFromAddress().(*SmsDeliveryReportEvent_FromNationalPhoneNumber); ok {
		return x.FromNationalPhoneNumber
	}
	return nil
}

func (x *SmsDeliveryReportEvent) GetFromTextAddress() *v0.TextAddress {
	if x, ok := x.GetFromAddress().(*SmsDeliveryReportEvent_FromTextAddress); ok {
		return x.FromTextAddress
	}
	return nil
}

func (m *SmsDeliveryReportEvent) GetToAddress() isSmsDeliveryReportEvent_ToAddress {
	if m != nil {
		return m.ToAddress
	}
	return nil
}

func (x *SmsDeliveryReportEvent) GetToE164() *v0.PhoneNumber {
	if x, ok := x.GetToAddress().(*SmsDeliveryReportEvent_ToE164); ok {
		return x.ToE164
	}
	return nil
}

func (x *SmsDeliveryReportEvent) GetToNationalPhoneNumber() *v0.NationalPhoneNumber {
	if x, ok := x.GetToAddress().(*SmsDeliveryReportEvent_ToNationalPhoneNumber); ok {
		return x.ToNationalPhoneNumber
	}
	return nil
}

func (x *SmsDeliveryReportEvent) GetToTextAddress() *v0.TextAddress {
	if x, ok := x.GetToAddress().(*SmsDeliveryReportEvent_ToTextAddress); ok {
		return x.ToTextAddress
	}
	return nil
}

func (x *SmsDeliveryReportEvent) GetDirection() SmsDeliveryReportEvent_Direction {
	if x != nil {
		return x.Direction
	}
	return SmsDeliveryReportEvent_DIRECTION_UNKNOWN
}

func (x *SmsDeliveryReportEvent) GetSmsId() string {
	if x != nil {
		return x.SmsId
	}
	return ""
}

func (x *SmsDeliveryReportEvent) GetStatus() SmsDeliveryReportEvent_Status {
	if x != nil {
		return x.Status
	}
	return SmsDeliveryReportEvent_STATUS_UNKNOWN
}

type isSmsDeliveryReportEvent_FromAddress interface {
	isSmsDeliveryReportEvent_FromAddress()
}

type SmsDeliveryReportEvent_FromE164 struct {
	FromE164 *v0.PhoneNumber `protobuf:"bytes,2,opt,name=from_e164,json=fromE164,proto3,oneof"`
}

type SmsDeliveryReportEvent_FromNationalPhoneNumber struct {
	FromNationalPhoneNumber *v0.NationalPhoneNumber `protobuf:"bytes,3,opt,name=from_national_phone_number,json=fromNationalPhoneNumber,proto3,oneof"`
}

type SmsDeliveryReportEvent_FromTextAddress struct {
	FromTextAddress *v0.TextAddress `protobuf:"bytes,4,opt,name=from_text_address,json=fromTextAddress,proto3,oneof"`
}

func (*SmsDeliveryReportEvent_FromE164) isSmsDeliveryReportEvent_FromAddress() {}

func (*SmsDeliveryReportEvent_FromNationalPhoneNumber) isSmsDeliveryReportEvent_FromAddress() {}

func (*SmsDeliveryReportEvent_FromTextAddress) isSmsDeliveryReportEvent_FromAddress() {}

type isSmsDeliveryReportEvent_ToAddress interface {
	isSmsDeliveryReportEvent_ToAddress()
}

type SmsDeliveryReportEvent_ToE164 struct {
	ToE164 *v0.PhoneNumber `protobuf:"bytes,5,opt,name=to_e164,json=toE164,proto3,oneof"`
}

type SmsDeliveryReportEvent_ToNationalPhoneNumber struct {
	ToNationalPhoneNumber *v0.NationalPhoneNumber `protobuf:"bytes,6,opt,name=to_national_phone_number,json=toNationalPhoneNumber,proto3,oneof"`
}

type SmsDeliveryReportEvent_ToTextAddress struct {
	ToTextAddress *v0.TextAddress `protobuf:"bytes,7,opt,name=to_text_address,json=toTextAddress,proto3,oneof"`
}

func (*SmsDeliveryReportEvent_ToE164) isSmsDeliveryReportEvent_ToAddress() {}

func (*SmsDeliveryReportEvent_ToNationalPhoneNumber) isSmsDeliveryReportEvent_ToAddress() {}

func (*SmsDeliveryReportEvent_ToTextAddress) isSmsDeliveryReportEvent_ToAddress() {}

type ImeiSv struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Imei            string `protobuf:"bytes,1,opt,name=imei,proto3" json:"imei,omitempty"`
	SoftwareVersion string `protobuf:"bytes,2,opt,name=software_version,json=softwareVersion,proto3" json:"software_version,omitempty"`
}

func (x *ImeiSv) Reset() {
	*x = ImeiSv{}
	if protoimpl.UnsafeEnabled {
		mi := &file_wgtwo_events_v0_events_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ImeiSv) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ImeiSv) ProtoMessage() {}

func (x *ImeiSv) ProtoReflect() protoreflect.Message {
	mi := &file_wgtwo_events_v0_events_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ImeiSv.ProtoReflect.Descriptor instead.
func (*ImeiSv) Descriptor() ([]byte, []int) {
	return file_wgtwo_events_v0_events_proto_rawDescGZIP(), []int{18}
}

func (x *ImeiSv) GetImei() string {
	if x != nil {
		return x.Imei
	}
	return ""
}

func (x *ImeiSv) GetSoftwareVersion() string {
	if x != nil {
		return x.SoftwareVersion
	}
	return ""
}

type Handset struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ImeiSv *ImeiSv `protobuf:"bytes,1,opt,name=imei_sv,json=imeiSv,proto3" json:"imei_sv,omitempty"`
}

func (x *Handset) Reset() {
	*x = Handset{}
	if protoimpl.UnsafeEnabled {
		mi := &file_wgtwo_events_v0_events_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Handset) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Handset) ProtoMessage() {}

func (x *Handset) ProtoReflect() protoreflect.Message {
	mi := &file_wgtwo_events_v0_events_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Handset.ProtoReflect.Descriptor instead.
func (*Handset) Descriptor() ([]byte, []int) {
	return file_wgtwo_events_v0_events_proto_rawDescGZIP(), []int{19}
}

func (x *Handset) GetImeiSv() *ImeiSv {
	if x != nil {
		return x.ImeiSv
	}
	return nil
}

type HandsetUpdateEvent struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Previous *Handset        `protobuf:"bytes,1,opt,name=previous,proto3" json:"previous,omitempty"`
	Current  *Handset        `protobuf:"bytes,2,opt,name=current,proto3" json:"current,omitempty"`
	Imsi     *Imsi           `protobuf:"bytes,3,opt,name=imsi,proto3" json:"imsi,omitempty"`
	Number   *v0.PhoneNumber `protobuf:"bytes,4,opt,name=number,proto3" json:"number,omitempty"`
}

func (x *HandsetUpdateEvent) Reset() {
	*x = HandsetUpdateEvent{}
	if protoimpl.UnsafeEnabled {
		mi := &file_wgtwo_events_v0_events_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *HandsetUpdateEvent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HandsetUpdateEvent) ProtoMessage() {}

func (x *HandsetUpdateEvent) ProtoReflect() protoreflect.Message {
	mi := &file_wgtwo_events_v0_events_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HandsetUpdateEvent.ProtoReflect.Descriptor instead.
func (*HandsetUpdateEvent) Descriptor() ([]byte, []int) {
	return file_wgtwo_events_v0_events_proto_rawDescGZIP(), []int{20}
}

func (x *HandsetUpdateEvent) GetPrevious() *Handset {
	if x != nil {
		return x.Previous
	}
	return nil
}

func (x *HandsetUpdateEvent) GetCurrent() *Handset {
	if x != nil {
		return x.Current
	}
	return nil
}

func (x *HandsetUpdateEvent) GetImsi() *Imsi {
	if x != nil {
		return x.Imsi
	}
	return nil
}

func (x *HandsetUpdateEvent) GetNumber() *v0.PhoneNumber {
	if x != nil {
		return x.Number
	}
	return nil
}

type Imsi struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Value string `protobuf:"bytes,1,opt,name=value,proto3" json:"value,omitempty"`
}

func (x *Imsi) Reset() {
	*x = Imsi{}
	if protoimpl.UnsafeEnabled {
		mi := &file_wgtwo_events_v0_events_proto_msgTypes[21]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Imsi) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Imsi) ProtoMessage() {}

func (x *Imsi) ProtoReflect() protoreflect.Message {
	mi := &file_wgtwo_events_v0_events_proto_msgTypes[21]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Imsi.ProtoReflect.Descriptor instead.
func (*Imsi) Descriptor() ([]byte, []int) {
	return file_wgtwo_events_v0_events_proto_rawDescGZIP(), []int{21}
}

func (x *Imsi) GetValue() string {
	if x != nil {
		return x.Value
	}
	return ""
}

// (see section 5 in Numbering, Addressing and Identification)
// A GT is a phone number formatted according to E.164 that is used to identify MSCs,
// VLRs, HLRs, SGSNs and other nodes for routing purposes.
type LocationUpdateEvent_GlobalTitle struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Value string `protobuf:"bytes,1,opt,name=value,proto3" json:"value,omitempty"`
}

func (x *LocationUpdateEvent_GlobalTitle) Reset() {
	*x = LocationUpdateEvent_GlobalTitle{}
	if protoimpl.UnsafeEnabled {
		mi := &file_wgtwo_events_v0_events_proto_msgTypes[22]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LocationUpdateEvent_GlobalTitle) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LocationUpdateEvent_GlobalTitle) ProtoMessage() {}

func (x *LocationUpdateEvent_GlobalTitle) ProtoReflect() protoreflect.Message {
	mi := &file_wgtwo_events_v0_events_proto_msgTypes[22]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LocationUpdateEvent_GlobalTitle.ProtoReflect.Descriptor instead.
func (*LocationUpdateEvent_GlobalTitle) Descriptor() ([]byte, []int) {
	return file_wgtwo_events_v0_events_proto_rawDescGZIP(), []int{11, 0}
}

func (x *LocationUpdateEvent_GlobalTitle) GetValue() string {
	if x != nil {
		return x.Value
	}
	return ""
}

// Fully Qualified Domain Name
// The format commonly used for representing an MME address
type LocationUpdateEvent_Fqdn struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Value string `protobuf:"bytes,1,opt,name=value,proto3" json:"value,omitempty"`
}

func (x *LocationUpdateEvent_Fqdn) Reset() {
	*x = LocationUpdateEvent_Fqdn{}
	if protoimpl.UnsafeEnabled {
		mi := &file_wgtwo_events_v0_events_proto_msgTypes[23]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LocationUpdateEvent_Fqdn) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LocationUpdateEvent_Fqdn) ProtoMessage() {}

func (x *LocationUpdateEvent_Fqdn) ProtoReflect() protoreflect.Message {
	mi := &file_wgtwo_events_v0_events_proto_msgTypes[23]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LocationUpdateEvent_Fqdn.ProtoReflect.Descriptor instead.
func (*LocationUpdateEvent_Fqdn) Descriptor() ([]byte, []int) {
	return file_wgtwo_events_v0_events_proto_rawDescGZIP(), []int{11, 1}
}

func (x *LocationUpdateEvent_Fqdn) GetValue() string {
	if x != nil {
		return x.Value
	}
	return ""
}

type LocationUpdateEvent_Locations struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Msc  *LocationUpdateEvent_GlobalTitle `protobuf:"bytes,1,opt,name=msc,proto3" json:"msc,omitempty"`
	Vlr  *LocationUpdateEvent_GlobalTitle `protobuf:"bytes,2,opt,name=vlr,proto3" json:"vlr,omitempty"`
	Sgsn *LocationUpdateEvent_GlobalTitle `protobuf:"bytes,3,opt,name=sgsn,proto3" json:"sgsn,omitempty"`
	Mme  *LocationUpdateEvent_Fqdn        `protobuf:"bytes,4,opt,name=mme,proto3" json:"mme,omitempty"`
}

func (x *LocationUpdateEvent_Locations) Reset() {
	*x = LocationUpdateEvent_Locations{}
	if protoimpl.UnsafeEnabled {
		mi := &file_wgtwo_events_v0_events_proto_msgTypes[24]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LocationUpdateEvent_Locations) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LocationUpdateEvent_Locations) ProtoMessage() {}

func (x *LocationUpdateEvent_Locations) ProtoReflect() protoreflect.Message {
	mi := &file_wgtwo_events_v0_events_proto_msgTypes[24]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LocationUpdateEvent_Locations.ProtoReflect.Descriptor instead.
func (*LocationUpdateEvent_Locations) Descriptor() ([]byte, []int) {
	return file_wgtwo_events_v0_events_proto_rawDescGZIP(), []int{11, 2}
}

func (x *LocationUpdateEvent_Locations) GetMsc() *LocationUpdateEvent_GlobalTitle {
	if x != nil {
		return x.Msc
	}
	return nil
}

func (x *LocationUpdateEvent_Locations) GetVlr() *LocationUpdateEvent_GlobalTitle {
	if x != nil {
		return x.Vlr
	}
	return nil
}

func (x *LocationUpdateEvent_Locations) GetSgsn() *LocationUpdateEvent_GlobalTitle {
	if x != nil {
		return x.Sgsn
	}
	return nil
}

func (x *LocationUpdateEvent_Locations) GetMme() *LocationUpdateEvent_Fqdn {
	if x != nil {
		return x.Mme
	}
	return nil
}

type CountryChangeEvent_Country struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Code string `protobuf:"bytes,1,opt,name=code,proto3" json:"code,omitempty"`
	Name string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
}

func (x *CountryChangeEvent_Country) Reset() {
	*x = CountryChangeEvent_Country{}
	if protoimpl.UnsafeEnabled {
		mi := &file_wgtwo_events_v0_events_proto_msgTypes[25]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CountryChangeEvent_Country) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CountryChangeEvent_Country) ProtoMessage() {}

func (x *CountryChangeEvent_Country) ProtoReflect() protoreflect.Message {
	mi := &file_wgtwo_events_v0_events_proto_msgTypes[25]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CountryChangeEvent_Country.ProtoReflect.Descriptor instead.
func (*CountryChangeEvent_Country) Descriptor() ([]byte, []int) {
	return file_wgtwo_events_v0_events_proto_rawDescGZIP(), []int{14, 0}
}

func (x *CountryChangeEvent_Country) GetCode() string {
	if x != nil {
		return x.Code
	}
	return ""
}

func (x *CountryChangeEvent_Country) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

type TokenAuditEvent_OperatorTokenMetadata struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ClientId string   `protobuf:"bytes,1,opt,name=client_id,json=clientId,proto3" json:"client_id,omitempty"`
	Name     string   `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	Rights   []string `protobuf:"bytes,3,rep,name=rights,proto3" json:"rights,omitempty"`
}

func (x *TokenAuditEvent_OperatorTokenMetadata) Reset() {
	*x = TokenAuditEvent_OperatorTokenMetadata{}
	if protoimpl.UnsafeEnabled {
		mi := &file_wgtwo_events_v0_events_proto_msgTypes[26]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TokenAuditEvent_OperatorTokenMetadata) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TokenAuditEvent_OperatorTokenMetadata) ProtoMessage() {}

func (x *TokenAuditEvent_OperatorTokenMetadata) ProtoReflect() protoreflect.Message {
	mi := &file_wgtwo_events_v0_events_proto_msgTypes[26]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TokenAuditEvent_OperatorTokenMetadata.ProtoReflect.Descriptor instead.
func (*TokenAuditEvent_OperatorTokenMetadata) Descriptor() ([]byte, []int) {
	return file_wgtwo_events_v0_events_proto_rawDescGZIP(), []int{15, 0}
}

func (x *TokenAuditEvent_OperatorTokenMetadata) GetClientId() string {
	if x != nil {
		return x.ClientId
	}
	return ""
}

func (x *TokenAuditEvent_OperatorTokenMetadata) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *TokenAuditEvent_OperatorTokenMetadata) GetRights() []string {
	if x != nil {
		return x.Rights
	}
	return nil
}

type TokenAuditEvent_OperatorTokenChanged struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	New *TokenAuditEvent_OperatorTokenMetadata `protobuf:"bytes,1,opt,name=new,proto3" json:"new,omitempty"`
	Old *TokenAuditEvent_OperatorTokenMetadata `protobuf:"bytes,2,opt,name=old,proto3" json:"old,omitempty"`
}

func (x *TokenAuditEvent_OperatorTokenChanged) Reset() {
	*x = TokenAuditEvent_OperatorTokenChanged{}
	if protoimpl.UnsafeEnabled {
		mi := &file_wgtwo_events_v0_events_proto_msgTypes[27]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TokenAuditEvent_OperatorTokenChanged) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TokenAuditEvent_OperatorTokenChanged) ProtoMessage() {}

func (x *TokenAuditEvent_OperatorTokenChanged) ProtoReflect() protoreflect.Message {
	mi := &file_wgtwo_events_v0_events_proto_msgTypes[27]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TokenAuditEvent_OperatorTokenChanged.ProtoReflect.Descriptor instead.
func (*TokenAuditEvent_OperatorTokenChanged) Descriptor() ([]byte, []int) {
	return file_wgtwo_events_v0_events_proto_rawDescGZIP(), []int{15, 1}
}

func (x *TokenAuditEvent_OperatorTokenChanged) GetNew() *TokenAuditEvent_OperatorTokenMetadata {
	if x != nil {
		return x.New
	}
	return nil
}

func (x *TokenAuditEvent_OperatorTokenChanged) GetOld() *TokenAuditEvent_OperatorTokenMetadata {
	if x != nil {
		return x.Old
	}
	return nil
}

var File_wgtwo_events_v0_events_proto protoreflect.FileDescriptor

var file_wgtwo_events_v0_events_proto_rawDesc = []byte{
	0x0a, 0x1c, 0x77, 0x67, 0x74, 0x77, 0x6f, 0x2f, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x76,
	0x30, 0x2f, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x0f,
	0x77, 0x67, 0x74, 0x77, 0x6f, 0x2e, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x2e, 0x76, 0x30, 0x1a,
	0x1e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2f, 0x64, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a,
	0x1b, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2f, 0x65, 0x6d, 0x70, 0x74, 0x79, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1f, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x74, 0x69,
	0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x23, 0x77,
	0x67, 0x74, 0x77, 0x6f, 0x2f, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73,
	0x2f, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x1a, 0x21, 0x77, 0x67, 0x74, 0x77, 0x6f, 0x2f, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e,
	0x2f, 0x76, 0x30, 0x2f, 0x70, 0x68, 0x6f, 0x6e, 0x65, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1b, 0x77, 0x67, 0x74, 0x77, 0x6f, 0x2f, 0x63, 0x6f, 0x6d,
	0x6d, 0x6f, 0x6e, 0x2f, 0x76, 0x30, 0x2f, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x22, 0x5e, 0x0a, 0x0f, 0x4d, 0x61, 0x6e, 0x75, 0x61, 0x6c, 0x41, 0x63, 0x6b, 0x43,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x16, 0x0a, 0x06, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x06, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x12, 0x33, 0x0a,
	0x07, 0x74, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2e, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x07, 0x74, 0x69, 0x6d, 0x65, 0x6f,
	0x75, 0x74, 0x22, 0x8a, 0x05, 0x0a, 0x16, 0x53, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65,
	0x45, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x2e, 0x0a,
	0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0e, 0x32, 0x1a, 0x2e, 0x77, 0x67,
	0x74, 0x77, 0x6f, 0x2e, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x2e, 0x76, 0x30, 0x2e, 0x45, 0x76,
	0x65, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x2c, 0x0a,
	0x11, 0x73, 0x74, 0x61, 0x72, 0x74, 0x5f, 0x61, 0x74, 0x5f, 0x73, 0x65, 0x71, 0x75, 0x65, 0x6e,
	0x63, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x48, 0x00, 0x52, 0x0f, 0x73, 0x74, 0x61, 0x72,
	0x74, 0x41, 0x74, 0x53, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x65, 0x12, 0x4a, 0x0a, 0x12, 0x73,
	0x74, 0x61, 0x72, 0x74, 0x5f, 0x61, 0x74, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d,
	0x70, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74,
	0x61, 0x6d, 0x70, 0x48, 0x00, 0x52, 0x10, 0x73, 0x74, 0x61, 0x72, 0x74, 0x41, 0x74, 0x54, 0x69,
	0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x12, 0x4a, 0x0a, 0x13, 0x73, 0x74, 0x61, 0x72, 0x74,
	0x5f, 0x61, 0x74, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x64, 0x65, 0x6c, 0x74, 0x61, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x48,
	0x00, 0x52, 0x10, 0x73, 0x74, 0x61, 0x72, 0x74, 0x41, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x44, 0x65,
	0x6c, 0x74, 0x61, 0x12, 0x51, 0x0a, 0x18, 0x73, 0x74, 0x61, 0x72, 0x74, 0x5f, 0x77, 0x69, 0x74,
	0x68, 0x5f, 0x6c, 0x61, 0x73, 0x74, 0x5f, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x64, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x48, 0x00, 0x52,
	0x15, 0x73, 0x74, 0x61, 0x72, 0x74, 0x57, 0x69, 0x74, 0x68, 0x4c, 0x61, 0x73, 0x74, 0x52, 0x65,
	0x63, 0x65, 0x69, 0x76, 0x65, 0x64, 0x12, 0x51, 0x0a, 0x18, 0x73, 0x74, 0x61, 0x72, 0x74, 0x5f,
	0x61, 0x74, 0x5f, 0x6f, 0x6c, 0x64, 0x65, 0x73, 0x74, 0x5f, 0x70, 0x6f, 0x73, 0x73, 0x69, 0x62,
	0x6c, 0x65, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79,
	0x48, 0x00, 0x52, 0x15, 0x73, 0x74, 0x61, 0x72, 0x74, 0x41, 0x74, 0x4f, 0x6c, 0x64, 0x65, 0x73,
	0x74, 0x50, 0x6f, 0x73, 0x73, 0x69, 0x62, 0x6c, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x63, 0x6c, 0x69,
	0x65, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x63, 0x6c,
	0x69, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x71, 0x75, 0x65, 0x75, 0x65, 0x5f,
	0x6e, 0x61, 0x6d, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x71, 0x75, 0x65, 0x75,
	0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x21, 0x0a, 0x0c, 0x64, 0x75, 0x72, 0x61, 0x62, 0x6c, 0x65,
	0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x75, 0x72,
	0x61, 0x62, 0x6c, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x22, 0x0a, 0x0d, 0x6d, 0x61, 0x78, 0x5f,
	0x69, 0x6e, 0x5f, 0x66, 0x6c, 0x69, 0x67, 0x68, 0x74, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x0b, 0x6d, 0x61, 0x78, 0x49, 0x6e, 0x46, 0x6c, 0x69, 0x67, 0x68, 0x74, 0x12, 0x3f, 0x0a, 0x0a,
	0x6d, 0x61, 0x6e, 0x75, 0x61, 0x6c, 0x5f, 0x61, 0x63, 0x6b, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x20, 0x2e, 0x77, 0x67, 0x74, 0x77, 0x6f, 0x2e, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x2e,
	0x76, 0x30, 0x2e, 0x4d, 0x61, 0x6e, 0x75, 0x61, 0x6c, 0x41, 0x63, 0x6b, 0x43, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x52, 0x09, 0x6d, 0x61, 0x6e, 0x75, 0x61, 0x6c, 0x41, 0x63, 0x6b, 0x42, 0x10, 0x0a,
	0x0e, 0x73, 0x74, 0x61, 0x72, 0x74, 0x5f, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x22,
	0x47, 0x0a, 0x17, 0x53, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x45, 0x76, 0x65, 0x6e,
	0x74, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x2c, 0x0a, 0x05, 0x65, 0x76,
	0x65, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x77, 0x67, 0x74, 0x77,
	0x6f, 0x2e, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x2e, 0x76, 0x30, 0x2e, 0x45, 0x76, 0x65, 0x6e,
	0x74, 0x52, 0x05, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x22, 0x3e, 0x0a, 0x0a, 0x41, 0x63, 0x6b, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x69, 0x6e, 0x62, 0x6f, 0x78, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x69, 0x6e, 0x62, 0x6f, 0x78, 0x12, 0x1a, 0x0a, 0x08,
	0x73, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x08,
	0x73, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x65, 0x22, 0x0d, 0x0a, 0x0b, 0x41, 0x63, 0x6b, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x6f, 0x0a, 0x0d, 0x45, 0x76, 0x65, 0x6e, 0x74,
	0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x12, 0x1a, 0x0a, 0x08, 0x73, 0x65, 0x71, 0x75,
	0x65, 0x6e, 0x63, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x08, 0x73, 0x65, 0x71, 0x75,
	0x65, 0x6e, 0x63, 0x65, 0x12, 0x25, 0x0a, 0x0e, 0x69, 0x73, 0x5f, 0x72, 0x65, 0x64, 0x65, 0x6c,
	0x69, 0x76, 0x65, 0x72, 0x65, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0d, 0x69, 0x73,
	0x52, 0x65, 0x64, 0x65, 0x6c, 0x69, 0x76, 0x65, 0x72, 0x65, 0x64, 0x12, 0x1b, 0x0a, 0x09, 0x61,
	0x63, 0x6b, 0x5f, 0x69, 0x6e, 0x62, 0x6f, 0x78, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08,
	0x61, 0x63, 0x6b, 0x49, 0x6e, 0x62, 0x6f, 0x78, 0x22, 0x5a, 0x0a, 0x05, 0x4f, 0x77, 0x6e, 0x65,
	0x72, 0x12, 0x3f, 0x0a, 0x0c, 0x70, 0x68, 0x6f, 0x6e, 0x65, 0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65,
	0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x77, 0x67, 0x74, 0x77, 0x6f, 0x2e,
	0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x76, 0x30, 0x2e, 0x50, 0x68, 0x6f, 0x6e, 0x65, 0x4e,
	0x75, 0x6d, 0x62, 0x65, 0x72, 0x52, 0x0b, 0x70, 0x68, 0x6f, 0x6e, 0x65, 0x4e, 0x75, 0x6d, 0x62,
	0x65, 0x72, 0x12, 0x10, 0x0a, 0x03, 0x73, 0x75, 0x62, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x03, 0x73, 0x75, 0x62, 0x22, 0xf4, 0x08, 0x0a, 0x05, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x12, 0x3a,
	0x0a, 0x08, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1e, 0x2e, 0x77, 0x67, 0x74, 0x77, 0x6f, 0x2e, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x2e,
	0x76, 0x30, 0x2e, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61,
	0x52, 0x08, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x12, 0x38, 0x0a, 0x09, 0x74, 0x69,
	0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x73,
	0x74, 0x61, 0x6d, 0x70, 0x12, 0x1d, 0x0a, 0x0a, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x5f,
	0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x49, 0x64, 0x12, 0x3e, 0x0a, 0x0b, 0x76, 0x6f, 0x69, 0x63, 0x65, 0x5f, 0x65, 0x76, 0x65,
	0x6e, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x77, 0x67, 0x74, 0x77, 0x6f,
	0x2e, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x2e, 0x76, 0x30, 0x2e, 0x56, 0x6f, 0x69, 0x63, 0x65,
	0x45, 0x76, 0x65, 0x6e, 0x74, 0x48, 0x00, 0x52, 0x0a, 0x76, 0x6f, 0x69, 0x63, 0x65, 0x45, 0x76,
	0x65, 0x6e, 0x74, 0x12, 0x4a, 0x0a, 0x0f, 0x76, 0x6f, 0x69, 0x63, 0x65, 0x6d, 0x61, 0x69, 0x6c,
	0x5f, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x77,
	0x67, 0x74, 0x77, 0x6f, 0x2e, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x2e, 0x76, 0x30, 0x2e, 0x56,
	0x6f, 0x69, 0x63, 0x65, 0x6d, 0x61, 0x69, 0x6c, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x48, 0x00, 0x52,
	0x0e, 0x76, 0x6f, 0x69, 0x63, 0x65, 0x6d, 0x61, 0x69, 0x6c, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x12,
	0x5a, 0x0a, 0x15, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x75, 0x70, 0x64, 0x61,
	0x74, 0x65, 0x5f, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24,
	0x2e, 0x77, 0x67, 0x74, 0x77, 0x6f, 0x2e, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x2e, 0x76, 0x30,
	0x2e, 0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x45,
	0x76, 0x65, 0x6e, 0x74, 0x48, 0x00, 0x52, 0x13, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x12, 0x57, 0x0a, 0x14, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x72, 0x79, 0x5f, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x5f, 0x65, 0x76,
	0x65, 0x6e, 0x74, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x77, 0x67, 0x74, 0x77,
	0x6f, 0x2e, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x2e, 0x76, 0x30, 0x2e, 0x43, 0x6f, 0x75, 0x6e,
	0x74, 0x72, 0x79, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x48, 0x00,
	0x52, 0x12, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x72, 0x79, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x45,
	0x76, 0x65, 0x6e, 0x74, 0x12, 0x4e, 0x0a, 0x11, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x5f, 0x61, 0x75,
	0x64, 0x69, 0x74, 0x5f, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x20, 0x2e, 0x77, 0x67, 0x74, 0x77, 0x6f, 0x2e, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x2e, 0x76,
	0x30, 0x2e, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x41, 0x75, 0x64, 0x69, 0x74, 0x45, 0x76, 0x65, 0x6e,
	0x74, 0x48, 0x00, 0x52, 0x0f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x41, 0x75, 0x64, 0x69, 0x74, 0x45,
	0x76, 0x65, 0x6e, 0x74, 0x12, 0x38, 0x0a, 0x09, 0x73, 0x6d, 0x73, 0x5f, 0x65, 0x76, 0x65, 0x6e,
	0x74, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x77, 0x67, 0x74, 0x77, 0x6f, 0x2e,
	0x65, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x2e, 0x76, 0x30, 0x2e, 0x53, 0x6d, 0x73, 0x45, 0x76, 0x65,
	0x6e, 0x74, 0x48, 0x00, 0x52, 0x08, 0x73, 0x6d, 0x73, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x12, 0x64,
	0x0a, 0x19, 0x73, 0x6d, 0x73, 0x5f, 0x64, 0x65, 0x6c, 0x69, 0x76, 0x65, 0x72, 0x79, 0x5f, 0x72,
	0x65, 0x70, 0x6f, 0x72, 0x74, 0x5f, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x18, 0x0a, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x27, 0x2e, 0x77, 0x67, 0x74, 0x77, 0x6f, 0x2e, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x73,
	0x2e, 0x76, 0x30, 0x2e, 0x53, 0x6d, 0x73, 0x44, 0x65, 0x6c, 0x69, 0x76, 0x65, 0x72, 0x79, 0x52,
	0x65, 0x70, 0x6f, 0x72, 0x74, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x48, 0x00, 0x52, 0x16, 0x73, 0x6d,
	0x73, 0x44, 0x65, 0x6c, 0x69, 0x76, 0x65, 0x72, 0x79, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x45,
	0x76, 0x65, 0x6e, 0x74, 0x12, 0x57, 0x0a, 0x14, 0x63, 0x6f, 0x6e, 0x73, 0x65, 0x6e, 0x74, 0x5f,
	0x72, 0x65, 0x76, 0x6f, 0x6b, 0x65, 0x5f, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x18, 0x0b, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x23, 0x2e, 0x77, 0x67, 0x74, 0x77, 0x6f, 0x2e, 0x65, 0x76, 0x65, 0x6e, 0x74,
	0x73, 0x2e, 0x76, 0x30, 0x2e, 0x43, 0x6f, 0x6e, 0x73, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x76, 0x6f,
	0x6b, 0x65, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x48, 0x00, 0x52, 0x12, 0x63, 0x6f, 0x6e, 0x73, 0x65,
	0x6e, 0x74, 0x52, 0x65, 0x76, 0x6f, 0x6b, 0x65, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x12, 0x57, 0x0a,
	0x14, 0x68, 0x61, 0x6e, 0x64, 0x73, 0x65, 0x74, 0x5f, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x5f,
	0x65, 0x76, 0x65, 0x6e, 0x74, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x77, 0x67,
	0x74, 0x77, 0x6f, 0x2e, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x2e, 0x76, 0x30, 0x2e, 0x48, 0x61,
	0x6e, 0x64, 0x73, 0x65, 0x74, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x45, 0x76, 0x65, 0x6e, 0x74,
	0x48, 0x00, 0x52, 0x12, 0x68, 0x61, 0x6e, 0x64, 0x73, 0x65, 0x74, 0x55, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x12, 0x5d, 0x0a, 0x16, 0x66, 0x69, 0x72, 0x73, 0x74, 0x5f,
	0x61, 0x74, 0x74, 0x61, 0x63, 0x68, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x65, 0x76, 0x65, 0x6e, 0x74,
	0x18, 0x0e, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x77, 0x67, 0x74, 0x77, 0x6f, 0x2e, 0x65,
	0x76, 0x65, 0x6e, 0x74, 0x73, 0x2e, 0x76, 0x30, 0x2e, 0x46, 0x69, 0x72, 0x73, 0x74, 0x41, 0x74,
	0x74, 0x61, 0x63, 0x68, 0x6d, 0x65, 0x6e, 0x74, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x48, 0x00, 0x52,
	0x14, 0x66, 0x69, 0x72, 0x73, 0x74, 0x41, 0x74, 0x74, 0x61, 0x63, 0x68, 0x6d, 0x65, 0x6e, 0x74,
	0x45, 0x76, 0x65, 0x6e, 0x74, 0x12, 0x5d, 0x0a, 0x16, 0x70, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x69,
	0x63, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x72, 0x79, 0x5f, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x18,
	0x0f, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x77, 0x67, 0x74, 0x77, 0x6f, 0x2e, 0x65, 0x76,
	0x65, 0x6e, 0x74, 0x73, 0x2e, 0x76, 0x30, 0x2e, 0x50, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x69, 0x63,
	0x43, 0x6f, 0x75, 0x6e, 0x74, 0x72, 0x79, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x48, 0x00, 0x52, 0x14,
	0x70, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x69, 0x63, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x72, 0x79, 0x45,
	0x76, 0x65, 0x6e, 0x74, 0x12, 0x2c, 0x0a, 0x05, 0x6f, 0x77, 0x6e, 0x65, 0x72, 0x18, 0x0c, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x77, 0x67, 0x74, 0x77, 0x6f, 0x2e, 0x65, 0x76, 0x65, 0x6e,
	0x74, 0x73, 0x2e, 0x76, 0x30, 0x2e, 0x4f, 0x77, 0x6e, 0x65, 0x72, 0x52, 0x05, 0x6f, 0x77, 0x6e,
	0x65, 0x72, 0x42, 0x07, 0x0a, 0x05, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x22, 0x4a, 0x0a, 0x12, 0x43,
	0x6f, 0x6e, 0x73, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x76, 0x6f, 0x6b, 0x65, 0x45, 0x76, 0x65, 0x6e,
	0x74, 0x12, 0x34, 0x0a, 0x06, 0x6d, 0x73, 0x69, 0x73, 0x64, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1c, 0x2e, 0x77, 0x67, 0x74, 0x77, 0x6f, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e,
	0x2e, 0x76, 0x30, 0x2e, 0x50, 0x68, 0x6f, 0x6e, 0x65, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x52,
	0x06, 0x6d, 0x73, 0x69, 0x73, 0x64, 0x6e, 0x22, 0x9b, 0x03, 0x0a, 0x0a, 0x56, 0x6f, 0x69, 0x63,
	0x65, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x12, 0x17, 0x0a, 0x07, 0x63, 0x61, 0x6c, 0x6c, 0x5f, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x63, 0x61, 0x6c, 0x6c, 0x49, 0x64, 0x12,
	0x3e, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x2a, 0x2e,
	0x77, 0x67, 0x74, 0x77, 0x6f, 0x2e, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x2e, 0x76, 0x30, 0x2e,
	0x56, 0x6f, 0x69, 0x63, 0x65, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x2e, 0x56, 0x6f, 0x69, 0x63, 0x65,
	0x45, 0x76, 0x65, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12,
	0x3d, 0x0a, 0x0b, 0x66, 0x72, 0x6f, 0x6d, 0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x77, 0x67, 0x74, 0x77, 0x6f, 0x2e, 0x63, 0x6f, 0x6d,
	0x6d, 0x6f, 0x6e, 0x2e, 0x76, 0x30, 0x2e, 0x50, 0x68, 0x6f, 0x6e, 0x65, 0x4e, 0x75, 0x6d, 0x62,
	0x65, 0x72, 0x52, 0x0a, 0x66, 0x72, 0x6f, 0x6d, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x39,
	0x0a, 0x09, 0x74, 0x6f, 0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1c, 0x2e, 0x77, 0x67, 0x74, 0x77, 0x6f, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e,
	0x2e, 0x76, 0x30, 0x2e, 0x50, 0x68, 0x6f, 0x6e, 0x65, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x52,
	0x08, 0x74, 0x6f, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x28, 0x0a, 0x10, 0x63, 0x61, 0x6c,
	0x6c, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x5f, 0x68, 0x69, 0x64, 0x64, 0x65, 0x6e, 0x18, 0x06, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x0e, 0x63, 0x61, 0x6c, 0x6c, 0x65, 0x72, 0x49, 0x64, 0x48, 0x69, 0x64,
	0x64, 0x65, 0x6e, 0x22, 0x82, 0x01, 0x0a, 0x0e, 0x56, 0x6f, 0x69, 0x63, 0x65, 0x45, 0x76, 0x65,
	0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x12, 0x0f, 0x0a, 0x0b, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43,
	0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x12, 0x0a, 0x0e, 0x43, 0x41, 0x4c, 0x4c, 0x5f,
	0x49, 0x4e, 0x49, 0x54, 0x49, 0x41, 0x54, 0x45, 0x44, 0x10, 0x01, 0x12, 0x10, 0x0a, 0x0c, 0x43,
	0x41, 0x4c, 0x4c, 0x5f, 0x52, 0x49, 0x4e, 0x47, 0x49, 0x4e, 0x47, 0x10, 0x02, 0x12, 0x11, 0x0a,
	0x0d, 0x43, 0x41, 0x4c, 0x4c, 0x5f, 0x41, 0x4e, 0x53, 0x57, 0x45, 0x52, 0x45, 0x44, 0x10, 0x03,
	0x12, 0x0e, 0x0a, 0x0a, 0x43, 0x41, 0x4c, 0x4c, 0x5f, 0x45, 0x4e, 0x44, 0x45, 0x44, 0x10, 0x04,
	0x12, 0x16, 0x0a, 0x12, 0x43, 0x41, 0x4c, 0x4c, 0x5f, 0x46, 0x57, 0x44, 0x5f, 0x56, 0x4f, 0x49,
	0x43, 0x45, 0x4d, 0x41, 0x49, 0x4c, 0x10, 0x05, 0x4a, 0x04, 0x08, 0x05, 0x10, 0x06, 0x52, 0x05,
	0x6f, 0x77, 0x6e, 0x65, 0x72, 0x22, 0xaf, 0x02, 0x0a, 0x0e, 0x56, 0x6f, 0x69, 0x63, 0x65, 0x6d,
	0x61, 0x69, 0x6c, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x12, 0x21, 0x0a, 0x0c, 0x76, 0x6f, 0x69, 0x63,
	0x65, 0x6d, 0x61, 0x69, 0x6c, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b,
	0x76, 0x6f, 0x69, 0x63, 0x65, 0x6d, 0x61, 0x69, 0x6c, 0x49, 0x64, 0x12, 0x46, 0x0a, 0x04, 0x74,
	0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x32, 0x2e, 0x77, 0x67, 0x74, 0x77,
	0x6f, 0x2e, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x2e, 0x76, 0x30, 0x2e, 0x56, 0x6f, 0x69, 0x63,
	0x65, 0x6d, 0x61, 0x69, 0x6c, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x2e, 0x56, 0x6f, 0x69, 0x63, 0x65,
	0x6d, 0x61, 0x69, 0x6c, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x52, 0x04, 0x74,
	0x79, 0x70, 0x65, 0x12, 0x3d, 0x0a, 0x0b, 0x66, 0x72, 0x6f, 0x6d, 0x5f, 0x6e, 0x75, 0x6d, 0x62,
	0x65, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x77, 0x67, 0x74, 0x77, 0x6f,
	0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x76, 0x30, 0x2e, 0x50, 0x68, 0x6f, 0x6e, 0x65,
	0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x52, 0x0a, 0x66, 0x72, 0x6f, 0x6d, 0x4e, 0x75, 0x6d, 0x62,
	0x65, 0x72, 0x12, 0x39, 0x0a, 0x09, 0x74, 0x6f, 0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x77, 0x67, 0x74, 0x77, 0x6f, 0x2e, 0x63, 0x6f,
	0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x76, 0x30, 0x2e, 0x50, 0x68, 0x6f, 0x6e, 0x65, 0x4e, 0x75, 0x6d,
	0x62, 0x65, 0x72, 0x52, 0x08, 0x74, 0x6f, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x22, 0x38, 0x0a,
	0x12, 0x56, 0x6f, 0x69, 0x63, 0x65, 0x6d, 0x61, 0x69, 0x6c, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x54,
	0x79, 0x70, 0x65, 0x12, 0x0f, 0x0a, 0x0b, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49,
	0x45, 0x44, 0x10, 0x00, 0x12, 0x11, 0x0a, 0x0d, 0x4e, 0x45, 0x57, 0x5f, 0x56, 0x4f, 0x49, 0x43,
	0x45, 0x4d, 0x41, 0x49, 0x4c, 0x10, 0x01, 0x22, 0xc3, 0x04, 0x0a, 0x13, 0x4c, 0x6f, 0x63, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x12,
	0x34, 0x0a, 0x06, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1c, 0x2e, 0x77, 0x67, 0x74, 0x77, 0x6f, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x76,
	0x30, 0x2e, 0x50, 0x68, 0x6f, 0x6e, 0x65, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x52, 0x06, 0x6e,
	0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x4a, 0x0a, 0x08, 0x70, 0x72, 0x65, 0x76, 0x69, 0x6f, 0x75,
	0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2e, 0x2e, 0x77, 0x67, 0x74, 0x77, 0x6f, 0x2e,
	0x65, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x2e, 0x76, 0x30, 0x2e, 0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x2e, 0x4c, 0x6f,
	0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x08, 0x70, 0x72, 0x65, 0x76, 0x69, 0x6f, 0x75,
	0x73, 0x12, 0x48, 0x0a, 0x07, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x2e, 0x2e, 0x77, 0x67, 0x74, 0x77, 0x6f, 0x2e, 0x65, 0x76, 0x65, 0x6e, 0x74,
	0x73, 0x2e, 0x76, 0x30, 0x2e, 0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x55, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x2e, 0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x73, 0x52, 0x07, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x1a, 0x23, 0x0a, 0x0b, 0x47,
	0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x54, 0x69, 0x74, 0x6c, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x1a, 0x1c, 0x0a, 0x04, 0x46, 0x71, 0x64, 0x6e, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x1a, 0x96,
	0x02, 0x0a, 0x09, 0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x42, 0x0a, 0x03,
	0x6d, 0x73, 0x63, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x30, 0x2e, 0x77, 0x67, 0x74, 0x77,
	0x6f, 0x2e, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x2e, 0x76, 0x30, 0x2e, 0x4c, 0x6f, 0x63, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x2e,
	0x47, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x54, 0x69, 0x74, 0x6c, 0x65, 0x52, 0x03, 0x6d, 0x73, 0x63,
	0x12, 0x42, 0x0a, 0x03, 0x76, 0x6c, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x30, 0x2e,
	0x77, 0x67, 0x74, 0x77, 0x6f, 0x2e, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x2e, 0x76, 0x30, 0x2e,
	0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x45, 0x76,
	0x65, 0x6e, 0x74, 0x2e, 0x47, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x54, 0x69, 0x74, 0x6c, 0x65, 0x52,
	0x03, 0x76, 0x6c, 0x72, 0x12, 0x44, 0x0a, 0x04, 0x73, 0x67, 0x73, 0x6e, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x30, 0x2e, 0x77, 0x67, 0x74, 0x77, 0x6f, 0x2e, 0x65, 0x76, 0x65, 0x6e, 0x74,
	0x73, 0x2e, 0x76, 0x30, 0x2e, 0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x55, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x2e, 0x47, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x54,
	0x69, 0x74, 0x6c, 0x65, 0x52, 0x04, 0x73, 0x67, 0x73, 0x6e, 0x12, 0x3b, 0x0a, 0x03, 0x6d, 0x6d,
	0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x77, 0x67, 0x74, 0x77, 0x6f, 0x2e,
	0x65, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x2e, 0x76, 0x30, 0x2e, 0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x2e, 0x46, 0x71,
	0x64, 0x6e, 0x52, 0x03, 0x6d, 0x6d, 0x65, 0x4a, 0x04, 0x08, 0x01, 0x10, 0x02, 0x22, 0x77, 0x0a,
	0x14, 0x46, 0x69, 0x72, 0x73, 0x74, 0x41, 0x74, 0x74, 0x61, 0x63, 0x68, 0x6d, 0x65, 0x6e, 0x74,
	0x45, 0x76, 0x65, 0x6e, 0x74, 0x12, 0x34, 0x0a, 0x06, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x77, 0x67, 0x74, 0x77, 0x6f, 0x2e, 0x63, 0x6f,
	0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x76, 0x30, 0x2e, 0x50, 0x68, 0x6f, 0x6e, 0x65, 0x4e, 0x75, 0x6d,
	0x62, 0x65, 0x72, 0x52, 0x06, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x29, 0x0a, 0x04, 0x69,
	0x6d, 0x73, 0x69, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x77, 0x67, 0x74, 0x77,
	0x6f, 0x2e, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x2e, 0x76, 0x30, 0x2e, 0x49, 0x6d, 0x73, 0x69,
	0x52, 0x04, 0x69, 0x6d, 0x73, 0x69, 0x22, 0xbe, 0x01, 0x0a, 0x14, 0x50, 0x65, 0x72, 0x69, 0x6f,
	0x64, 0x69, 0x63, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x72, 0x79, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x12,
	0x34, 0x0a, 0x06, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1c, 0x2e, 0x77, 0x67, 0x74, 0x77, 0x6f, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x76,
	0x30, 0x2e, 0x50, 0x68, 0x6f, 0x6e, 0x65, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x52, 0x06, 0x6e,
	0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x29, 0x0a, 0x04, 0x69, 0x6d, 0x73, 0x69, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x77, 0x67, 0x74, 0x77, 0x6f, 0x2e, 0x65, 0x76, 0x65, 0x6e,
	0x74, 0x73, 0x2e, 0x76, 0x30, 0x2e, 0x49, 0x6d, 0x73, 0x69, 0x52, 0x04, 0x69, 0x6d, 0x73, 0x69,
	0x12, 0x45, 0x0a, 0x07, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x72, 0x79, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x2b, 0x2e, 0x77, 0x67, 0x74, 0x77, 0x6f, 0x2e, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x73,
	0x2e, 0x76, 0x30, 0x2e, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x72, 0x79, 0x43, 0x68, 0x61, 0x6e, 0x67,
	0x65, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x2e, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x07,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x72, 0x79, 0x22, 0x93, 0x02, 0x0a, 0x12, 0x43, 0x6f, 0x75, 0x6e,
	0x74, 0x72, 0x79, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x12, 0x34,
	0x0a, 0x06, 0x6d, 0x73, 0x69, 0x73, 0x64, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c,
	0x2e, 0x77, 0x67, 0x74, 0x77, 0x6f, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x76, 0x30,
	0x2e, 0x50, 0x68, 0x6f, 0x6e, 0x65, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x52, 0x06, 0x6d, 0x73,
	0x69, 0x73, 0x64, 0x6e, 0x12, 0x47, 0x0a, 0x08, 0x70, 0x72, 0x65, 0x76, 0x69, 0x6f, 0x75, 0x73,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2b, 0x2e, 0x77, 0x67, 0x74, 0x77, 0x6f, 0x2e, 0x65,
	0x76, 0x65, 0x6e, 0x74, 0x73, 0x2e, 0x76, 0x30, 0x2e, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x72, 0x79,
	0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x2e, 0x43, 0x6f, 0x75, 0x6e,
	0x74, 0x72, 0x79, 0x52, 0x08, 0x70, 0x72, 0x65, 0x76, 0x69, 0x6f, 0x75, 0x73, 0x12, 0x45, 0x0a,
	0x07, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2b,
	0x2e, 0x77, 0x67, 0x74, 0x77, 0x6f, 0x2e, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x2e, 0x76, 0x30,
	0x2e, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x72, 0x79, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x45, 0x76,
	0x65, 0x6e, 0x74, 0x2e, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x07, 0x63, 0x75, 0x72,
	0x72, 0x65, 0x6e, 0x74, 0x1a, 0x31, 0x0a, 0x07, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x72, 0x79, 0x12,
	0x12, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x63,
	0x6f, 0x64, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x4a, 0x04, 0x08, 0x01, 0x10, 0x02, 0x22, 0x9f, 0x04,
	0x0a, 0x0f, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x41, 0x75, 0x64, 0x69, 0x74, 0x45, 0x76, 0x65, 0x6e,
	0x74, 0x12, 0x48, 0x0a, 0x09, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x2a, 0x2e, 0x77, 0x67, 0x74, 0x77, 0x6f, 0x2e, 0x65, 0x76, 0x65,
	0x6e, 0x74, 0x73, 0x2e, 0x76, 0x30, 0x2e, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x41, 0x75, 0x64, 0x69,
	0x74, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x2e, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x52, 0x09, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x5e, 0x0a, 0x0e, 0x6f,
	0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x35, 0x2e, 0x77, 0x67, 0x74, 0x77, 0x6f, 0x2e, 0x65, 0x76, 0x65, 0x6e,
	0x74, 0x73, 0x2e, 0x76, 0x30, 0x2e, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x41, 0x75, 0x64, 0x69, 0x74,
	0x45, 0x76, 0x65, 0x6e, 0x74, 0x2e, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x54, 0x6f,
	0x6b, 0x65, 0x6e, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x64, 0x48, 0x00, 0x52, 0x0d, 0x6f, 0x70,
	0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x1a, 0x60, 0x0a, 0x15, 0x4f,
	0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x4d, 0x65, 0x74, 0x61,
	0x64, 0x61, 0x74, 0x61, 0x12, 0x1b, 0x0a, 0x09, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x5f, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x49,
	0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x72, 0x69, 0x67, 0x68, 0x74, 0x73, 0x18,
	0x03, 0x20, 0x03, 0x28, 0x09, 0x52, 0x06, 0x72, 0x69, 0x67, 0x68, 0x74, 0x73, 0x1a, 0xaa, 0x01,
	0x0a, 0x14, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x43,
	0x68, 0x61, 0x6e, 0x67, 0x65, 0x64, 0x12, 0x48, 0x0a, 0x03, 0x6e, 0x65, 0x77, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x36, 0x2e, 0x77, 0x67, 0x74, 0x77, 0x6f, 0x2e, 0x65, 0x76, 0x65, 0x6e,
	0x74, 0x73, 0x2e, 0x76, 0x30, 0x2e, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x41, 0x75, 0x64, 0x69, 0x74,
	0x45, 0x76, 0x65, 0x6e, 0x74, 0x2e, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x54, 0x6f,
	0x6b, 0x65, 0x6e, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x52, 0x03, 0x6e, 0x65, 0x77,
	0x12, 0x48, 0x0a, 0x03, 0x6f, 0x6c, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x36, 0x2e,
	0x77, 0x67, 0x74, 0x77, 0x6f, 0x2e, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x2e, 0x76, 0x30, 0x2e,
	0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x41, 0x75, 0x64, 0x69, 0x74, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x2e,
	0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x4d, 0x65, 0x74,
	0x61, 0x64, 0x61, 0x74, 0x61, 0x52, 0x03, 0x6f, 0x6c, 0x64, 0x22, 0x42, 0x0a, 0x09, 0x4f, 0x70,
	0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x0d, 0x0a, 0x09, 0x55, 0x4e, 0x44, 0x45, 0x46,
	0x49, 0x4e, 0x45, 0x44, 0x10, 0x00, 0x12, 0x0b, 0x0a, 0x07, 0x43, 0x52, 0x45, 0x41, 0x54, 0x45,
	0x44, 0x10, 0x01, 0x12, 0x0c, 0x0a, 0x08, 0x4d, 0x4f, 0x44, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10,
	0x02, 0x12, 0x0b, 0x0a, 0x07, 0x44, 0x45, 0x4c, 0x45, 0x54, 0x45, 0x44, 0x10, 0x03, 0x42, 0x0f,
	0x0a, 0x0d, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x5f, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x64, 0x22,
	0xc2, 0x05, 0x0a, 0x08, 0x53, 0x6d, 0x73, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x12, 0x0e, 0x0a, 0x02,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x3b, 0x0a, 0x09,
	0x66, 0x72, 0x6f, 0x6d, 0x5f, 0x65, 0x31, 0x36, 0x34, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1c, 0x2e, 0x77, 0x67, 0x74, 0x77, 0x6f, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x76,
	0x30, 0x2e, 0x50, 0x68, 0x6f, 0x6e, 0x65, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x48, 0x00, 0x52,
	0x08, 0x66, 0x72, 0x6f, 0x6d, 0x45, 0x31, 0x36, 0x34, 0x12, 0x63, 0x0a, 0x1a, 0x66, 0x72, 0x6f,
	0x6d, 0x5f, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x5f, 0x70, 0x68, 0x6f, 0x6e, 0x65,
	0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e,
	0x77, 0x67, 0x74, 0x77, 0x6f, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x76, 0x30, 0x2e,
	0x4e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x50, 0x68, 0x6f, 0x6e, 0x65, 0x4e, 0x75, 0x6d,
	0x62, 0x65, 0x72, 0x48, 0x00, 0x52, 0x17, 0x66, 0x72, 0x6f, 0x6d, 0x4e, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x61, 0x6c, 0x50, 0x68, 0x6f, 0x6e, 0x65, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x4a,
	0x0a, 0x11, 0x66, 0x72, 0x6f, 0x6d, 0x5f, 0x74, 0x65, 0x78, 0x74, 0x5f, 0x61, 0x64, 0x64, 0x72,
	0x65, 0x73, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x77, 0x67, 0x74, 0x77,
	0x6f, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x76, 0x30, 0x2e, 0x54, 0x65, 0x78, 0x74,
	0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x48, 0x00, 0x52, 0x0f, 0x66, 0x72, 0x6f, 0x6d, 0x54,
	0x65, 0x78, 0x74, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x37, 0x0a, 0x07, 0x74, 0x6f,
	0x5f, 0x65, 0x31, 0x36, 0x34, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x77, 0x67,
	0x74, 0x77, 0x6f, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x76, 0x30, 0x2e, 0x50, 0x68,
	0x6f, 0x6e, 0x65, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x48, 0x01, 0x52, 0x06, 0x74, 0x6f, 0x45,
	0x31, 0x36, 0x34, 0x12, 0x5f, 0x0a, 0x18, 0x74, 0x6f, 0x5f, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x61, 0x6c, 0x5f, 0x70, 0x68, 0x6f, 0x6e, 0x65, 0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18,
	0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x77, 0x67, 0x74, 0x77, 0x6f, 0x2e, 0x63, 0x6f,
	0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x76, 0x30, 0x2e, 0x4e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c,
	0x50, 0x68, 0x6f, 0x6e, 0x65, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x48, 0x01, 0x52, 0x15, 0x74,
	0x6f, 0x4e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x50, 0x68, 0x6f, 0x6e, 0x65, 0x4e, 0x75,
	0x6d, 0x62, 0x65, 0x72, 0x12, 0x46, 0x0a, 0x0f, 0x74, 0x6f, 0x5f, 0x74, 0x65, 0x78, 0x74, 0x5f,
	0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e,
	0x77, 0x67, 0x74, 0x77, 0x6f, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x76, 0x30, 0x2e,
	0x54, 0x65, 0x78, 0x74, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x48, 0x01, 0x52, 0x0d, 0x74,
	0x6f, 0x54, 0x65, 0x78, 0x74, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x41, 0x0a, 0x09,
	0x64, 0x69, 0x72, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x23, 0x2e, 0x77, 0x67, 0x74, 0x77, 0x6f, 0x2e, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x2e, 0x76,
	0x30, 0x2e, 0x53, 0x6d, 0x73, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x2e, 0x44, 0x69, 0x72, 0x65, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x52, 0x09, 0x64, 0x69, 0x72, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12,
	0x14, 0x0a, 0x04, 0x74, 0x65, 0x78, 0x74, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x48, 0x02, 0x52,
	0x04, 0x74, 0x65, 0x78, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x75, 0x75, 0x69, 0x64, 0x18, 0x0a, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x04, 0x75, 0x75, 0x69, 0x64, 0x22, 0x40, 0x0a, 0x09, 0x44, 0x69, 0x72,
	0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x0b, 0x0a, 0x07, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57,
	0x4e, 0x10, 0x00, 0x12, 0x13, 0x0a, 0x0f, 0x46, 0x52, 0x4f, 0x4d, 0x5f, 0x53, 0x55, 0x42, 0x53,
	0x43, 0x52, 0x49, 0x42, 0x45, 0x52, 0x10, 0x01, 0x12, 0x11, 0x0a, 0x0d, 0x54, 0x4f, 0x5f, 0x53,
	0x55, 0x42, 0x53, 0x43, 0x52, 0x49, 0x42, 0x45, 0x52, 0x10, 0x02, 0x42, 0x0e, 0x0a, 0x0c, 0x66,
	0x72, 0x6f, 0x6d, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x42, 0x0c, 0x0a, 0x0a, 0x74,
	0x6f, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x42, 0x09, 0x0a, 0x07, 0x63, 0x6f, 0x6e,
	0x74, 0x65, 0x6e, 0x74, 0x22, 0xf6, 0x06, 0x0a, 0x16, 0x53, 0x6d, 0x73, 0x44, 0x65, 0x6c, 0x69,
	0x76, 0x65, 0x72, 0x79, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x12,
	0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12,
	0x3b, 0x0a, 0x09, 0x66, 0x72, 0x6f, 0x6d, 0x5f, 0x65, 0x31, 0x36, 0x34, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x77, 0x67, 0x74, 0x77, 0x6f, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f,
	0x6e, 0x2e, 0x76, 0x30, 0x2e, 0x50, 0x68, 0x6f, 0x6e, 0x65, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72,
	0x48, 0x00, 0x52, 0x08, 0x66, 0x72, 0x6f, 0x6d, 0x45, 0x31, 0x36, 0x34, 0x12, 0x63, 0x0a, 0x1a,
	0x66, 0x72, 0x6f, 0x6d, 0x5f, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x5f, 0x70, 0x68,
	0x6f, 0x6e, 0x65, 0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x24, 0x2e, 0x77, 0x67, 0x74, 0x77, 0x6f, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e,
	0x76, 0x30, 0x2e, 0x4e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x50, 0x68, 0x6f, 0x6e, 0x65,
	0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x48, 0x00, 0x52, 0x17, 0x66, 0x72, 0x6f, 0x6d, 0x4e, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x50, 0x68, 0x6f, 0x6e, 0x65, 0x4e, 0x75, 0x6d, 0x62, 0x65,
	0x72, 0x12, 0x4a, 0x0a, 0x11, 0x66, 0x72, 0x6f, 0x6d, 0x5f, 0x74, 0x65, 0x78, 0x74, 0x5f, 0x61,
	0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x77,
	0x67, 0x74, 0x77, 0x6f, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x76, 0x30, 0x2e, 0x54,
	0x65, 0x78, 0x74, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x48, 0x00, 0x52, 0x0f, 0x66, 0x72,
	0x6f, 0x6d, 0x54, 0x65, 0x78, 0x74, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x37, 0x0a,
	0x07, 0x74, 0x6f, 0x5f, 0x65, 0x31, 0x36, 0x34, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c,
	0x2e, 0x77, 0x67, 0x74, 0x77, 0x6f, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x76, 0x30,
	0x2e, 0x50, 0x68, 0x6f, 0x6e, 0x65, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x48, 0x01, 0x52, 0x06,
	0x74, 0x6f, 0x45, 0x31, 0x36, 0x34, 0x12, 0x5f, 0x0a, 0x18, 0x74, 0x6f, 0x5f, 0x6e, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x5f, 0x70, 0x68, 0x6f, 0x6e, 0x65, 0x5f, 0x6e, 0x75, 0x6d, 0x62,
	0x65, 0x72, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x77, 0x67, 0x74, 0x77, 0x6f,
	0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x76, 0x30, 0x2e, 0x4e, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x61, 0x6c, 0x50, 0x68, 0x6f, 0x6e, 0x65, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x48, 0x01,
	0x52, 0x15, 0x74, 0x6f, 0x4e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x50, 0x68, 0x6f, 0x6e,
	0x65, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x46, 0x0a, 0x0f, 0x74, 0x6f, 0x5f, 0x74, 0x65,
	0x78, 0x74, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1c, 0x2e, 0x77, 0x67, 0x74, 0x77, 0x6f, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e,
	0x76, 0x30, 0x2e, 0x54, 0x65, 0x78, 0x74, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x48, 0x01,
	0x52, 0x0d, 0x74, 0x6f, 0x54, 0x65, 0x78, 0x74, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12,
	0x4f, 0x0a, 0x09, 0x64, 0x69, 0x72, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x08, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x31, 0x2e, 0x77, 0x67, 0x74, 0x77, 0x6f, 0x2e, 0x65, 0x76, 0x65, 0x6e, 0x74,
	0x73, 0x2e, 0x76, 0x30, 0x2e, 0x53, 0x6d, 0x73, 0x44, 0x65, 0x6c, 0x69, 0x76, 0x65, 0x72, 0x79,
	0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x2e, 0x44, 0x69, 0x72, 0x65,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x09, 0x64, 0x69, 0x72, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x12, 0x15, 0x0a, 0x06, 0x73, 0x6d, 0x73, 0x5f, 0x69, 0x64, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x05, 0x73, 0x6d, 0x73, 0x49, 0x64, 0x12, 0x46, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x2e, 0x2e, 0x77, 0x67, 0x74, 0x77, 0x6f, 0x2e,
	0x65, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x2e, 0x76, 0x30, 0x2e, 0x53, 0x6d, 0x73, 0x44, 0x65, 0x6c,
	0x69, 0x76, 0x65, 0x72, 0x79, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x45, 0x76, 0x65, 0x6e, 0x74,
	0x2e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x22,
	0x4a, 0x0a, 0x09, 0x44, 0x69, 0x72, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x15, 0x0a, 0x11,
	0x44, 0x49, 0x52, 0x45, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57,
	0x4e, 0x10, 0x00, 0x12, 0x13, 0x0a, 0x0f, 0x46, 0x52, 0x4f, 0x4d, 0x5f, 0x53, 0x55, 0x42, 0x53,
	0x43, 0x52, 0x49, 0x42, 0x45, 0x52, 0x10, 0x01, 0x12, 0x11, 0x0a, 0x0d, 0x54, 0x4f, 0x5f, 0x53,
	0x55, 0x42, 0x53, 0x43, 0x52, 0x49, 0x42, 0x45, 0x52, 0x10, 0x02, 0x22, 0x62, 0x0a, 0x06, 0x53,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x12, 0x0a, 0x0e, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f,
	0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x10, 0x00, 0x12, 0x0d, 0x0a, 0x09, 0x44, 0x45, 0x4c,
	0x49, 0x56, 0x45, 0x52, 0x45, 0x44, 0x10, 0x01, 0x12, 0x15, 0x0a, 0x11, 0x54, 0x45, 0x4d, 0x50,
	0x4f, 0x52, 0x41, 0x52, 0x59, 0x5f, 0x46, 0x41, 0x49, 0x4c, 0x55, 0x52, 0x45, 0x10, 0x02, 0x12,
	0x11, 0x0a, 0x0d, 0x46, 0x49, 0x4e, 0x41, 0x4c, 0x5f, 0x46, 0x41, 0x49, 0x4c, 0x55, 0x52, 0x45,
	0x10, 0x03, 0x12, 0x0b, 0x0a, 0x07, 0x45, 0x58, 0x50, 0x49, 0x52, 0x45, 0x44, 0x10, 0x04, 0x42,
	0x0e, 0x0a, 0x0c, 0x66, 0x72, 0x6f, 0x6d, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x42,
	0x0c, 0x0a, 0x0a, 0x74, 0x6f, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x22, 0x47, 0x0a,
	0x06, 0x49, 0x6d, 0x65, 0x69, 0x53, 0x76, 0x12, 0x12, 0x0a, 0x04, 0x69, 0x6d, 0x65, 0x69, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x69, 0x6d, 0x65, 0x69, 0x12, 0x29, 0x0a, 0x10, 0x73,
	0x6f, 0x66, 0x74, 0x77, 0x61, 0x72, 0x65, 0x5f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x73, 0x6f, 0x66, 0x74, 0x77, 0x61, 0x72, 0x65, 0x56,
	0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x22, 0x3b, 0x0a, 0x07, 0x48, 0x61, 0x6e, 0x64, 0x73, 0x65,
	0x74, 0x12, 0x30, 0x0a, 0x07, 0x69, 0x6d, 0x65, 0x69, 0x5f, 0x73, 0x76, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x17, 0x2e, 0x77, 0x67, 0x74, 0x77, 0x6f, 0x2e, 0x65, 0x76, 0x65, 0x6e, 0x74,
	0x73, 0x2e, 0x76, 0x30, 0x2e, 0x49, 0x6d, 0x65, 0x69, 0x53, 0x76, 0x52, 0x06, 0x69, 0x6d, 0x65,
	0x69, 0x53, 0x76, 0x22, 0xdf, 0x01, 0x0a, 0x12, 0x48, 0x61, 0x6e, 0x64, 0x73, 0x65, 0x74, 0x55,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x12, 0x34, 0x0a, 0x08, 0x70, 0x72,
	0x65, 0x76, 0x69, 0x6f, 0x75, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x77,
	0x67, 0x74, 0x77, 0x6f, 0x2e, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x2e, 0x76, 0x30, 0x2e, 0x48,
	0x61, 0x6e, 0x64, 0x73, 0x65, 0x74, 0x52, 0x08, 0x70, 0x72, 0x65, 0x76, 0x69, 0x6f, 0x75, 0x73,
	0x12, 0x32, 0x0a, 0x07, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x18, 0x2e, 0x77, 0x67, 0x74, 0x77, 0x6f, 0x2e, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x73,
	0x2e, 0x76, 0x30, 0x2e, 0x48, 0x61, 0x6e, 0x64, 0x73, 0x65, 0x74, 0x52, 0x07, 0x63, 0x75, 0x72,
	0x72, 0x65, 0x6e, 0x74, 0x12, 0x29, 0x0a, 0x04, 0x69, 0x6d, 0x73, 0x69, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x15, 0x2e, 0x77, 0x67, 0x74, 0x77, 0x6f, 0x2e, 0x65, 0x76, 0x65, 0x6e, 0x74,
	0x73, 0x2e, 0x76, 0x30, 0x2e, 0x49, 0x6d, 0x73, 0x69, 0x52, 0x04, 0x69, 0x6d, 0x73, 0x69, 0x12,
	0x34, 0x0a, 0x06, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1c, 0x2e, 0x77, 0x67, 0x74, 0x77, 0x6f, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x76,
	0x30, 0x2e, 0x50, 0x68, 0x6f, 0x6e, 0x65, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x52, 0x06, 0x6e,
	0x75, 0x6d, 0x62, 0x65, 0x72, 0x22, 0x1c, 0x0a, 0x04, 0x49, 0x6d, 0x73, 0x69, 0x12, 0x14, 0x0a,
	0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x2a, 0xa8, 0x02, 0x0a, 0x09, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x54, 0x79, 0x70,
	0x65, 0x12, 0x0f, 0x0a, 0x0b, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44,
	0x10, 0x00, 0x12, 0x0f, 0x0a, 0x0b, 0x56, 0x4f, 0x49, 0x43, 0x45, 0x5f, 0x45, 0x56, 0x45, 0x4e,
	0x54, 0x10, 0x01, 0x12, 0x13, 0x0a, 0x0f, 0x56, 0x4f, 0x49, 0x43, 0x45, 0x4d, 0x41, 0x49, 0x4c,
	0x5f, 0x45, 0x56, 0x45, 0x4e, 0x54, 0x10, 0x02, 0x12, 0x19, 0x0a, 0x15, 0x4c, 0x4f, 0x43, 0x41,
	0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x55, 0x50, 0x44, 0x41, 0x54, 0x45, 0x5f, 0x45, 0x56, 0x45, 0x4e,
	0x54, 0x10, 0x03, 0x12, 0x18, 0x0a, 0x14, 0x43, 0x4f, 0x55, 0x4e, 0x54, 0x52, 0x59, 0x5f, 0x43,
	0x48, 0x41, 0x4e, 0x47, 0x45, 0x5f, 0x45, 0x56, 0x45, 0x4e, 0x54, 0x10, 0x04, 0x12, 0x15, 0x0a,
	0x11, 0x54, 0x4f, 0x4b, 0x45, 0x4e, 0x5f, 0x41, 0x55, 0x44, 0x49, 0x54, 0x5f, 0x45, 0x56, 0x45,
	0x4e, 0x54, 0x10, 0x05, 0x12, 0x0d, 0x0a, 0x09, 0x53, 0x4d, 0x53, 0x5f, 0x45, 0x56, 0x45, 0x4e,
	0x54, 0x10, 0x06, 0x12, 0x1d, 0x0a, 0x19, 0x53, 0x4d, 0x53, 0x5f, 0x44, 0x45, 0x4c, 0x49, 0x56,
	0x45, 0x52, 0x59, 0x5f, 0x52, 0x45, 0x50, 0x4f, 0x52, 0x54, 0x5f, 0x45, 0x56, 0x45, 0x4e, 0x54,
	0x10, 0x07, 0x12, 0x18, 0x0a, 0x14, 0x43, 0x4f, 0x4e, 0x53, 0x45, 0x4e, 0x54, 0x5f, 0x52, 0x45,
	0x56, 0x4f, 0x4b, 0x45, 0x5f, 0x45, 0x56, 0x45, 0x4e, 0x54, 0x10, 0x08, 0x12, 0x18, 0x0a, 0x14,
	0x48, 0x41, 0x4e, 0x44, 0x53, 0x45, 0x54, 0x5f, 0x55, 0x50, 0x44, 0x41, 0x54, 0x45, 0x5f, 0x45,
	0x56, 0x45, 0x4e, 0x54, 0x10, 0x09, 0x12, 0x1a, 0x0a, 0x16, 0x46, 0x49, 0x52, 0x53, 0x54, 0x5f,
	0x41, 0x54, 0x54, 0x41, 0x43, 0x48, 0x4d, 0x45, 0x4e, 0x54, 0x5f, 0x45, 0x56, 0x45, 0x4e, 0x54,
	0x10, 0x0a, 0x12, 0x1a, 0x0a, 0x16, 0x50, 0x45, 0x52, 0x49, 0x4f, 0x44, 0x49, 0x43, 0x5f, 0x43,
	0x4f, 0x55, 0x4e, 0x54, 0x52, 0x59, 0x5f, 0x45, 0x56, 0x45, 0x4e, 0x54, 0x10, 0x0b, 0x32, 0xbf,
	0x01, 0x0a, 0x0d, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x12, 0x66, 0x0a, 0x09, 0x53, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x12, 0x27, 0x2e,
	0x77, 0x67, 0x74, 0x77, 0x6f, 0x2e, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x2e, 0x76, 0x30, 0x2e,
	0x53, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x28, 0x2e, 0x77, 0x67, 0x74, 0x77, 0x6f, 0x2e, 0x65,
	0x76, 0x65, 0x6e, 0x74, 0x73, 0x2e, 0x76, 0x30, 0x2e, 0x53, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69,
	0x62, 0x65, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x22, 0x04, 0xea, 0xb5, 0x18, 0x00, 0x30, 0x01, 0x12, 0x46, 0x0a, 0x03, 0x41, 0x63, 0x6b, 0x12,
	0x1b, 0x2e, 0x77, 0x67, 0x74, 0x77, 0x6f, 0x2e, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x2e, 0x76,
	0x30, 0x2e, 0x41, 0x63, 0x6b, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1c, 0x2e, 0x77,
	0x67, 0x74, 0x77, 0x6f, 0x2e, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x2e, 0x76, 0x30, 0x2e, 0x41,
	0x63, 0x6b, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x04, 0xea, 0xb5, 0x18, 0x00,
	0x42, 0x5e, 0x0a, 0x17, 0x63, 0x6f, 0x6d, 0x2e, 0x77, 0x67, 0x74, 0x77, 0x6f, 0x2e, 0x61, 0x70,
	0x69, 0x2e, 0x76, 0x30, 0x2e, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x42, 0x0b, 0x45, 0x76, 0x65,
	0x6e, 0x74, 0x73, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x5a, 0x36, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62,
	0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x77, 0x6f, 0x72, 0x6b, 0x69, 0x6e, 0x67, 0x2d, 0x67, 0x72, 0x6f,
	0x75, 0x70, 0x2d, 0x74, 0x77, 0x6f, 0x2f, 0x77, 0x67, 0x74, 0x77, 0x6f, 0x61, 0x70, 0x69, 0x73,
	0x2f, 0x77, 0x67, 0x74, 0x77, 0x6f, 0x2f, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x76, 0x30,
	0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_wgtwo_events_v0_events_proto_rawDescOnce sync.Once
	file_wgtwo_events_v0_events_proto_rawDescData = file_wgtwo_events_v0_events_proto_rawDesc
)

func file_wgtwo_events_v0_events_proto_rawDescGZIP() []byte {
	file_wgtwo_events_v0_events_proto_rawDescOnce.Do(func() {
		file_wgtwo_events_v0_events_proto_rawDescData = protoimpl.X.CompressGZIP(file_wgtwo_events_v0_events_proto_rawDescData)
	})
	return file_wgtwo_events_v0_events_proto_rawDescData
}

var file_wgtwo_events_v0_events_proto_enumTypes = make([]protoimpl.EnumInfo, 7)
var file_wgtwo_events_v0_events_proto_msgTypes = make([]protoimpl.MessageInfo, 28)
var file_wgtwo_events_v0_events_proto_goTypes = []interface{}{
	(EventType)(0),                                // 0: wgtwo.events.v0.EventType
	(VoiceEvent_VoiceEventType)(0),                // 1: wgtwo.events.v0.VoiceEvent.VoiceEventType
	(VoicemailEvent_VoicemailEventType)(0),        // 2: wgtwo.events.v0.VoicemailEvent.VoicemailEventType
	(TokenAuditEvent_Operation)(0),                // 3: wgtwo.events.v0.TokenAuditEvent.Operation
	(SmsEvent_Direction)(0),                       // 4: wgtwo.events.v0.SmsEvent.Direction
	(SmsDeliveryReportEvent_Direction)(0),         // 5: wgtwo.events.v0.SmsDeliveryReportEvent.Direction
	(SmsDeliveryReportEvent_Status)(0),            // 6: wgtwo.events.v0.SmsDeliveryReportEvent.Status
	(*ManualAckConfig)(nil),                       // 7: wgtwo.events.v0.ManualAckConfig
	(*SubscribeEventsRequest)(nil),                // 8: wgtwo.events.v0.SubscribeEventsRequest
	(*SubscribeEventsResponse)(nil),               // 9: wgtwo.events.v0.SubscribeEventsResponse
	(*AckRequest)(nil),                            // 10: wgtwo.events.v0.AckRequest
	(*AckResponse)(nil),                           // 11: wgtwo.events.v0.AckResponse
	(*EventMetadata)(nil),                         // 12: wgtwo.events.v0.EventMetadata
	(*Owner)(nil),                                 // 13: wgtwo.events.v0.Owner
	(*Event)(nil),                                 // 14: wgtwo.events.v0.Event
	(*ConsentRevokeEvent)(nil),                    // 15: wgtwo.events.v0.ConsentRevokeEvent
	(*VoiceEvent)(nil),                            // 16: wgtwo.events.v0.VoiceEvent
	(*VoicemailEvent)(nil),                        // 17: wgtwo.events.v0.VoicemailEvent
	(*LocationUpdateEvent)(nil),                   // 18: wgtwo.events.v0.LocationUpdateEvent
	(*FirstAttachmentEvent)(nil),                  // 19: wgtwo.events.v0.FirstAttachmentEvent
	(*PeriodicCountryEvent)(nil),                  // 20: wgtwo.events.v0.PeriodicCountryEvent
	(*CountryChangeEvent)(nil),                    // 21: wgtwo.events.v0.CountryChangeEvent
	(*TokenAuditEvent)(nil),                       // 22: wgtwo.events.v0.TokenAuditEvent
	(*SmsEvent)(nil),                              // 23: wgtwo.events.v0.SmsEvent
	(*SmsDeliveryReportEvent)(nil),                // 24: wgtwo.events.v0.SmsDeliveryReportEvent
	(*ImeiSv)(nil),                                // 25: wgtwo.events.v0.ImeiSv
	(*Handset)(nil),                               // 26: wgtwo.events.v0.Handset
	(*HandsetUpdateEvent)(nil),                    // 27: wgtwo.events.v0.HandsetUpdateEvent
	(*Imsi)(nil),                                  // 28: wgtwo.events.v0.Imsi
	(*LocationUpdateEvent_GlobalTitle)(nil),       // 29: wgtwo.events.v0.LocationUpdateEvent.GlobalTitle
	(*LocationUpdateEvent_Fqdn)(nil),              // 30: wgtwo.events.v0.LocationUpdateEvent.Fqdn
	(*LocationUpdateEvent_Locations)(nil),         // 31: wgtwo.events.v0.LocationUpdateEvent.Locations
	(*CountryChangeEvent_Country)(nil),            // 32: wgtwo.events.v0.CountryChangeEvent.Country
	(*TokenAuditEvent_OperatorTokenMetadata)(nil), // 33: wgtwo.events.v0.TokenAuditEvent.OperatorTokenMetadata
	(*TokenAuditEvent_OperatorTokenChanged)(nil),  // 34: wgtwo.events.v0.TokenAuditEvent.OperatorTokenChanged
	(*durationpb.Duration)(nil),                   // 35: google.protobuf.Duration
	(*timestamppb.Timestamp)(nil),                 // 36: google.protobuf.Timestamp
	(*emptypb.Empty)(nil),                         // 37: google.protobuf.Empty
	(*v0.PhoneNumber)(nil),                        // 38: wgtwo.common.v0.PhoneNumber
	(*v0.NationalPhoneNumber)(nil),                // 39: wgtwo.common.v0.NationalPhoneNumber
	(*v0.TextAddress)(nil),                        // 40: wgtwo.common.v0.TextAddress
}
var file_wgtwo_events_v0_events_proto_depIdxs = []int32{
	35, // 0: wgtwo.events.v0.ManualAckConfig.timeout:type_name -> google.protobuf.Duration
	0,  // 1: wgtwo.events.v0.SubscribeEventsRequest.type:type_name -> wgtwo.events.v0.EventType
	36, // 2: wgtwo.events.v0.SubscribeEventsRequest.start_at_timestamp:type_name -> google.protobuf.Timestamp
	35, // 3: wgtwo.events.v0.SubscribeEventsRequest.start_at_time_delta:type_name -> google.protobuf.Duration
	37, // 4: wgtwo.events.v0.SubscribeEventsRequest.start_with_last_received:type_name -> google.protobuf.Empty
	37, // 5: wgtwo.events.v0.SubscribeEventsRequest.start_at_oldest_possible:type_name -> google.protobuf.Empty
	7,  // 6: wgtwo.events.v0.SubscribeEventsRequest.manual_ack:type_name -> wgtwo.events.v0.ManualAckConfig
	14, // 7: wgtwo.events.v0.SubscribeEventsResponse.event:type_name -> wgtwo.events.v0.Event
	38, // 8: wgtwo.events.v0.Owner.phone_number:type_name -> wgtwo.common.v0.PhoneNumber
	12, // 9: wgtwo.events.v0.Event.metadata:type_name -> wgtwo.events.v0.EventMetadata
	36, // 10: wgtwo.events.v0.Event.timestamp:type_name -> google.protobuf.Timestamp
	16, // 11: wgtwo.events.v0.Event.voice_event:type_name -> wgtwo.events.v0.VoiceEvent
	17, // 12: wgtwo.events.v0.Event.voicemail_event:type_name -> wgtwo.events.v0.VoicemailEvent
	18, // 13: wgtwo.events.v0.Event.location_update_event:type_name -> wgtwo.events.v0.LocationUpdateEvent
	21, // 14: wgtwo.events.v0.Event.country_change_event:type_name -> wgtwo.events.v0.CountryChangeEvent
	22, // 15: wgtwo.events.v0.Event.token_audit_event:type_name -> wgtwo.events.v0.TokenAuditEvent
	23, // 16: wgtwo.events.v0.Event.sms_event:type_name -> wgtwo.events.v0.SmsEvent
	24, // 17: wgtwo.events.v0.Event.sms_delivery_report_event:type_name -> wgtwo.events.v0.SmsDeliveryReportEvent
	15, // 18: wgtwo.events.v0.Event.consent_revoke_event:type_name -> wgtwo.events.v0.ConsentRevokeEvent
	27, // 19: wgtwo.events.v0.Event.handset_update_event:type_name -> wgtwo.events.v0.HandsetUpdateEvent
	19, // 20: wgtwo.events.v0.Event.first_attachment_event:type_name -> wgtwo.events.v0.FirstAttachmentEvent
	20, // 21: wgtwo.events.v0.Event.periodic_country_event:type_name -> wgtwo.events.v0.PeriodicCountryEvent
	13, // 22: wgtwo.events.v0.Event.owner:type_name -> wgtwo.events.v0.Owner
	38, // 23: wgtwo.events.v0.ConsentRevokeEvent.msisdn:type_name -> wgtwo.common.v0.PhoneNumber
	1,  // 24: wgtwo.events.v0.VoiceEvent.type:type_name -> wgtwo.events.v0.VoiceEvent.VoiceEventType
	38, // 25: wgtwo.events.v0.VoiceEvent.from_number:type_name -> wgtwo.common.v0.PhoneNumber
	38, // 26: wgtwo.events.v0.VoiceEvent.to_number:type_name -> wgtwo.common.v0.PhoneNumber
	2,  // 27: wgtwo.events.v0.VoicemailEvent.type:type_name -> wgtwo.events.v0.VoicemailEvent.VoicemailEventType
	38, // 28: wgtwo.events.v0.VoicemailEvent.from_number:type_name -> wgtwo.common.v0.PhoneNumber
	38, // 29: wgtwo.events.v0.VoicemailEvent.to_number:type_name -> wgtwo.common.v0.PhoneNumber
	38, // 30: wgtwo.events.v0.LocationUpdateEvent.number:type_name -> wgtwo.common.v0.PhoneNumber
	31, // 31: wgtwo.events.v0.LocationUpdateEvent.previous:type_name -> wgtwo.events.v0.LocationUpdateEvent.Locations
	31, // 32: wgtwo.events.v0.LocationUpdateEvent.current:type_name -> wgtwo.events.v0.LocationUpdateEvent.Locations
	38, // 33: wgtwo.events.v0.FirstAttachmentEvent.number:type_name -> wgtwo.common.v0.PhoneNumber
	28, // 34: wgtwo.events.v0.FirstAttachmentEvent.imsi:type_name -> wgtwo.events.v0.Imsi
	38, // 35: wgtwo.events.v0.PeriodicCountryEvent.number:type_name -> wgtwo.common.v0.PhoneNumber
	28, // 36: wgtwo.events.v0.PeriodicCountryEvent.imsi:type_name -> wgtwo.events.v0.Imsi
	32, // 37: wgtwo.events.v0.PeriodicCountryEvent.country:type_name -> wgtwo.events.v0.CountryChangeEvent.Country
	38, // 38: wgtwo.events.v0.CountryChangeEvent.msisdn:type_name -> wgtwo.common.v0.PhoneNumber
	32, // 39: wgtwo.events.v0.CountryChangeEvent.previous:type_name -> wgtwo.events.v0.CountryChangeEvent.Country
	32, // 40: wgtwo.events.v0.CountryChangeEvent.current:type_name -> wgtwo.events.v0.CountryChangeEvent.Country
	3,  // 41: wgtwo.events.v0.TokenAuditEvent.operation:type_name -> wgtwo.events.v0.TokenAuditEvent.Operation
	34, // 42: wgtwo.events.v0.TokenAuditEvent.operator_token:type_name -> wgtwo.events.v0.TokenAuditEvent.OperatorTokenChanged
	38, // 43: wgtwo.events.v0.SmsEvent.from_e164:type_name -> wgtwo.common.v0.PhoneNumber
	39, // 44: wgtwo.events.v0.SmsEvent.from_national_phone_number:type_name -> wgtwo.common.v0.NationalPhoneNumber
	40, // 45: wgtwo.events.v0.SmsEvent.from_text_address:type_name -> wgtwo.common.v0.TextAddress
	38, // 46: wgtwo.events.v0.SmsEvent.to_e164:type_name -> wgtwo.common.v0.PhoneNumber
	39, // 47: wgtwo.events.v0.SmsEvent.to_national_phone_number:type_name -> wgtwo.common.v0.NationalPhoneNumber
	40, // 48: wgtwo.events.v0.SmsEvent.to_text_address:type_name -> wgtwo.common.v0.TextAddress
	4,  // 49: wgtwo.events.v0.SmsEvent.direction:type_name -> wgtwo.events.v0.SmsEvent.Direction
	38, // 50: wgtwo.events.v0.SmsDeliveryReportEvent.from_e164:type_name -> wgtwo.common.v0.PhoneNumber
	39, // 51: wgtwo.events.v0.SmsDeliveryReportEvent.from_national_phone_number:type_name -> wgtwo.common.v0.NationalPhoneNumber
	40, // 52: wgtwo.events.v0.SmsDeliveryReportEvent.from_text_address:type_name -> wgtwo.common.v0.TextAddress
	38, // 53: wgtwo.events.v0.SmsDeliveryReportEvent.to_e164:type_name -> wgtwo.common.v0.PhoneNumber
	39, // 54: wgtwo.events.v0.SmsDeliveryReportEvent.to_national_phone_number:type_name -> wgtwo.common.v0.NationalPhoneNumber
	40, // 55: wgtwo.events.v0.SmsDeliveryReportEvent.to_text_address:type_name -> wgtwo.common.v0.TextAddress
	5,  // 56: wgtwo.events.v0.SmsDeliveryReportEvent.direction:type_name -> wgtwo.events.v0.SmsDeliveryReportEvent.Direction
	6,  // 57: wgtwo.events.v0.SmsDeliveryReportEvent.status:type_name -> wgtwo.events.v0.SmsDeliveryReportEvent.Status
	25, // 58: wgtwo.events.v0.Handset.imei_sv:type_name -> wgtwo.events.v0.ImeiSv
	26, // 59: wgtwo.events.v0.HandsetUpdateEvent.previous:type_name -> wgtwo.events.v0.Handset
	26, // 60: wgtwo.events.v0.HandsetUpdateEvent.current:type_name -> wgtwo.events.v0.Handset
	28, // 61: wgtwo.events.v0.HandsetUpdateEvent.imsi:type_name -> wgtwo.events.v0.Imsi
	38, // 62: wgtwo.events.v0.HandsetUpdateEvent.number:type_name -> wgtwo.common.v0.PhoneNumber
	29, // 63: wgtwo.events.v0.LocationUpdateEvent.Locations.msc:type_name -> wgtwo.events.v0.LocationUpdateEvent.GlobalTitle
	29, // 64: wgtwo.events.v0.LocationUpdateEvent.Locations.vlr:type_name -> wgtwo.events.v0.LocationUpdateEvent.GlobalTitle
	29, // 65: wgtwo.events.v0.LocationUpdateEvent.Locations.sgsn:type_name -> wgtwo.events.v0.LocationUpdateEvent.GlobalTitle
	30, // 66: wgtwo.events.v0.LocationUpdateEvent.Locations.mme:type_name -> wgtwo.events.v0.LocationUpdateEvent.Fqdn
	33, // 67: wgtwo.events.v0.TokenAuditEvent.OperatorTokenChanged.new:type_name -> wgtwo.events.v0.TokenAuditEvent.OperatorTokenMetadata
	33, // 68: wgtwo.events.v0.TokenAuditEvent.OperatorTokenChanged.old:type_name -> wgtwo.events.v0.TokenAuditEvent.OperatorTokenMetadata
	8,  // 69: wgtwo.events.v0.EventsService.Subscribe:input_type -> wgtwo.events.v0.SubscribeEventsRequest
	10, // 70: wgtwo.events.v0.EventsService.Ack:input_type -> wgtwo.events.v0.AckRequest
	9,  // 71: wgtwo.events.v0.EventsService.Subscribe:output_type -> wgtwo.events.v0.SubscribeEventsResponse
	11, // 72: wgtwo.events.v0.EventsService.Ack:output_type -> wgtwo.events.v0.AckResponse
	71, // [71:73] is the sub-list for method output_type
	69, // [69:71] is the sub-list for method input_type
	69, // [69:69] is the sub-list for extension type_name
	69, // [69:69] is the sub-list for extension extendee
	0,  // [0:69] is the sub-list for field type_name
}

func init() { file_wgtwo_events_v0_events_proto_init() }
func file_wgtwo_events_v0_events_proto_init() {
	if File_wgtwo_events_v0_events_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_wgtwo_events_v0_events_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ManualAckConfig); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_wgtwo_events_v0_events_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SubscribeEventsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_wgtwo_events_v0_events_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SubscribeEventsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_wgtwo_events_v0_events_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AckRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_wgtwo_events_v0_events_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AckResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_wgtwo_events_v0_events_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EventMetadata); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_wgtwo_events_v0_events_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Owner); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_wgtwo_events_v0_events_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Event); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_wgtwo_events_v0_events_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ConsentRevokeEvent); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_wgtwo_events_v0_events_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*VoiceEvent); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_wgtwo_events_v0_events_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*VoicemailEvent); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_wgtwo_events_v0_events_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LocationUpdateEvent); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_wgtwo_events_v0_events_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FirstAttachmentEvent); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_wgtwo_events_v0_events_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PeriodicCountryEvent); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_wgtwo_events_v0_events_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CountryChangeEvent); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_wgtwo_events_v0_events_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TokenAuditEvent); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_wgtwo_events_v0_events_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SmsEvent); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_wgtwo_events_v0_events_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SmsDeliveryReportEvent); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_wgtwo_events_v0_events_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ImeiSv); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_wgtwo_events_v0_events_proto_msgTypes[19].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Handset); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_wgtwo_events_v0_events_proto_msgTypes[20].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*HandsetUpdateEvent); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_wgtwo_events_v0_events_proto_msgTypes[21].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Imsi); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_wgtwo_events_v0_events_proto_msgTypes[22].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LocationUpdateEvent_GlobalTitle); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_wgtwo_events_v0_events_proto_msgTypes[23].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LocationUpdateEvent_Fqdn); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_wgtwo_events_v0_events_proto_msgTypes[24].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LocationUpdateEvent_Locations); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_wgtwo_events_v0_events_proto_msgTypes[25].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CountryChangeEvent_Country); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_wgtwo_events_v0_events_proto_msgTypes[26].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TokenAuditEvent_OperatorTokenMetadata); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_wgtwo_events_v0_events_proto_msgTypes[27].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TokenAuditEvent_OperatorTokenChanged); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_wgtwo_events_v0_events_proto_msgTypes[1].OneofWrappers = []interface{}{
		(*SubscribeEventsRequest_StartAtSequence)(nil),
		(*SubscribeEventsRequest_StartAtTimestamp)(nil),
		(*SubscribeEventsRequest_StartAtTimeDelta)(nil),
		(*SubscribeEventsRequest_StartWithLastReceived)(nil),
		(*SubscribeEventsRequest_StartAtOldestPossible)(nil),
	}
	file_wgtwo_events_v0_events_proto_msgTypes[7].OneofWrappers = []interface{}{
		(*Event_VoiceEvent)(nil),
		(*Event_VoicemailEvent)(nil),
		(*Event_LocationUpdateEvent)(nil),
		(*Event_CountryChangeEvent)(nil),
		(*Event_TokenAuditEvent)(nil),
		(*Event_SmsEvent)(nil),
		(*Event_SmsDeliveryReportEvent)(nil),
		(*Event_ConsentRevokeEvent)(nil),
		(*Event_HandsetUpdateEvent)(nil),
		(*Event_FirstAttachmentEvent)(nil),
		(*Event_PeriodicCountryEvent)(nil),
	}
	file_wgtwo_events_v0_events_proto_msgTypes[15].OneofWrappers = []interface{}{
		(*TokenAuditEvent_OperatorToken)(nil),
	}
	file_wgtwo_events_v0_events_proto_msgTypes[16].OneofWrappers = []interface{}{
		(*SmsEvent_FromE164)(nil),
		(*SmsEvent_FromNationalPhoneNumber)(nil),
		(*SmsEvent_FromTextAddress)(nil),
		(*SmsEvent_ToE164)(nil),
		(*SmsEvent_ToNationalPhoneNumber)(nil),
		(*SmsEvent_ToTextAddress)(nil),
		(*SmsEvent_Text)(nil),
	}
	file_wgtwo_events_v0_events_proto_msgTypes[17].OneofWrappers = []interface{}{
		(*SmsDeliveryReportEvent_FromE164)(nil),
		(*SmsDeliveryReportEvent_FromNationalPhoneNumber)(nil),
		(*SmsDeliveryReportEvent_FromTextAddress)(nil),
		(*SmsDeliveryReportEvent_ToE164)(nil),
		(*SmsDeliveryReportEvent_ToNationalPhoneNumber)(nil),
		(*SmsDeliveryReportEvent_ToTextAddress)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_wgtwo_events_v0_events_proto_rawDesc,
			NumEnums:      7,
			NumMessages:   28,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_wgtwo_events_v0_events_proto_goTypes,
		DependencyIndexes: file_wgtwo_events_v0_events_proto_depIdxs,
		EnumInfos:         file_wgtwo_events_v0_events_proto_enumTypes,
		MessageInfos:      file_wgtwo_events_v0_events_proto_msgTypes,
	}.Build()
	File_wgtwo_events_v0_events_proto = out.File
	file_wgtwo_events_v0_events_proto_rawDesc = nil
	file_wgtwo_events_v0_events_proto_goTypes = nil
	file_wgtwo_events_v0_events_proto_depIdxs = nil
}
