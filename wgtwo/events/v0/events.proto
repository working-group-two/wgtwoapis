// Copyright 2020 Working Group Two AS
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//

syntax = "proto3";

package wgtwo.events.v0;

import "google/protobuf/duration.proto";
import "google/protobuf/empty.proto";
import "google/protobuf/timestamp.proto";
import "wgtwo/annotations/annotations.proto";
import "wgtwo/common/v0/phonenumber.proto";
import "wgtwo/common/v0/types.proto";

option go_package = "github.com/working-group-two/wgtwoapis/wgtwo/events/v0";
option java_package = "com.wgtwo.api.v0.events";
option java_outer_classname = "EventsProto";

service EventsService {
  rpc Subscribe (SubscribeEventsRequest) returns (stream SubscribeEventsResponse) {
    option (scope) = "";
  }
  rpc Ack (AckRequest) returns (AckResponse) {
    option (scope) = "";
  }
}

enum EventType {
  UNSPECIFIED = 0;
  VOICE_EVENT = 1;
  VOICEMAIL_EVENT = 2;
  LOCATION_UPDATE_EVENT = 3;
  COUNTRY_CHANGE_EVENT = 4;
  TOKEN_AUDIT_EVENT = 5;
  SMS_EVENT = 6;
  SMS_DELIVERY_REPORT_EVENT = 7;
  CONSENT_REVOKE_EVENT = 8;
  HANDSET_UPDATE_EVENT = 9;
  FIRST_ATTACHMENT_EVENT = 10;
  PERIODIC_COUNTRY_EVENT = 11;
}

message ManualAckConfig {
  bool enable = 1;
  google.protobuf.Duration timeout = 2;
}

message SubscribeEventsRequest {
  repeated EventType type = 1;
  oneof start_position {
    uint64 start_at_sequence = 2;
    google.protobuf.Timestamp start_at_timestamp = 3;
    google.protobuf.Duration start_at_time_delta = 4;
    google.protobuf.Empty start_with_last_received = 5;
    google.protobuf.Empty start_at_oldest_possible = 11;
  }
  string client_id = 6;
  string queue_name = 7;
  string durable_name = 8;
  uint32 max_in_flight = 9;
  ManualAckConfig manual_ack = 10;
}

message SubscribeEventsResponse {
  Event event = 1;
}

message AckRequest {
  string inbox = 1;
  uint64 sequence = 2;
}

message AckResponse {
}

message EventMetadata {
  uint64 sequence = 1;
  bool is_redelivered = 2;
  string ack_inbox = 3;
}

message Owner {
  wgtwo.common.v0.PhoneNumber phone_number = 1;
  string sub = 2;
}

message Event {
  EventMetadata metadata = 1;
  google.protobuf.Timestamp timestamp = 2;
  string service_id = 3;
  oneof event {
    VoiceEvent voice_event = 4;
    VoicemailEvent voicemail_event = 5;
    LocationUpdateEvent location_update_event = 6;
    CountryChangeEvent country_change_event = 7;
    TokenAuditEvent token_audit_event = 8;
    SmsEvent sms_event = 9;
    SmsDeliveryReportEvent sms_delivery_report_event = 10;
    ConsentRevokeEvent consent_revoke_event = 11;
    HandsetUpdateEvent handset_update_event = 13;
    FirstAttachmentEvent first_attachment_event = 14;
    PeriodicCountryEvent periodic_country_event = 15;
  }
  Owner owner = 12;
}

message ConsentRevokeEvent {
  wgtwo.common.v0.PhoneNumber msisdn = 1;
}

message VoiceEvent {
  reserved 5;
  reserved "owner";
  enum VoiceEventType {
    UNSPECIFIED = 0;
    CALL_INITIATED = 1;
    CALL_RINGING = 2;
    CALL_ANSWERED = 3;
    CALL_ENDED = 4;
    CALL_FWD_VOICEMAIL = 5;
  }

  string call_id = 1;
  VoiceEventType type = 2;
  wgtwo.common.v0.PhoneNumber from_number = 3;
  wgtwo.common.v0.PhoneNumber to_number = 4;
  bool caller_id_hidden = 6;
}

message VoicemailEvent {
  enum VoicemailEventType {
    UNSPECIFIED = 0;
    NEW_VOICEMAIL = 1;
  }

  string voicemail_id = 1;
  VoicemailEventType type = 2;
  wgtwo.common.v0.PhoneNumber from_number = 3;
  wgtwo.common.v0.PhoneNumber to_number = 4;
}

message LocationUpdateEvent {
  reserved 1;

  // (see section 5 in Numbering, Addressing and Identification)
  // A GT is a phone number formatted according to E.164 that is used to identify MSCs,
  // VLRs, HLRs, SGSNs and other nodes for routing purposes.
  message GlobalTitle {
    string value = 1;
  }

  // Fully Qualified Domain Name
  // The format commonly used for representing an MME address
  message Fqdn {
    string value = 1;
  }

  message Locations {
    GlobalTitle msc = 1;
    GlobalTitle vlr = 2;
    GlobalTitle sgsn = 3;
    Fqdn mme = 4;
  }

  wgtwo.common.v0.PhoneNumber number = 2;
  Locations previous = 3;
  Locations current = 4;
}

message FirstAttachmentEvent {
  wgtwo.common.v0.PhoneNumber number = 1;
  Imsi imsi = 2;
}

message PeriodicCountryEvent {
  wgtwo.common.v0.PhoneNumber number = 1;
  Imsi imsi = 2;
  CountryChangeEvent.Country country = 3;
}

message CountryChangeEvent {
  reserved 1;
  message Country {
    string code = 1;
    string name = 2;
  }
  wgtwo.common.v0.PhoneNumber msisdn = 2;
  Country previous = 3;
  Country current = 4;
}

message TokenAuditEvent {
  message OperatorTokenMetadata {
    string client_id = 1;
    string name = 2;
    repeated string rights = 3;
  }

  enum Operation {
    UNDEFINED = 0;
    CREATED = 1;
    MODIFIED = 2;
    DELETED = 3;
  }
  message OperatorTokenChanged {
    OperatorTokenMetadata new = 1;
    OperatorTokenMetadata old = 2;
  }

  Operation operation = 1;
  oneof token_changed {
    OperatorTokenChanged operator_token = 2;
  }
}

message SmsEvent {
  enum Direction {
    UNKNOWN = 0;
    FROM_SUBSCRIBER = 1;
    TO_SUBSCRIBER = 2;
  }

  /**
   * Identifier referring to a unique instance of this message during its routing.
   * If the message is delivered multiple times to the same receiver, this ID will be different.
   * See uuid that is constant across all routes.
   */
  string id = 1;
  oneof from_address {
    wgtwo.common.v0.PhoneNumber from_e164 = 2;
    wgtwo.common.v0.NationalPhoneNumber from_national_phone_number = 3;
    wgtwo.common.v0.TextAddress from_text_address = 4;
  }
  oneof to_address {
    wgtwo.common.v0.PhoneNumber to_e164 = 5;
    wgtwo.common.v0.NationalPhoneNumber to_national_phone_number = 6;
    wgtwo.common.v0.TextAddress to_text_address = 7;
  }
  Direction direction = 8;
  oneof content {
    string text = 9;
  }

  /**
   * Unique identifier of a message.
   * If the message is delivered multiple times to the same receiver, this uuid will remain the same.
   */
  string uuid = 10;
}

message SmsDeliveryReportEvent {
  enum Direction {
    DIRECTION_UNKNOWN = 0;
    FROM_SUBSCRIBER = 1;
    TO_SUBSCRIBER = 2;
  }
  enum Status {
    STATUS_UNKNOWN = 0;
    DELIVERED = 1;
    TEMPORARY_FAILURE = 2;
    FINAL_FAILURE = 3;
    EXPIRED = 4;
  }

  string id = 1;
  oneof from_address {
    wgtwo.common.v0.PhoneNumber from_e164 = 2;
    wgtwo.common.v0.NationalPhoneNumber from_national_phone_number = 3;
    wgtwo.common.v0.TextAddress from_text_address = 4;
  }
  oneof to_address {
    wgtwo.common.v0.PhoneNumber to_e164 = 5;
    wgtwo.common.v0.NationalPhoneNumber to_national_phone_number = 6;
    wgtwo.common.v0.TextAddress to_text_address = 7;
  }
  Direction direction = 8;
  string sms_id = 9;
  Status status = 10;
}

message ImeiSv {
  string imei = 1;
  string software_version = 2;
}

message Handset {
  ImeiSv imei_sv = 1;
}

message HandsetUpdateEvent {
  Handset previous = 1;
  Handset current = 2;
  Imsi imsi = 3;
  wgtwo.common.v0.PhoneNumber number = 4;
}

message Imsi {
  string value = 1;
}
