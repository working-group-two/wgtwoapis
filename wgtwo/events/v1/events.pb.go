// Copyright 2021 Working Group Two AS
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.28.1
// 	protoc        (unknown)
// source: wgtwo/events/v1/events.proto

package v1

import (
	v1 "github.com/working-group-two/wgtwoapis/wgtwo/common/v1"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	durationpb "google.golang.org/protobuf/types/known/durationpb"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type AckStatus_StatusCode int32

const (
	AckStatus_STATUS_CODE_UNSPECIFIED AckStatus_StatusCode = 0
	AckStatus_STATUS_CODE_FAILURE     AckStatus_StatusCode = 1
	AckStatus_STATUS_CODE_SUCCESS     AckStatus_StatusCode = 2
)

// Enum value maps for AckStatus_StatusCode.
var (
	AckStatus_StatusCode_name = map[int32]string{
		0: "STATUS_CODE_UNSPECIFIED",
		1: "STATUS_CODE_FAILURE",
		2: "STATUS_CODE_SUCCESS",
	}
	AckStatus_StatusCode_value = map[string]int32{
		"STATUS_CODE_UNSPECIFIED": 0,
		"STATUS_CODE_FAILURE":     1,
		"STATUS_CODE_SUCCESS":     2,
	}
)

func (x AckStatus_StatusCode) Enum() *AckStatus_StatusCode {
	p := new(AckStatus_StatusCode)
	*p = x
	return p
}

func (x AckStatus_StatusCode) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (AckStatus_StatusCode) Descriptor() protoreflect.EnumDescriptor {
	return file_wgtwo_events_v1_events_proto_enumTypes[0].Descriptor()
}

func (AckStatus_StatusCode) Type() protoreflect.EnumType {
	return &file_wgtwo_events_v1_events_proto_enumTypes[0]
}

func (x AckStatus_StatusCode) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use AckStatus_StatusCode.Descriptor instead.
func (AckStatus_StatusCode) EnumDescriptor() ([]byte, []int) {
	return file_wgtwo_events_v1_events_proto_rawDescGZIP(), []int{4, 0}
}

// This is the configuration for setting up a event stream from our APIs.
//
// The client will be forced to reconnect after one hour to ensure it is using fresh access tokens.
//
// The default settings should be well suited for production usage, but 'max_in_flight' may be tweaked.
//
// Regular:
//   Warning: This is intended for testing purposes only and is not recommended for production.
//
//   All connected clients will see all events in the stream.
//   Reading position is not stored at the server, so disconnecting will make it start fresh.
//
// Durable Queue:
//   All connected clients with the same name will share the stream, so that an event will only be seen be a single
//   client.
//
//   The server will store the clients reading position for 1 hour after the client has disconnected.
//   That would make it possible for a client to resume reading after it has been disconnected.
//
//    Note:
//     - The custom_name is namespaced to be per OAuth 2.0 client, so using the same name for two different OAuth 2.0
//       clients will not make them part of the same stream.
//
//    Example:
//      Giving the following configuration, you may get approximately the distribution shown below:
//        3 × custom_name = "" (default)
//        2 × custom_name = "alice"
//        1 × custom_name = "bob"
//
//            ┌─►33 % ─► ""
//      ─ ─ ──┼─►33 % ─► ""
//            └─►33 % ─► ""
//      ─ ─ ──┬─►50 % ─► "alice"
//            └─►50 % ─► "alice"
//      ─ ─ ────►100 ──► "bob"
//
// Acknowledge:
//   The server will for the client to sent a ack message. If no such message has been received within 30 seconds,
//   the event will be resent.
//
// Max in-flight:
//   The server will only allow, by default, 50 in-flight unacknowledged events.
//   In combination with requiring acks, this allows the client to apply some backpressure.
//
//   Note that max in-flight > 1 may cause events to be received out-of-order, something the client must design for.
//
// Start Position:
//   This decides the policy used when a client connects without having its reading position stored at the server.
//   The start position may be set to
//   - only include new events (events created after connection)
//   - a specific ID
//   - starting at a given time
//   - deliver all available events
//
//
// All settings are optional, with the following set as default:
//
// - Events are load balanced between all connected clients using the same OAuth 2.0 client
//
// - Current reading position is remembered on the server for 1 hour, even if no clients are connected
//   That is, reading may resume even if the clients needs to disconnect
//
// - The clients needs to send a ack after processing a event
//   If a client does not ack within 30 seconds, the event will be resent
//
// - 50 un-acknowledged events will be allowed at once
//
// - If reading position is not stored in server, that is on first connection or if all clients has been gone for
//   30 minutes, only new events will be included.
type StreamConfiguration struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Optional: Will use DurableQueue by default
	//
	// Types that are assignable to StreamType:
	//	*StreamConfiguration_Regular
	//	*StreamConfiguration_DurableQueue
	StreamType isStreamConfiguration_StreamType `protobuf_oneof:"stream_type"`
	// Optional: By default, the client is required to send a ack message and will use a timeout of 30 seconds.
	//
	// Types that are assignable to AcknowledgeOption:
	//	*StreamConfiguration_DisableExplicitAck
	//	*StreamConfiguration_CustomAckTimeout
	AcknowledgeOption isStreamConfiguration_AcknowledgeOption `protobuf_oneof:"acknowledge_option"`
	// Optional: By default, max 50 unacknowledged events may be in-flight
	// Must be between 1 and 200
	MaxInFlight uint32 `protobuf:"varint,5,opt,name=max_in_flight,json=maxInFlight,proto3" json:"max_in_flight,omitempty"`
	// Optional: By default, only new events will be included
	//
	// Types that are assignable to StartPosition:
	//	*StreamConfiguration_StartAtNew
	//	*StreamConfiguration_StartAtId
	//	*StreamConfiguration_StartAtTimestamp
	//	*StreamConfiguration_StartAtOldestPossible
	StartPosition isStreamConfiguration_StartPosition `protobuf_oneof:"start_position"`
}

func (x *StreamConfiguration) Reset() {
	*x = StreamConfiguration{}
	if protoimpl.UnsafeEnabled {
		mi := &file_wgtwo_events_v1_events_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StreamConfiguration) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StreamConfiguration) ProtoMessage() {}

func (x *StreamConfiguration) ProtoReflect() protoreflect.Message {
	mi := &file_wgtwo_events_v1_events_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StreamConfiguration.ProtoReflect.Descriptor instead.
func (*StreamConfiguration) Descriptor() ([]byte, []int) {
	return file_wgtwo_events_v1_events_proto_rawDescGZIP(), []int{0}
}

func (m *StreamConfiguration) GetStreamType() isStreamConfiguration_StreamType {
	if m != nil {
		return m.StreamType
	}
	return nil
}

func (x *StreamConfiguration) GetRegular() *RegularStream {
	if x, ok := x.GetStreamType().(*StreamConfiguration_Regular); ok {
		return x.Regular
	}
	return nil
}

func (x *StreamConfiguration) GetDurableQueue() *DurableQueue {
	if x, ok := x.GetStreamType().(*StreamConfiguration_DurableQueue); ok {
		return x.DurableQueue
	}
	return nil
}

func (m *StreamConfiguration) GetAcknowledgeOption() isStreamConfiguration_AcknowledgeOption {
	if m != nil {
		return m.AcknowledgeOption
	}
	return nil
}

func (x *StreamConfiguration) GetDisableExplicitAck() *emptypb.Empty {
	if x, ok := x.GetAcknowledgeOption().(*StreamConfiguration_DisableExplicitAck); ok {
		return x.DisableExplicitAck
	}
	return nil
}

func (x *StreamConfiguration) GetCustomAckTimeout() *durationpb.Duration {
	if x, ok := x.GetAcknowledgeOption().(*StreamConfiguration_CustomAckTimeout); ok {
		return x.CustomAckTimeout
	}
	return nil
}

func (x *StreamConfiguration) GetMaxInFlight() uint32 {
	if x != nil {
		return x.MaxInFlight
	}
	return 0
}

func (m *StreamConfiguration) GetStartPosition() isStreamConfiguration_StartPosition {
	if m != nil {
		return m.StartPosition
	}
	return nil
}

func (x *StreamConfiguration) GetStartAtNew() uint64 {
	if x, ok := x.GetStartPosition().(*StreamConfiguration_StartAtNew); ok {
		return x.StartAtNew
	}
	return 0
}

func (x *StreamConfiguration) GetStartAtId() uint64 {
	if x, ok := x.GetStartPosition().(*StreamConfiguration_StartAtId); ok {
		return x.StartAtId
	}
	return 0
}

func (x *StreamConfiguration) GetStartAtTimestamp() *timestamppb.Timestamp {
	if x, ok := x.GetStartPosition().(*StreamConfiguration_StartAtTimestamp); ok {
		return x.StartAtTimestamp
	}
	return nil
}

func (x *StreamConfiguration) GetStartAtOldestPossible() *emptypb.Empty {
	if x, ok := x.GetStartPosition().(*StreamConfiguration_StartAtOldestPossible); ok {
		return x.StartAtOldestPossible
	}
	return nil
}

type isStreamConfiguration_StreamType interface {
	isStreamConfiguration_StreamType()
}

type StreamConfiguration_Regular struct {
	Regular *RegularStream `protobuf:"bytes,1,opt,name=regular,proto3,oneof"`
}

type StreamConfiguration_DurableQueue struct {
	DurableQueue *DurableQueue `protobuf:"bytes,2,opt,name=durable_queue,json=durableQueue,proto3,oneof"`
}

func (*StreamConfiguration_Regular) isStreamConfiguration_StreamType() {}

func (*StreamConfiguration_DurableQueue) isStreamConfiguration_StreamType() {}

type isStreamConfiguration_AcknowledgeOption interface {
	isStreamConfiguration_AcknowledgeOption()
}

type StreamConfiguration_DisableExplicitAck struct {
	// Disable ack
	DisableExplicitAck *emptypb.Empty `protobuf:"bytes,3,opt,name=disable_explicit_ack,json=disableExplicitAck,proto3,oneof"`
}

type StreamConfiguration_CustomAckTimeout struct {
	// Must be between 10 seconds and 10 minutes
	CustomAckTimeout *durationpb.Duration `protobuf:"bytes,4,opt,name=custom_ack_timeout,json=customAckTimeout,proto3,oneof"`
}

func (*StreamConfiguration_DisableExplicitAck) isStreamConfiguration_AcknowledgeOption() {}

func (*StreamConfiguration_CustomAckTimeout) isStreamConfiguration_AcknowledgeOption() {}

type isStreamConfiguration_StartPosition interface {
	isStreamConfiguration_StartPosition()
}

type StreamConfiguration_StartAtNew struct {
	// Will only deliver events generated after this subscription was started
	StartAtNew uint64 `protobuf:"varint,6,opt,name=start_at_new,json=startAtNew,proto3,oneof"`
}

type StreamConfiguration_StartAtId struct {
	// Will deliver events from the given ID
	StartAtId uint64 `protobuf:"varint,7,opt,name=start_at_id,json=startAtId,proto3,oneof"`
}

type StreamConfiguration_StartAtTimestamp struct {
	// Will deliver events from the given timestamp
	StartAtTimestamp *timestamppb.Timestamp `protobuf:"bytes,8,opt,name=start_at_timestamp,json=startAtTimestamp,proto3,oneof"`
}

type StreamConfiguration_StartAtOldestPossible struct {
	// Will deliver all available events
	StartAtOldestPossible *emptypb.Empty `protobuf:"bytes,9,opt,name=start_at_oldest_possible,json=startAtOldestPossible,proto3,oneof"`
}

func (*StreamConfiguration_StartAtNew) isStreamConfiguration_StartPosition() {}

func (*StreamConfiguration_StartAtId) isStreamConfiguration_StartPosition() {}

func (*StreamConfiguration_StartAtTimestamp) isStreamConfiguration_StartPosition() {}

func (*StreamConfiguration_StartAtOldestPossible) isStreamConfiguration_StartPosition() {}

// All connected clients will see all events in the stream.
// Reading position is not stored at the server, so disconnecting will make it start fresh.
type RegularStream struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *RegularStream) Reset() {
	*x = RegularStream{}
	if protoimpl.UnsafeEnabled {
		mi := &file_wgtwo_events_v1_events_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RegularStream) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RegularStream) ProtoMessage() {}

func (x *RegularStream) ProtoReflect() protoreflect.Message {
	mi := &file_wgtwo_events_v1_events_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RegularStream.ProtoReflect.Descriptor instead.
func (*RegularStream) Descriptor() ([]byte, []int) {
	return file_wgtwo_events_v1_events_proto_rawDescGZIP(), []int{1}
}

// All connected clients with the same name will share the stream, so that an event will only be seen be a single
// client.
//
// The server will store the clients reading position for 1 hour after the client has disconnected.
// That would make it possible for a client to resume reading after it has been disconnected.
//
// If e.g. five group of clients should see all events in the stream, each group must be given a unique name.
type DurableQueue struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Optional: Messages will by default be shared between all connections using the same OAuth 2.0 client
	CustomName string `protobuf:"bytes,1,opt,name=custom_name,json=customName,proto3" json:"custom_name,omitempty"`
}

func (x *DurableQueue) Reset() {
	*x = DurableQueue{}
	if protoimpl.UnsafeEnabled {
		mi := &file_wgtwo_events_v1_events_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DurableQueue) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DurableQueue) ProtoMessage() {}

func (x *DurableQueue) ProtoReflect() protoreflect.Message {
	mi := &file_wgtwo_events_v1_events_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DurableQueue.ProtoReflect.Descriptor instead.
func (*DurableQueue) Descriptor() ([]byte, []int) {
	return file_wgtwo_events_v1_events_proto_rawDescGZIP(), []int{2}
}

func (x *DurableQueue) GetCustomName() string {
	if x != nil {
		return x.CustomName
	}
	return ""
}

// This contains a opaque string which should be included in the ack request to identify the event
type AckInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Value string `protobuf:"bytes,1,opt,name=value,proto3" json:"value,omitempty"`
}

func (x *AckInfo) Reset() {
	*x = AckInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_wgtwo_events_v1_events_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AckInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AckInfo) ProtoMessage() {}

func (x *AckInfo) ProtoReflect() protoreflect.Message {
	mi := &file_wgtwo_events_v1_events_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AckInfo.ProtoReflect.Descriptor instead.
func (*AckInfo) Descriptor() ([]byte, []int) {
	return file_wgtwo_events_v1_events_proto_rawDescGZIP(), []int{3}
}

func (x *AckInfo) GetValue() string {
	if x != nil {
		return x.Value
	}
	return ""
}

// Status of the ack request
//
// If status is not successful, the ack request may be retried.
// Everything except AckStatusCodeACK_STATUS_SUCCESS should be treated as a failure
type AckStatus struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	StatusCode AckStatus_StatusCode `protobuf:"varint,1,opt,name=status_code,json=statusCode,proto3,enum=wgtwo.events.v1.AckStatus_StatusCode" json:"status_code,omitempty"`
}

func (x *AckStatus) Reset() {
	*x = AckStatus{}
	if protoimpl.UnsafeEnabled {
		mi := &file_wgtwo_events_v1_events_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AckStatus) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AckStatus) ProtoMessage() {}

func (x *AckStatus) ProtoReflect() protoreflect.Message {
	mi := &file_wgtwo_events_v1_events_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AckStatus.ProtoReflect.Descriptor instead.
func (*AckStatus) Descriptor() ([]byte, []int) {
	return file_wgtwo_events_v1_events_proto_rawDescGZIP(), []int{4}
}

func (x *AckStatus) GetStatusCode() AckStatus_StatusCode {
	if x != nil {
		return x.StatusCode
	}
	return AckStatus_STATUS_CODE_UNSPECIFIED
}

// Ack request, which is required for sending a ack of an event
type AckRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AckInfo *AckInfo `protobuf:"bytes,1,opt,name=ack_info,json=ackInfo,proto3" json:"ack_info,omitempty"`
}

func (x *AckRequest) Reset() {
	*x = AckRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_wgtwo_events_v1_events_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AckRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AckRequest) ProtoMessage() {}

func (x *AckRequest) ProtoReflect() protoreflect.Message {
	mi := &file_wgtwo_events_v1_events_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AckRequest.ProtoReflect.Descriptor instead.
func (*AckRequest) Descriptor() ([]byte, []int) {
	return file_wgtwo_events_v1_events_proto_rawDescGZIP(), []int{5}
}

func (x *AckRequest) GetAckInfo() *AckInfo {
	if x != nil {
		return x.AckInfo
	}
	return nil
}

// This response includes the status of the ack request
type AckResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AckStatus *AckStatus `protobuf:"bytes,1,opt,name=ack_status,json=ackStatus,proto3" json:"ack_status,omitempty"`
}

func (x *AckResponse) Reset() {
	*x = AckResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_wgtwo_events_v1_events_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AckResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AckResponse) ProtoMessage() {}

func (x *AckResponse) ProtoReflect() protoreflect.Message {
	mi := &file_wgtwo_events_v1_events_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AckResponse.ProtoReflect.Descriptor instead.
func (*AckResponse) Descriptor() ([]byte, []int) {
	return file_wgtwo_events_v1_events_proto_rawDescGZIP(), []int{6}
}

func (x *AckResponse) GetAckStatus() *AckStatus {
	if x != nil {
		return x.AckStatus
	}
	return nil
}

// Identity of the subscription this event was generated for.
type Identifier struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SubscriptionIdentifier *v1.SubscriptionIdentifier `protobuf:"bytes,1,opt,name=subscription_identifier,json=subscriptionIdentifier,proto3" json:"subscription_identifier,omitempty"`
}

func (x *Identifier) Reset() {
	*x = Identifier{}
	if protoimpl.UnsafeEnabled {
		mi := &file_wgtwo_events_v1_events_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Identifier) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Identifier) ProtoMessage() {}

func (x *Identifier) ProtoReflect() protoreflect.Message {
	mi := &file_wgtwo_events_v1_events_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Identifier.ProtoReflect.Descriptor instead.
func (*Identifier) Descriptor() ([]byte, []int) {
	return file_wgtwo_events_v1_events_proto_rawDescGZIP(), []int{7}
}

func (x *Identifier) GetSubscriptionIdentifier() *v1.SubscriptionIdentifier {
	if x != nil {
		return x.SubscriptionIdentifier
	}
	return nil
}

// Metadata about the event
type Metadata struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The timestamp this event was generated
	Timestamp *timestamppb.Timestamp `protobuf:"bytes,1,opt,name=timestamp,proto3" json:"timestamp,omitempty"`
	// Identity of the subscription this event was generated for.
	Identifier *Identifier `protobuf:"bytes,2,opt,name=identifier,proto3" json:"identifier,omitempty"`
	// Information that must be included in the ack request to identify the event
	AckInfo *AckInfo `protobuf:"bytes,3,opt,name=ack_info,json=ackInfo,proto3" json:"ack_info,omitempty"`
	// True when this is not the first time the message has been sent
	IsRedelivered bool `protobuf:"varint,4,opt,name=is_redelivered,json=isRedelivered,proto3" json:"is_redelivered,omitempty"`
}

func (x *Metadata) Reset() {
	*x = Metadata{}
	if protoimpl.UnsafeEnabled {
		mi := &file_wgtwo_events_v1_events_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Metadata) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Metadata) ProtoMessage() {}

func (x *Metadata) ProtoReflect() protoreflect.Message {
	mi := &file_wgtwo_events_v1_events_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Metadata.ProtoReflect.Descriptor instead.
func (*Metadata) Descriptor() ([]byte, []int) {
	return file_wgtwo_events_v1_events_proto_rawDescGZIP(), []int{8}
}

func (x *Metadata) GetTimestamp() *timestamppb.Timestamp {
	if x != nil {
		return x.Timestamp
	}
	return nil
}

func (x *Metadata) GetIdentifier() *Identifier {
	if x != nil {
		return x.Identifier
	}
	return nil
}

func (x *Metadata) GetAckInfo() *AckInfo {
	if x != nil {
		return x.AckInfo
	}
	return nil
}

func (x *Metadata) GetIsRedelivered() bool {
	if x != nil {
		return x.IsRedelivered
	}
	return false
}

var File_wgtwo_events_v1_events_proto protoreflect.FileDescriptor

var file_wgtwo_events_v1_events_proto_rawDesc = []byte{
	0x0a, 0x1c, 0x77, 0x67, 0x74, 0x77, 0x6f, 0x2f, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x76,
	0x31, 0x2f, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x0f,
	0x77, 0x67, 0x74, 0x77, 0x6f, 0x2e, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x2e, 0x76, 0x31, 0x1a,
	0x1e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2f, 0x64, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a,
	0x1b, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2f, 0x65, 0x6d, 0x70, 0x74, 0x79, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1f, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x74, 0x69,
	0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1b, 0x77,
	0x67, 0x74, 0x77, 0x6f, 0x2f, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2f, 0x76, 0x31, 0x2f, 0x74,
	0x79, 0x70, 0x65, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0xee, 0x04, 0x0a, 0x13, 0x53,
	0x74, 0x72, 0x65, 0x61, 0x6d, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x12, 0x3a, 0x0a, 0x07, 0x72, 0x65, 0x67, 0x75, 0x6c, 0x61, 0x72, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x77, 0x67, 0x74, 0x77, 0x6f, 0x2e, 0x65, 0x76, 0x65, 0x6e,
	0x74, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x65, 0x67, 0x75, 0x6c, 0x61, 0x72, 0x53, 0x74, 0x72,
	0x65, 0x61, 0x6d, 0x48, 0x00, 0x52, 0x07, 0x72, 0x65, 0x67, 0x75, 0x6c, 0x61, 0x72, 0x12, 0x44,
	0x0a, 0x0d, 0x64, 0x75, 0x72, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x71, 0x75, 0x65, 0x75, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x77, 0x67, 0x74, 0x77, 0x6f, 0x2e, 0x65, 0x76,
	0x65, 0x6e, 0x74, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x75, 0x72, 0x61, 0x62, 0x6c, 0x65, 0x51,
	0x75, 0x65, 0x75, 0x65, 0x48, 0x00, 0x52, 0x0c, 0x64, 0x75, 0x72, 0x61, 0x62, 0x6c, 0x65, 0x51,
	0x75, 0x65, 0x75, 0x65, 0x12, 0x4a, 0x0a, 0x14, 0x64, 0x69, 0x73, 0x61, 0x62, 0x6c, 0x65, 0x5f,
	0x65, 0x78, 0x70, 0x6c, 0x69, 0x63, 0x69, 0x74, 0x5f, 0x61, 0x63, 0x6b, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x48, 0x01, 0x52, 0x12, 0x64, 0x69,
	0x73, 0x61, 0x62, 0x6c, 0x65, 0x45, 0x78, 0x70, 0x6c, 0x69, 0x63, 0x69, 0x74, 0x41, 0x63, 0x6b,
	0x12, 0x49, 0x0a, 0x12, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x5f, 0x61, 0x63, 0x6b, 0x5f, 0x74,
	0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x44,
	0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x48, 0x01, 0x52, 0x10, 0x63, 0x75, 0x73, 0x74, 0x6f,
	0x6d, 0x41, 0x63, 0x6b, 0x54, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x12, 0x22, 0x0a, 0x0d, 0x6d,
	0x61, 0x78, 0x5f, 0x69, 0x6e, 0x5f, 0x66, 0x6c, 0x69, 0x67, 0x68, 0x74, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x0b, 0x6d, 0x61, 0x78, 0x49, 0x6e, 0x46, 0x6c, 0x69, 0x67, 0x68, 0x74, 0x12,
	0x22, 0x0a, 0x0c, 0x73, 0x74, 0x61, 0x72, 0x74, 0x5f, 0x61, 0x74, 0x5f, 0x6e, 0x65, 0x77, 0x18,
	0x06, 0x20, 0x01, 0x28, 0x04, 0x48, 0x02, 0x52, 0x0a, 0x73, 0x74, 0x61, 0x72, 0x74, 0x41, 0x74,
	0x4e, 0x65, 0x77, 0x12, 0x20, 0x0a, 0x0b, 0x73, 0x74, 0x61, 0x72, 0x74, 0x5f, 0x61, 0x74, 0x5f,
	0x69, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x04, 0x48, 0x02, 0x52, 0x09, 0x73, 0x74, 0x61, 0x72,
	0x74, 0x41, 0x74, 0x49, 0x64, 0x12, 0x4a, 0x0a, 0x12, 0x73, 0x74, 0x61, 0x72, 0x74, 0x5f, 0x61,
	0x74, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x18, 0x08, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x48, 0x02, 0x52,
	0x10, 0x73, 0x74, 0x61, 0x72, 0x74, 0x41, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d,
	0x70, 0x12, 0x51, 0x0a, 0x18, 0x73, 0x74, 0x61, 0x72, 0x74, 0x5f, 0x61, 0x74, 0x5f, 0x6f, 0x6c,
	0x64, 0x65, 0x73, 0x74, 0x5f, 0x70, 0x6f, 0x73, 0x73, 0x69, 0x62, 0x6c, 0x65, 0x18, 0x09, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x48, 0x02, 0x52, 0x15, 0x73,
	0x74, 0x61, 0x72, 0x74, 0x41, 0x74, 0x4f, 0x6c, 0x64, 0x65, 0x73, 0x74, 0x50, 0x6f, 0x73, 0x73,
	0x69, 0x62, 0x6c, 0x65, 0x42, 0x0d, 0x0a, 0x0b, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x5f, 0x74,
	0x79, 0x70, 0x65, 0x42, 0x14, 0x0a, 0x12, 0x61, 0x63, 0x6b, 0x6e, 0x6f, 0x77, 0x6c, 0x65, 0x64,
	0x67, 0x65, 0x5f, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x10, 0x0a, 0x0e, 0x73, 0x74, 0x61,
	0x72, 0x74, 0x5f, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x0f, 0x0a, 0x0d, 0x52,
	0x65, 0x67, 0x75, 0x6c, 0x61, 0x72, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x22, 0x2f, 0x0a, 0x0c,
	0x44, 0x75, 0x72, 0x61, 0x62, 0x6c, 0x65, 0x51, 0x75, 0x65, 0x75, 0x65, 0x12, 0x1f, 0x0a, 0x0b,
	0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0a, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x4e, 0x61, 0x6d, 0x65, 0x22, 0x1f, 0x0a,
	0x07, 0x41, 0x63, 0x6b, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x22, 0xb0,
	0x01, 0x0a, 0x09, 0x41, 0x63, 0x6b, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x46, 0x0a, 0x0b,
	0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x25, 0x2e, 0x77, 0x67, 0x74, 0x77, 0x6f, 0x2e, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x73,
	0x2e, 0x76, 0x31, 0x2e, 0x41, 0x63, 0x6b, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x2e, 0x53, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x43, 0x6f, 0x64, 0x65, 0x52, 0x0a, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x43, 0x6f, 0x64, 0x65, 0x22, 0x5b, 0x0a, 0x0a, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x43, 0x6f,
	0x64, 0x65, 0x12, 0x1b, 0x0a, 0x17, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x43, 0x4f, 0x44,
	0x45, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12,
	0x17, 0x0a, 0x13, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x43, 0x4f, 0x44, 0x45, 0x5f, 0x46,
	0x41, 0x49, 0x4c, 0x55, 0x52, 0x45, 0x10, 0x01, 0x12, 0x17, 0x0a, 0x13, 0x53, 0x54, 0x41, 0x54,
	0x55, 0x53, 0x5f, 0x43, 0x4f, 0x44, 0x45, 0x5f, 0x53, 0x55, 0x43, 0x43, 0x45, 0x53, 0x53, 0x10,
	0x02, 0x22, 0x41, 0x0a, 0x0a, 0x41, 0x63, 0x6b, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x33, 0x0a, 0x08, 0x61, 0x63, 0x6b, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x18, 0x2e, 0x77, 0x67, 0x74, 0x77, 0x6f, 0x2e, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x73,
	0x2e, 0x76, 0x31, 0x2e, 0x41, 0x63, 0x6b, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x07, 0x61, 0x63, 0x6b,
	0x49, 0x6e, 0x66, 0x6f, 0x22, 0x48, 0x0a, 0x0b, 0x41, 0x63, 0x6b, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x39, 0x0a, 0x0a, 0x61, 0x63, 0x6b, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x77, 0x67, 0x74, 0x77, 0x6f, 0x2e,
	0x65, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x63, 0x6b, 0x53, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x52, 0x09, 0x61, 0x63, 0x6b, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x22, 0x6e,
	0x0a, 0x0a, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x12, 0x60, 0x0a, 0x17,
	0x73, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x65,
	0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x27, 0x2e,
	0x77, 0x67, 0x74, 0x77, 0x6f, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x2e,
	0x53, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x65, 0x6e,
	0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x52, 0x16, 0x73, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x70,
	0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x22, 0xdd,
	0x01, 0x0a, 0x08, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x12, 0x38, 0x0a, 0x09, 0x74,
	0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x09, 0x74, 0x69, 0x6d, 0x65,
	0x73, 0x74, 0x61, 0x6d, 0x70, 0x12, 0x3b, 0x0a, 0x0a, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66,
	0x69, 0x65, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x77, 0x67, 0x74, 0x77,
	0x6f, 0x2e, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x49, 0x64, 0x65, 0x6e,
	0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x52, 0x0a, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69,
	0x65, 0x72, 0x12, 0x33, 0x0a, 0x08, 0x61, 0x63, 0x6b, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x77, 0x67, 0x74, 0x77, 0x6f, 0x2e, 0x65, 0x76, 0x65,
	0x6e, 0x74, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x63, 0x6b, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x07,
	0x61, 0x63, 0x6b, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x25, 0x0a, 0x0e, 0x69, 0x73, 0x5f, 0x72, 0x65,
	0x64, 0x65, 0x6c, 0x69, 0x76, 0x65, 0x72, 0x65, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x0d, 0x69, 0x73, 0x52, 0x65, 0x64, 0x65, 0x6c, 0x69, 0x76, 0x65, 0x72, 0x65, 0x64, 0x42, 0x5e,
	0x0a, 0x17, 0x63, 0x6f, 0x6d, 0x2e, 0x77, 0x67, 0x74, 0x77, 0x6f, 0x2e, 0x61, 0x70, 0x69, 0x2e,
	0x76, 0x31, 0x2e, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x42, 0x0b, 0x45, 0x76, 0x65, 0x6e, 0x74,
	0x73, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x5a, 0x36, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63,
	0x6f, 0x6d, 0x2f, 0x77, 0x6f, 0x72, 0x6b, 0x69, 0x6e, 0x67, 0x2d, 0x67, 0x72, 0x6f, 0x75, 0x70,
	0x2d, 0x74, 0x77, 0x6f, 0x2f, 0x77, 0x67, 0x74, 0x77, 0x6f, 0x61, 0x70, 0x69, 0x73, 0x2f, 0x77,
	0x67, 0x74, 0x77, 0x6f, 0x2f, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x76, 0x31, 0x62, 0x06,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_wgtwo_events_v1_events_proto_rawDescOnce sync.Once
	file_wgtwo_events_v1_events_proto_rawDescData = file_wgtwo_events_v1_events_proto_rawDesc
)

func file_wgtwo_events_v1_events_proto_rawDescGZIP() []byte {
	file_wgtwo_events_v1_events_proto_rawDescOnce.Do(func() {
		file_wgtwo_events_v1_events_proto_rawDescData = protoimpl.X.CompressGZIP(file_wgtwo_events_v1_events_proto_rawDescData)
	})
	return file_wgtwo_events_v1_events_proto_rawDescData
}

var file_wgtwo_events_v1_events_proto_enumTypes = make([]protoimpl.EnumInfo, 1)
var file_wgtwo_events_v1_events_proto_msgTypes = make([]protoimpl.MessageInfo, 9)
var file_wgtwo_events_v1_events_proto_goTypes = []interface{}{
	(AckStatus_StatusCode)(0),         // 0: wgtwo.events.v1.AckStatus.StatusCode
	(*StreamConfiguration)(nil),       // 1: wgtwo.events.v1.StreamConfiguration
	(*RegularStream)(nil),             // 2: wgtwo.events.v1.RegularStream
	(*DurableQueue)(nil),              // 3: wgtwo.events.v1.DurableQueue
	(*AckInfo)(nil),                   // 4: wgtwo.events.v1.AckInfo
	(*AckStatus)(nil),                 // 5: wgtwo.events.v1.AckStatus
	(*AckRequest)(nil),                // 6: wgtwo.events.v1.AckRequest
	(*AckResponse)(nil),               // 7: wgtwo.events.v1.AckResponse
	(*Identifier)(nil),                // 8: wgtwo.events.v1.Identifier
	(*Metadata)(nil),                  // 9: wgtwo.events.v1.Metadata
	(*emptypb.Empty)(nil),             // 10: google.protobuf.Empty
	(*durationpb.Duration)(nil),       // 11: google.protobuf.Duration
	(*timestamppb.Timestamp)(nil),     // 12: google.protobuf.Timestamp
	(*v1.SubscriptionIdentifier)(nil), // 13: wgtwo.common.v1.SubscriptionIdentifier
}
var file_wgtwo_events_v1_events_proto_depIdxs = []int32{
	2,  // 0: wgtwo.events.v1.StreamConfiguration.regular:type_name -> wgtwo.events.v1.RegularStream
	3,  // 1: wgtwo.events.v1.StreamConfiguration.durable_queue:type_name -> wgtwo.events.v1.DurableQueue
	10, // 2: wgtwo.events.v1.StreamConfiguration.disable_explicit_ack:type_name -> google.protobuf.Empty
	11, // 3: wgtwo.events.v1.StreamConfiguration.custom_ack_timeout:type_name -> google.protobuf.Duration
	12, // 4: wgtwo.events.v1.StreamConfiguration.start_at_timestamp:type_name -> google.protobuf.Timestamp
	10, // 5: wgtwo.events.v1.StreamConfiguration.start_at_oldest_possible:type_name -> google.protobuf.Empty
	0,  // 6: wgtwo.events.v1.AckStatus.status_code:type_name -> wgtwo.events.v1.AckStatus.StatusCode
	4,  // 7: wgtwo.events.v1.AckRequest.ack_info:type_name -> wgtwo.events.v1.AckInfo
	5,  // 8: wgtwo.events.v1.AckResponse.ack_status:type_name -> wgtwo.events.v1.AckStatus
	13, // 9: wgtwo.events.v1.Identifier.subscription_identifier:type_name -> wgtwo.common.v1.SubscriptionIdentifier
	12, // 10: wgtwo.events.v1.Metadata.timestamp:type_name -> google.protobuf.Timestamp
	8,  // 11: wgtwo.events.v1.Metadata.identifier:type_name -> wgtwo.events.v1.Identifier
	4,  // 12: wgtwo.events.v1.Metadata.ack_info:type_name -> wgtwo.events.v1.AckInfo
	13, // [13:13] is the sub-list for method output_type
	13, // [13:13] is the sub-list for method input_type
	13, // [13:13] is the sub-list for extension type_name
	13, // [13:13] is the sub-list for extension extendee
	0,  // [0:13] is the sub-list for field type_name
}

func init() { file_wgtwo_events_v1_events_proto_init() }
func file_wgtwo_events_v1_events_proto_init() {
	if File_wgtwo_events_v1_events_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_wgtwo_events_v1_events_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StreamConfiguration); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_wgtwo_events_v1_events_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RegularStream); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_wgtwo_events_v1_events_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DurableQueue); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_wgtwo_events_v1_events_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AckInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_wgtwo_events_v1_events_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AckStatus); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_wgtwo_events_v1_events_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AckRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_wgtwo_events_v1_events_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AckResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_wgtwo_events_v1_events_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Identifier); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_wgtwo_events_v1_events_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Metadata); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_wgtwo_events_v1_events_proto_msgTypes[0].OneofWrappers = []interface{}{
		(*StreamConfiguration_Regular)(nil),
		(*StreamConfiguration_DurableQueue)(nil),
		(*StreamConfiguration_DisableExplicitAck)(nil),
		(*StreamConfiguration_CustomAckTimeout)(nil),
		(*StreamConfiguration_StartAtNew)(nil),
		(*StreamConfiguration_StartAtId)(nil),
		(*StreamConfiguration_StartAtTimestamp)(nil),
		(*StreamConfiguration_StartAtOldestPossible)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_wgtwo_events_v1_events_proto_rawDesc,
			NumEnums:      1,
			NumMessages:   9,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_wgtwo_events_v1_events_proto_goTypes,
		DependencyIndexes: file_wgtwo_events_v1_events_proto_depIdxs,
		EnumInfos:         file_wgtwo_events_v1_events_proto_enumTypes,
		MessageInfos:      file_wgtwo_events_v1_events_proto_msgTypes,
	}.Build()
	File_wgtwo_events_v1_events_proto = out.File
	file_wgtwo_events_v1_events_proto_rawDesc = nil
	file_wgtwo_events_v1_events_proto_goTypes = nil
	file_wgtwo_events_v1_events_proto_depIdxs = nil
}
