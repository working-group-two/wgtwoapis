// Copyright 2021 [Working Group Two]/[Cisco Systems]
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.8
// 	protoc        (unknown)
// source: wgtwo/events/v1/events.proto

package v1

import (
	v1 "github.com/working-group-two/wgtwoapis/wgtwo/common/v1"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	durationpb "google.golang.org/protobuf/types/known/durationpb"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
	reflect "reflect"
	sync "sync"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// Status of the ack request enum
type AckStatus_StatusCode int32

const (
	// Unspecified status code; it's a server error if this is returned
	AckStatus_STATUS_CODE_UNSPECIFIED AckStatus_StatusCode = 0
	// The ack request failed
	AckStatus_STATUS_CODE_FAILURE AckStatus_StatusCode = 1
	// The ack request was successful
	AckStatus_STATUS_CODE_SUCCESS AckStatus_StatusCode = 2
)

// Enum value maps for AckStatus_StatusCode.
var (
	AckStatus_StatusCode_name = map[int32]string{
		0: "STATUS_CODE_UNSPECIFIED",
		1: "STATUS_CODE_FAILURE",
		2: "STATUS_CODE_SUCCESS",
	}
	AckStatus_StatusCode_value = map[string]int32{
		"STATUS_CODE_UNSPECIFIED": 0,
		"STATUS_CODE_FAILURE":     1,
		"STATUS_CODE_SUCCESS":     2,
	}
)

func (x AckStatus_StatusCode) Enum() *AckStatus_StatusCode {
	p := new(AckStatus_StatusCode)
	*p = x
	return p
}

func (x AckStatus_StatusCode) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (AckStatus_StatusCode) Descriptor() protoreflect.EnumDescriptor {
	return file_wgtwo_events_v1_events_proto_enumTypes[0].Descriptor()
}

func (AckStatus_StatusCode) Type() protoreflect.EnumType {
	return &file_wgtwo_events_v1_events_proto_enumTypes[0]
}

func (x AckStatus_StatusCode) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use AckStatus_StatusCode.Descriptor instead.
func (AckStatus_StatusCode) EnumDescriptor() ([]byte, []int) {
	return file_wgtwo_events_v1_events_proto_rawDescGZIP(), []int{4, 0}
}

// This is the configuration for setting up a event stream from our APIs.
//
// The client will be forced to reconnect after one hour to ensure it is using fresh access tokens.
//
// The default settings should be well suited for production usage, but 'max_in_flight' may be tweaked.
//
// Regular:
//
//	Warning: This is intended for testing purposes only and is not recommended for production.
//
//	All connected clients will see all events in the stream.
//	Reading position is not stored at the server, so disconnecting will make it start fresh.
//
// Durable Queue:
//
//	All connected clients with the same name will share the stream, so that an event will only be seen be a single
//	client.
//
//	The server will store the clients reading position for 1 hour after the client has disconnected.
//	That would make it possible for a client to resume reading after it has been disconnected.
//
//	 Note:
//	  - The custom_name is namespaced to be per OAuth 2.0 client, so using the same name for two different OAuth 2.0
//	    clients will not make them part of the same stream.
//
//	 Example:
//	   Giving the following configuration, you may get approximately the distribution shown below:
//	     3 × custom_name = "" (default)
//	     2 × custom_name = "alice"
//	     1 × custom_name = "bob"
//
//	         ┌─►33 % ─► ""
//	   ─ ─ ──┼─►33 % ─► ""
//	         └─►33 % ─► ""
//	   ─ ─ ──┬─►50 % ─► "alice"
//	         └─►50 % ─► "alice"
//	   ─ ─ ────►100 ──► "bob"
//
// Acknowledge:
//
//	The server will for the client to sent a ack message. If no such message has been received within 30 seconds,
//	the event will be resent.
//
// Max in-flight:
//
//	The server will only allow, by default, 50 in-flight unacknowledged events.
//	In combination with requiring acks, this allows the client to apply some backpressure.
//
//	Note that max in-flight > 1 may cause events to be received out-of-order, something the client must design for.
//
// Start Position:
//
//	This decides the policy used when a client connects without having its reading position stored at the server.
//	The start position may be set to
//	- only include new events (events created after connection)
//	- a specific ID
//	- starting at a given time
//	- deliver all available events
//
// All settings are optional, with the following set as default:
//
// - Events are load balanced between all connected clients using the same OAuth 2.0 client
//
//   - Current reading position is remembered on the server for 1 hour, even if no clients are connected
//     That is, reading may resume even if the clients needs to disconnect
//
//   - The clients needs to send a ack after processing a event
//     If a client does not ack within 30 seconds, the event will be resent
//
// - 50 un-acknowledged events will be allowed at once
//
//   - If reading position is not stored in server, that is on first connection or if all clients has been gone for
//     30 minutes, only new events will be included.
type StreamConfiguration struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Optional: Will use DurableQueue by default
	//
	// Types that are valid to be assigned to StreamType:
	//
	//	*StreamConfiguration_Regular
	//	*StreamConfiguration_DurableQueue
	StreamType isStreamConfiguration_StreamType `protobuf_oneof:"stream_type"`
	// Optional: By default, the client is required to send a ack message and will use a timeout of 30 seconds.
	//
	// Types that are valid to be assigned to AcknowledgeOption:
	//
	//	*StreamConfiguration_DisableExplicitAck
	//	*StreamConfiguration_CustomAckTimeout
	AcknowledgeOption isStreamConfiguration_AcknowledgeOption `protobuf_oneof:"acknowledge_option"`
	// Optional: By default, max 50 unacknowledged events may be in-flight
	// Must be between 1 and 200
	MaxInFlight uint32 `protobuf:"varint,5,opt,name=max_in_flight,json=maxInFlight,proto3" json:"max_in_flight,omitempty"`
	// Optional: By default, only new events will be included
	//
	// Types that are valid to be assigned to StartPosition:
	//
	//	*StreamConfiguration_StartAtNew
	//	*StreamConfiguration_StartAtId
	//	*StreamConfiguration_StartAtTimestamp
	//	*StreamConfiguration_StartAtOldestPossible
	StartPosition isStreamConfiguration_StartPosition `protobuf_oneof:"start_position"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *StreamConfiguration) Reset() {
	*x = StreamConfiguration{}
	mi := &file_wgtwo_events_v1_events_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *StreamConfiguration) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StreamConfiguration) ProtoMessage() {}

func (x *StreamConfiguration) ProtoReflect() protoreflect.Message {
	mi := &file_wgtwo_events_v1_events_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StreamConfiguration.ProtoReflect.Descriptor instead.
func (*StreamConfiguration) Descriptor() ([]byte, []int) {
	return file_wgtwo_events_v1_events_proto_rawDescGZIP(), []int{0}
}

func (x *StreamConfiguration) GetStreamType() isStreamConfiguration_StreamType {
	if x != nil {
		return x.StreamType
	}
	return nil
}

func (x *StreamConfiguration) GetRegular() *RegularStream {
	if x != nil {
		if x, ok := x.StreamType.(*StreamConfiguration_Regular); ok {
			return x.Regular
		}
	}
	return nil
}

func (x *StreamConfiguration) GetDurableQueue() *DurableQueue {
	if x != nil {
		if x, ok := x.StreamType.(*StreamConfiguration_DurableQueue); ok {
			return x.DurableQueue
		}
	}
	return nil
}

func (x *StreamConfiguration) GetAcknowledgeOption() isStreamConfiguration_AcknowledgeOption {
	if x != nil {
		return x.AcknowledgeOption
	}
	return nil
}

func (x *StreamConfiguration) GetDisableExplicitAck() *emptypb.Empty {
	if x != nil {
		if x, ok := x.AcknowledgeOption.(*StreamConfiguration_DisableExplicitAck); ok {
			return x.DisableExplicitAck
		}
	}
	return nil
}

func (x *StreamConfiguration) GetCustomAckTimeout() *durationpb.Duration {
	if x != nil {
		if x, ok := x.AcknowledgeOption.(*StreamConfiguration_CustomAckTimeout); ok {
			return x.CustomAckTimeout
		}
	}
	return nil
}

func (x *StreamConfiguration) GetMaxInFlight() uint32 {
	if x != nil {
		return x.MaxInFlight
	}
	return 0
}

func (x *StreamConfiguration) GetStartPosition() isStreamConfiguration_StartPosition {
	if x != nil {
		return x.StartPosition
	}
	return nil
}

func (x *StreamConfiguration) GetStartAtNew() *emptypb.Empty {
	if x != nil {
		if x, ok := x.StartPosition.(*StreamConfiguration_StartAtNew); ok {
			return x.StartAtNew
		}
	}
	return nil
}

func (x *StreamConfiguration) GetStartAtId() uint64 {
	if x != nil {
		if x, ok := x.StartPosition.(*StreamConfiguration_StartAtId); ok {
			return x.StartAtId
		}
	}
	return 0
}

func (x *StreamConfiguration) GetStartAtTimestamp() *timestamppb.Timestamp {
	if x != nil {
		if x, ok := x.StartPosition.(*StreamConfiguration_StartAtTimestamp); ok {
			return x.StartAtTimestamp
		}
	}
	return nil
}

func (x *StreamConfiguration) GetStartAtOldestPossible() *emptypb.Empty {
	if x != nil {
		if x, ok := x.StartPosition.(*StreamConfiguration_StartAtOldestPossible); ok {
			return x.StartAtOldestPossible
		}
	}
	return nil
}

type isStreamConfiguration_StreamType interface {
	isStreamConfiguration_StreamType()
}

type StreamConfiguration_Regular struct {
	// Receives messages only while connected; misses messages published when disconnected.
	Regular *RegularStream `protobuf:"bytes,1,opt,name=regular,proto3,oneof"`
}

type StreamConfiguration_DurableQueue struct {
	// Remembers message position, resumes receiving messages after disconnection within a permissible time frame.
	DurableQueue *DurableQueue `protobuf:"bytes,2,opt,name=durable_queue,json=durableQueue,proto3,oneof"`
}

func (*StreamConfiguration_Regular) isStreamConfiguration_StreamType() {}

func (*StreamConfiguration_DurableQueue) isStreamConfiguration_StreamType() {}

type isStreamConfiguration_AcknowledgeOption interface {
	isStreamConfiguration_AcknowledgeOption()
}

type StreamConfiguration_DisableExplicitAck struct {
	// Disable ack
	DisableExplicitAck *emptypb.Empty `protobuf:"bytes,3,opt,name=disable_explicit_ack,json=disableExplicitAck,proto3,oneof"`
}

type StreamConfiguration_CustomAckTimeout struct {
	// Must be between 10 seconds and 10 minutes
	CustomAckTimeout *durationpb.Duration `protobuf:"bytes,4,opt,name=custom_ack_timeout,json=customAckTimeout,proto3,oneof"`
}

func (*StreamConfiguration_DisableExplicitAck) isStreamConfiguration_AcknowledgeOption() {}

func (*StreamConfiguration_CustomAckTimeout) isStreamConfiguration_AcknowledgeOption() {}

type isStreamConfiguration_StartPosition interface {
	isStreamConfiguration_StartPosition()
}

type StreamConfiguration_StartAtNew struct {
	// Will only deliver events generated after this subscription was started
	StartAtNew *emptypb.Empty `protobuf:"bytes,6,opt,name=start_at_new,json=startAtNew,proto3,oneof"`
}

type StreamConfiguration_StartAtId struct {
	// Will deliver events from the given ID
	StartAtId uint64 `protobuf:"varint,7,opt,name=start_at_id,json=startAtId,proto3,oneof"`
}

type StreamConfiguration_StartAtTimestamp struct {
	// Will deliver events from the given timestamp
	StartAtTimestamp *timestamppb.Timestamp `protobuf:"bytes,8,opt,name=start_at_timestamp,json=startAtTimestamp,proto3,oneof"`
}

type StreamConfiguration_StartAtOldestPossible struct {
	// Will deliver all available events
	StartAtOldestPossible *emptypb.Empty `protobuf:"bytes,9,opt,name=start_at_oldest_possible,json=startAtOldestPossible,proto3,oneof"`
}

func (*StreamConfiguration_StartAtNew) isStreamConfiguration_StartPosition() {}

func (*StreamConfiguration_StartAtId) isStreamConfiguration_StartPosition() {}

func (*StreamConfiguration_StartAtTimestamp) isStreamConfiguration_StartPosition() {}

func (*StreamConfiguration_StartAtOldestPossible) isStreamConfiguration_StartPosition() {}

// All connected clients will see all events in the stream.
// Reading position is not stored at the server, so disconnecting will make it start fresh.
type RegularStream struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *RegularStream) Reset() {
	*x = RegularStream{}
	mi := &file_wgtwo_events_v1_events_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *RegularStream) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RegularStream) ProtoMessage() {}

func (x *RegularStream) ProtoReflect() protoreflect.Message {
	mi := &file_wgtwo_events_v1_events_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RegularStream.ProtoReflect.Descriptor instead.
func (*RegularStream) Descriptor() ([]byte, []int) {
	return file_wgtwo_events_v1_events_proto_rawDescGZIP(), []int{1}
}

// All connected clients with the same name will share the stream, so that an event will only be seen be a single
// client.
//
// The server will store the clients reading position for 1 hour after the client has disconnected.
// That would make it possible for a client to resume reading after it has been disconnected.
//
// If e.g. five group of clients should see all events in the stream, each group must be given a unique name.
type DurableQueue struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Optional: Messages will by default be shared between all connections using the same OAuth 2.0 client
	CustomName    string `protobuf:"bytes,1,opt,name=custom_name,json=customName,proto3" json:"custom_name,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *DurableQueue) Reset() {
	*x = DurableQueue{}
	mi := &file_wgtwo_events_v1_events_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DurableQueue) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DurableQueue) ProtoMessage() {}

func (x *DurableQueue) ProtoReflect() protoreflect.Message {
	mi := &file_wgtwo_events_v1_events_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DurableQueue.ProtoReflect.Descriptor instead.
func (*DurableQueue) Descriptor() ([]byte, []int) {
	return file_wgtwo_events_v1_events_proto_rawDescGZIP(), []int{2}
}

func (x *DurableQueue) GetCustomName() string {
	if x != nil {
		return x.CustomName
	}
	return ""
}

// This contains a opaque string which must be included in the ack request to identify the event
type AckInfo struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Opaque string that must be included in the ack request to identify the event
	Value         string `protobuf:"bytes,1,opt,name=value,proto3" json:"value,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *AckInfo) Reset() {
	*x = AckInfo{}
	mi := &file_wgtwo_events_v1_events_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *AckInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AckInfo) ProtoMessage() {}

func (x *AckInfo) ProtoReflect() protoreflect.Message {
	mi := &file_wgtwo_events_v1_events_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AckInfo.ProtoReflect.Descriptor instead.
func (*AckInfo) Descriptor() ([]byte, []int) {
	return file_wgtwo_events_v1_events_proto_rawDescGZIP(), []int{3}
}

func (x *AckInfo) GetValue() string {
	if x != nil {
		return x.Value
	}
	return ""
}

// Status of the ack request
//
// If status is not successful, the ack request may be retried.
// Everything except AckStatusCodeACK_STATUS_SUCCESS should be treated as a failure
type AckStatus struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Status of the ack request
	StatusCode    AckStatus_StatusCode `protobuf:"varint,1,opt,name=status_code,json=statusCode,proto3,enum=wgtwo.events.v1.AckStatus_StatusCode" json:"status_code,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *AckStatus) Reset() {
	*x = AckStatus{}
	mi := &file_wgtwo_events_v1_events_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *AckStatus) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AckStatus) ProtoMessage() {}

func (x *AckStatus) ProtoReflect() protoreflect.Message {
	mi := &file_wgtwo_events_v1_events_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AckStatus.ProtoReflect.Descriptor instead.
func (*AckStatus) Descriptor() ([]byte, []int) {
	return file_wgtwo_events_v1_events_proto_rawDescGZIP(), []int{4}
}

func (x *AckStatus) GetStatusCode() AckStatus_StatusCode {
	if x != nil {
		return x.StatusCode
	}
	return AckStatus_STATUS_CODE_UNSPECIFIED
}

// Ack request, which is required for sending a ack of an event
type AckRequest struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Information that must be included in the ack request to identify the event
	AckInfo       *AckInfo `protobuf:"bytes,1,opt,name=ack_info,json=ackInfo,proto3" json:"ack_info,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *AckRequest) Reset() {
	*x = AckRequest{}
	mi := &file_wgtwo_events_v1_events_proto_msgTypes[5]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *AckRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AckRequest) ProtoMessage() {}

func (x *AckRequest) ProtoReflect() protoreflect.Message {
	mi := &file_wgtwo_events_v1_events_proto_msgTypes[5]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AckRequest.ProtoReflect.Descriptor instead.
func (*AckRequest) Descriptor() ([]byte, []int) {
	return file_wgtwo_events_v1_events_proto_rawDescGZIP(), []int{5}
}

func (x *AckRequest) GetAckInfo() *AckInfo {
	if x != nil {
		return x.AckInfo
	}
	return nil
}

// This response includes the status of the ack request
type AckResponse struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// If the ack request was successful or not
	AckStatus     *AckStatus `protobuf:"bytes,1,opt,name=ack_status,json=ackStatus,proto3" json:"ack_status,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *AckResponse) Reset() {
	*x = AckResponse{}
	mi := &file_wgtwo_events_v1_events_proto_msgTypes[6]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *AckResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AckResponse) ProtoMessage() {}

func (x *AckResponse) ProtoReflect() protoreflect.Message {
	mi := &file_wgtwo_events_v1_events_proto_msgTypes[6]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AckResponse.ProtoReflect.Descriptor instead.
func (*AckResponse) Descriptor() ([]byte, []int) {
	return file_wgtwo_events_v1_events_proto_rawDescGZIP(), []int{6}
}

func (x *AckResponse) GetAckStatus() *AckStatus {
	if x != nil {
		return x.AckStatus
	}
	return nil
}

// Identity of the subscription this event was generated for.
type Identifier struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// The subscription identifier
	SubscriptionIdentifier *v1.SubscriptionIdentifier `protobuf:"bytes,1,opt,name=subscription_identifier,json=subscriptionIdentifier,proto3" json:"subscription_identifier,omitempty"`
	unknownFields          protoimpl.UnknownFields
	sizeCache              protoimpl.SizeCache
}

func (x *Identifier) Reset() {
	*x = Identifier{}
	mi := &file_wgtwo_events_v1_events_proto_msgTypes[7]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Identifier) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Identifier) ProtoMessage() {}

func (x *Identifier) ProtoReflect() protoreflect.Message {
	mi := &file_wgtwo_events_v1_events_proto_msgTypes[7]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Identifier.ProtoReflect.Descriptor instead.
func (*Identifier) Descriptor() ([]byte, []int) {
	return file_wgtwo_events_v1_events_proto_rawDescGZIP(), []int{7}
}

func (x *Identifier) GetSubscriptionIdentifier() *v1.SubscriptionIdentifier {
	if x != nil {
		return x.SubscriptionIdentifier
	}
	return nil
}

// Metadata about the event
type Metadata struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// The timestamp this event was generated
	Timestamp *timestamppb.Timestamp `protobuf:"bytes,1,opt,name=timestamp,proto3" json:"timestamp,omitempty"`
	// Identity of the subscription this event was generated for.
	Identifier *Identifier `protobuf:"bytes,2,opt,name=identifier,proto3" json:"identifier,omitempty"`
	// Information that must be included in the ack request to identify the event
	AckInfo *AckInfo `protobuf:"bytes,3,opt,name=ack_info,json=ackInfo,proto3" json:"ack_info,omitempty"`
	// True when this is not the first time the message has been sent
	IsRedelivered bool `protobuf:"varint,4,opt,name=is_redelivered,json=isRedelivered,proto3" json:"is_redelivered,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Metadata) Reset() {
	*x = Metadata{}
	mi := &file_wgtwo_events_v1_events_proto_msgTypes[8]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Metadata) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Metadata) ProtoMessage() {}

func (x *Metadata) ProtoReflect() protoreflect.Message {
	mi := &file_wgtwo_events_v1_events_proto_msgTypes[8]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Metadata.ProtoReflect.Descriptor instead.
func (*Metadata) Descriptor() ([]byte, []int) {
	return file_wgtwo_events_v1_events_proto_rawDescGZIP(), []int{8}
}

func (x *Metadata) GetTimestamp() *timestamppb.Timestamp {
	if x != nil {
		return x.Timestamp
	}
	return nil
}

func (x *Metadata) GetIdentifier() *Identifier {
	if x != nil {
		return x.Identifier
	}
	return nil
}

func (x *Metadata) GetAckInfo() *AckInfo {
	if x != nil {
		return x.AckInfo
	}
	return nil
}

func (x *Metadata) GetIsRedelivered() bool {
	if x != nil {
		return x.IsRedelivered
	}
	return false
}

var File_wgtwo_events_v1_events_proto protoreflect.FileDescriptor

const file_wgtwo_events_v1_events_proto_rawDesc = "" +
	"\n" +
	"\x1cwgtwo/events/v1/events.proto\x12\x0fwgtwo.events.v1\x1a\x1egoogle/protobuf/duration.proto\x1a\x1bgoogle/protobuf/empty.proto\x1a\x1fgoogle/protobuf/timestamp.proto\x1a\x1bwgtwo/common/v1/types.proto\"\x86\x05\n" +
	"\x13StreamConfiguration\x12:\n" +
	"\aregular\x18\x01 \x01(\v2\x1e.wgtwo.events.v1.RegularStreamH\x00R\aregular\x12D\n" +
	"\rdurable_queue\x18\x02 \x01(\v2\x1d.wgtwo.events.v1.DurableQueueH\x00R\fdurableQueue\x12J\n" +
	"\x14disable_explicit_ack\x18\x03 \x01(\v2\x16.google.protobuf.EmptyH\x01R\x12disableExplicitAck\x12I\n" +
	"\x12custom_ack_timeout\x18\x04 \x01(\v2\x19.google.protobuf.DurationH\x01R\x10customAckTimeout\x12\"\n" +
	"\rmax_in_flight\x18\x05 \x01(\rR\vmaxInFlight\x12:\n" +
	"\fstart_at_new\x18\x06 \x01(\v2\x16.google.protobuf.EmptyH\x02R\n" +
	"startAtNew\x12 \n" +
	"\vstart_at_id\x18\a \x01(\x04H\x02R\tstartAtId\x12J\n" +
	"\x12start_at_timestamp\x18\b \x01(\v2\x1a.google.protobuf.TimestampH\x02R\x10startAtTimestamp\x12Q\n" +
	"\x18start_at_oldest_possible\x18\t \x01(\v2\x16.google.protobuf.EmptyH\x02R\x15startAtOldestPossibleB\r\n" +
	"\vstream_typeB\x14\n" +
	"\x12acknowledge_optionB\x10\n" +
	"\x0estart_position\"\x0f\n" +
	"\rRegularStream\"/\n" +
	"\fDurableQueue\x12\x1f\n" +
	"\vcustom_name\x18\x01 \x01(\tR\n" +
	"customName\"\x1f\n" +
	"\aAckInfo\x12\x14\n" +
	"\x05value\x18\x01 \x01(\tR\x05value\"\xb0\x01\n" +
	"\tAckStatus\x12F\n" +
	"\vstatus_code\x18\x01 \x01(\x0e2%.wgtwo.events.v1.AckStatus.StatusCodeR\n" +
	"statusCode\"[\n" +
	"\n" +
	"StatusCode\x12\x1b\n" +
	"\x17STATUS_CODE_UNSPECIFIED\x10\x00\x12\x17\n" +
	"\x13STATUS_CODE_FAILURE\x10\x01\x12\x17\n" +
	"\x13STATUS_CODE_SUCCESS\x10\x02\"A\n" +
	"\n" +
	"AckRequest\x123\n" +
	"\back_info\x18\x01 \x01(\v2\x18.wgtwo.events.v1.AckInfoR\aackInfo\"H\n" +
	"\vAckResponse\x129\n" +
	"\n" +
	"ack_status\x18\x01 \x01(\v2\x1a.wgtwo.events.v1.AckStatusR\tackStatus\"n\n" +
	"\n" +
	"Identifier\x12`\n" +
	"\x17subscription_identifier\x18\x01 \x01(\v2'.wgtwo.common.v1.SubscriptionIdentifierR\x16subscriptionIdentifier\"\xdd\x01\n" +
	"\bMetadata\x128\n" +
	"\ttimestamp\x18\x01 \x01(\v2\x1a.google.protobuf.TimestampR\ttimestamp\x12;\n" +
	"\n" +
	"identifier\x18\x02 \x01(\v2\x1b.wgtwo.events.v1.IdentifierR\n" +
	"identifier\x123\n" +
	"\back_info\x18\x03 \x01(\v2\x18.wgtwo.events.v1.AckInfoR\aackInfo\x12%\n" +
	"\x0eis_redelivered\x18\x04 \x01(\bR\risRedeliveredB\xb8\x01\n" +
	"\x13com.wgtwo.events.v1B\vEventsProtoP\x01Z6github.com/working-group-two/wgtwoapis/wgtwo/events/v1\xa2\x02\x03WEX\xaa\x02\x0fWgtwo.Events.V1\xca\x02\x0fWgtwo\\Events\\V1\xe2\x02\x1bWgtwo\\Events\\V1\\GPBMetadata\xea\x02\x11Wgtwo::Events::V1b\x06proto3"

var (
	file_wgtwo_events_v1_events_proto_rawDescOnce sync.Once
	file_wgtwo_events_v1_events_proto_rawDescData []byte
)

func file_wgtwo_events_v1_events_proto_rawDescGZIP() []byte {
	file_wgtwo_events_v1_events_proto_rawDescOnce.Do(func() {
		file_wgtwo_events_v1_events_proto_rawDescData = protoimpl.X.CompressGZIP(unsafe.Slice(unsafe.StringData(file_wgtwo_events_v1_events_proto_rawDesc), len(file_wgtwo_events_v1_events_proto_rawDesc)))
	})
	return file_wgtwo_events_v1_events_proto_rawDescData
}

var file_wgtwo_events_v1_events_proto_enumTypes = make([]protoimpl.EnumInfo, 1)
var file_wgtwo_events_v1_events_proto_msgTypes = make([]protoimpl.MessageInfo, 9)
var file_wgtwo_events_v1_events_proto_goTypes = []any{
	(AckStatus_StatusCode)(0),         // 0: wgtwo.events.v1.AckStatus.StatusCode
	(*StreamConfiguration)(nil),       // 1: wgtwo.events.v1.StreamConfiguration
	(*RegularStream)(nil),             // 2: wgtwo.events.v1.RegularStream
	(*DurableQueue)(nil),              // 3: wgtwo.events.v1.DurableQueue
	(*AckInfo)(nil),                   // 4: wgtwo.events.v1.AckInfo
	(*AckStatus)(nil),                 // 5: wgtwo.events.v1.AckStatus
	(*AckRequest)(nil),                // 6: wgtwo.events.v1.AckRequest
	(*AckResponse)(nil),               // 7: wgtwo.events.v1.AckResponse
	(*Identifier)(nil),                // 8: wgtwo.events.v1.Identifier
	(*Metadata)(nil),                  // 9: wgtwo.events.v1.Metadata
	(*emptypb.Empty)(nil),             // 10: google.protobuf.Empty
	(*durationpb.Duration)(nil),       // 11: google.protobuf.Duration
	(*timestamppb.Timestamp)(nil),     // 12: google.protobuf.Timestamp
	(*v1.SubscriptionIdentifier)(nil), // 13: wgtwo.common.v1.SubscriptionIdentifier
}
var file_wgtwo_events_v1_events_proto_depIdxs = []int32{
	2,  // 0: wgtwo.events.v1.StreamConfiguration.regular:type_name -> wgtwo.events.v1.RegularStream
	3,  // 1: wgtwo.events.v1.StreamConfiguration.durable_queue:type_name -> wgtwo.events.v1.DurableQueue
	10, // 2: wgtwo.events.v1.StreamConfiguration.disable_explicit_ack:type_name -> google.protobuf.Empty
	11, // 3: wgtwo.events.v1.StreamConfiguration.custom_ack_timeout:type_name -> google.protobuf.Duration
	10, // 4: wgtwo.events.v1.StreamConfiguration.start_at_new:type_name -> google.protobuf.Empty
	12, // 5: wgtwo.events.v1.StreamConfiguration.start_at_timestamp:type_name -> google.protobuf.Timestamp
	10, // 6: wgtwo.events.v1.StreamConfiguration.start_at_oldest_possible:type_name -> google.protobuf.Empty
	0,  // 7: wgtwo.events.v1.AckStatus.status_code:type_name -> wgtwo.events.v1.AckStatus.StatusCode
	4,  // 8: wgtwo.events.v1.AckRequest.ack_info:type_name -> wgtwo.events.v1.AckInfo
	5,  // 9: wgtwo.events.v1.AckResponse.ack_status:type_name -> wgtwo.events.v1.AckStatus
	13, // 10: wgtwo.events.v1.Identifier.subscription_identifier:type_name -> wgtwo.common.v1.SubscriptionIdentifier
	12, // 11: wgtwo.events.v1.Metadata.timestamp:type_name -> google.protobuf.Timestamp
	8,  // 12: wgtwo.events.v1.Metadata.identifier:type_name -> wgtwo.events.v1.Identifier
	4,  // 13: wgtwo.events.v1.Metadata.ack_info:type_name -> wgtwo.events.v1.AckInfo
	14, // [14:14] is the sub-list for method output_type
	14, // [14:14] is the sub-list for method input_type
	14, // [14:14] is the sub-list for extension type_name
	14, // [14:14] is the sub-list for extension extendee
	0,  // [0:14] is the sub-list for field type_name
}

func init() { file_wgtwo_events_v1_events_proto_init() }
func file_wgtwo_events_v1_events_proto_init() {
	if File_wgtwo_events_v1_events_proto != nil {
		return
	}
	file_wgtwo_events_v1_events_proto_msgTypes[0].OneofWrappers = []any{
		(*StreamConfiguration_Regular)(nil),
		(*StreamConfiguration_DurableQueue)(nil),
		(*StreamConfiguration_DisableExplicitAck)(nil),
		(*StreamConfiguration_CustomAckTimeout)(nil),
		(*StreamConfiguration_StartAtNew)(nil),
		(*StreamConfiguration_StartAtId)(nil),
		(*StreamConfiguration_StartAtTimestamp)(nil),
		(*StreamConfiguration_StartAtOldestPossible)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_wgtwo_events_v1_events_proto_rawDesc), len(file_wgtwo_events_v1_events_proto_rawDesc)),
			NumEnums:      1,
			NumMessages:   9,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_wgtwo_events_v1_events_proto_goTypes,
		DependencyIndexes: file_wgtwo_events_v1_events_proto_depIdxs,
		EnumInfos:         file_wgtwo_events_v1_events_proto_enumTypes,
		MessageInfos:      file_wgtwo_events_v1_events_proto_msgTypes,
	}.Build()
	File_wgtwo_events_v1_events_proto = out.File
	file_wgtwo_events_v1_events_proto_goTypes = nil
	file_wgtwo_events_v1_events_proto_depIdxs = nil
}
