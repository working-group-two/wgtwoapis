// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package v0

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// UserTokenServiceClient is the client API for UserTokenService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type UserTokenServiceClient interface {
	Create(ctx context.Context, in *CreateUserTokenRequest, opts ...grpc.CallOption) (*CreateUserTokenResponse, error)
	Get(ctx context.Context, in *GetUserTokenRequest, opts ...grpc.CallOption) (*GetUserTokenResponse, error)
	List(ctx context.Context, in *ListUserTokenRequest, opts ...grpc.CallOption) (*ListUserTokenResponse, error)
	Revoke(ctx context.Context, in *RevokeUserTokenRequest, opts ...grpc.CallOption) (*RevokeUserTokenResponse, error)
}

type userTokenServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewUserTokenServiceClient(cc grpc.ClientConnInterface) UserTokenServiceClient {
	return &userTokenServiceClient{cc}
}

func (c *userTokenServiceClient) Create(ctx context.Context, in *CreateUserTokenRequest, opts ...grpc.CallOption) (*CreateUserTokenResponse, error) {
	out := new(CreateUserTokenResponse)
	err := c.cc.Invoke(ctx, "/wgtwo.auth.v0.UserTokenService/Create", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userTokenServiceClient) Get(ctx context.Context, in *GetUserTokenRequest, opts ...grpc.CallOption) (*GetUserTokenResponse, error) {
	out := new(GetUserTokenResponse)
	err := c.cc.Invoke(ctx, "/wgtwo.auth.v0.UserTokenService/Get", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userTokenServiceClient) List(ctx context.Context, in *ListUserTokenRequest, opts ...grpc.CallOption) (*ListUserTokenResponse, error) {
	out := new(ListUserTokenResponse)
	err := c.cc.Invoke(ctx, "/wgtwo.auth.v0.UserTokenService/List", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userTokenServiceClient) Revoke(ctx context.Context, in *RevokeUserTokenRequest, opts ...grpc.CallOption) (*RevokeUserTokenResponse, error) {
	out := new(RevokeUserTokenResponse)
	err := c.cc.Invoke(ctx, "/wgtwo.auth.v0.UserTokenService/Revoke", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// UserTokenServiceServer is the server API for UserTokenService service.
// All implementations should embed UnimplementedUserTokenServiceServer
// for forward compatibility
type UserTokenServiceServer interface {
	Create(context.Context, *CreateUserTokenRequest) (*CreateUserTokenResponse, error)
	Get(context.Context, *GetUserTokenRequest) (*GetUserTokenResponse, error)
	List(context.Context, *ListUserTokenRequest) (*ListUserTokenResponse, error)
	Revoke(context.Context, *RevokeUserTokenRequest) (*RevokeUserTokenResponse, error)
}

// UnimplementedUserTokenServiceServer should be embedded to have forward compatible implementations.
type UnimplementedUserTokenServiceServer struct {
}

func (UnimplementedUserTokenServiceServer) Create(context.Context, *CreateUserTokenRequest) (*CreateUserTokenResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Create not implemented")
}
func (UnimplementedUserTokenServiceServer) Get(context.Context, *GetUserTokenRequest) (*GetUserTokenResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Get not implemented")
}
func (UnimplementedUserTokenServiceServer) List(context.Context, *ListUserTokenRequest) (*ListUserTokenResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method List not implemented")
}
func (UnimplementedUserTokenServiceServer) Revoke(context.Context, *RevokeUserTokenRequest) (*RevokeUserTokenResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Revoke not implemented")
}

// UnsafeUserTokenServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to UserTokenServiceServer will
// result in compilation errors.
type UnsafeUserTokenServiceServer interface {
	mustEmbedUnimplementedUserTokenServiceServer()
}

func RegisterUserTokenServiceServer(s grpc.ServiceRegistrar, srv UserTokenServiceServer) {
	s.RegisterService(&UserTokenService_ServiceDesc, srv)
}

func _UserTokenService_Create_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateUserTokenRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserTokenServiceServer).Create(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/wgtwo.auth.v0.UserTokenService/Create",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserTokenServiceServer).Create(ctx, req.(*CreateUserTokenRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserTokenService_Get_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetUserTokenRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserTokenServiceServer).Get(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/wgtwo.auth.v0.UserTokenService/Get",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserTokenServiceServer).Get(ctx, req.(*GetUserTokenRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserTokenService_List_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListUserTokenRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserTokenServiceServer).List(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/wgtwo.auth.v0.UserTokenService/List",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserTokenServiceServer).List(ctx, req.(*ListUserTokenRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserTokenService_Revoke_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RevokeUserTokenRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserTokenServiceServer).Revoke(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/wgtwo.auth.v0.UserTokenService/Revoke",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserTokenServiceServer).Revoke(ctx, req.(*RevokeUserTokenRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// UserTokenService_ServiceDesc is the grpc.ServiceDesc for UserTokenService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var UserTokenService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "wgtwo.auth.v0.UserTokenService",
	HandlerType: (*UserTokenServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Create",
			Handler:    _UserTokenService_Create_Handler,
		},
		{
			MethodName: "Get",
			Handler:    _UserTokenService_Get_Handler,
		},
		{
			MethodName: "List",
			Handler:    _UserTokenService_List_Handler,
		},
		{
			MethodName: "Revoke",
			Handler:    _UserTokenService_Revoke_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "wgtwo/auth/v0/usertokens.proto",
}
