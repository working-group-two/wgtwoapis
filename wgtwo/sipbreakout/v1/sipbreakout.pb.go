// Copyright 2022 Working Group Two AS
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.28.1
// 	protoc        (unknown)
// source: wgtwo/sipbreakout/v1/sipbreakout.proto

package v1

import (
	_ "github.com/working-group-two/wgtwoapis/wgtwo/annotations"
	v1 "github.com/working-group-two/wgtwoapis/wgtwo/common/v1"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	durationpb "google.golang.org/protobuf/types/known/durationpb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type StatusCode int32

const (
	StatusCode_STATUS_CODE_UNSPECIFIED    StatusCode = 0
	StatusCode_STATUS_CODE_OK             StatusCode = 1
	StatusCode_STATUS_CODE_NOT_ACCEPTABLE StatusCode = 2
)

// Enum value maps for StatusCode.
var (
	StatusCode_name = map[int32]string{
		0: "STATUS_CODE_UNSPECIFIED",
		1: "STATUS_CODE_OK",
		2: "STATUS_CODE_NOT_ACCEPTABLE",
	}
	StatusCode_value = map[string]int32{
		"STATUS_CODE_UNSPECIFIED":    0,
		"STATUS_CODE_OK":             1,
		"STATUS_CODE_NOT_ACCEPTABLE": 2,
	}
)

func (x StatusCode) Enum() *StatusCode {
	p := new(StatusCode)
	*p = x
	return p
}

func (x StatusCode) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (StatusCode) Descriptor() protoreflect.EnumDescriptor {
	return file_wgtwo_sipbreakout_v1_sipbreakout_proto_enumTypes[0].Descriptor()
}

func (StatusCode) Type() protoreflect.EnumType {
	return &file_wgtwo_sipbreakout_v1_sipbreakout_proto_enumTypes[0]
}

func (x StatusCode) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use StatusCode.Descriptor instead.
func (StatusCode) EnumDescriptor() ([]byte, []int) {
	return file_wgtwo_sipbreakout_v1_sipbreakout_proto_rawDescGZIP(), []int{0}
}

type RouteType int32

const (
	RouteType_ROUTE_TYPE_UNSPECIFIED RouteType = 0
	RouteType_ROUTE_TYPE_LOOP        RouteType = 1
	RouteType_ROUTE_TYPE_FORK        RouteType = 2
	RouteType_ROUTE_TYPE_FALLBACK    RouteType = 3
)

// Enum value maps for RouteType.
var (
	RouteType_name = map[int32]string{
		0: "ROUTE_TYPE_UNSPECIFIED",
		1: "ROUTE_TYPE_LOOP",
		2: "ROUTE_TYPE_FORK",
		3: "ROUTE_TYPE_FALLBACK",
	}
	RouteType_value = map[string]int32{
		"ROUTE_TYPE_UNSPECIFIED": 0,
		"ROUTE_TYPE_LOOP":        1,
		"ROUTE_TYPE_FORK":        2,
		"ROUTE_TYPE_FALLBACK":    3,
	}
)

func (x RouteType) Enum() *RouteType {
	p := new(RouteType)
	*p = x
	return p
}

func (x RouteType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (RouteType) Descriptor() protoreflect.EnumDescriptor {
	return file_wgtwo_sipbreakout_v1_sipbreakout_proto_enumTypes[1].Descriptor()
}

func (RouteType) Type() protoreflect.EnumType {
	return &file_wgtwo_sipbreakout_v1_sipbreakout_proto_enumTypes[1]
}

func (x RouteType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use RouteType.Descriptor instead.
func (RouteType) EnumDescriptor() ([]byte, []int) {
	return file_wgtwo_sipbreakout_v1_sipbreakout_proto_rawDescGZIP(), []int{1}
}

type UpsertRegistrationRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Registration *Registration `protobuf:"bytes,1,opt,name=registration,proto3" json:"registration,omitempty"`
}

func (x *UpsertRegistrationRequest) Reset() {
	*x = UpsertRegistrationRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_wgtwo_sipbreakout_v1_sipbreakout_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpsertRegistrationRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpsertRegistrationRequest) ProtoMessage() {}

func (x *UpsertRegistrationRequest) ProtoReflect() protoreflect.Message {
	mi := &file_wgtwo_sipbreakout_v1_sipbreakout_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpsertRegistrationRequest.ProtoReflect.Descriptor instead.
func (*UpsertRegistrationRequest) Descriptor() ([]byte, []int) {
	return file_wgtwo_sipbreakout_v1_sipbreakout_proto_rawDescGZIP(), []int{0}
}

func (x *UpsertRegistrationRequest) GetRegistration() *Registration {
	if x != nil {
		return x.Registration
	}
	return nil
}

type UpsertRegistrationResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The response status for attempting to updating the registration
	StatusCode StatusCode `protobuf:"varint,1,opt,name=status_code,json=statusCode,proto3,enum=wgtwo.sipbreakout.v1.StatusCode" json:"status_code,omitempty"`
	// Human readable description for what failed or rejected the registration.
	ErrorMessage string `protobuf:"bytes,2,opt,name=error_message,json=errorMessage,proto3" json:"error_message,omitempty"`
	// Time to live for the registration
	TimeToLive *durationpb.Duration `protobuf:"bytes,3,opt,name=time_to_live,json=timeToLive,proto3" json:"time_to_live,omitempty"`
}

func (x *UpsertRegistrationResponse) Reset() {
	*x = UpsertRegistrationResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_wgtwo_sipbreakout_v1_sipbreakout_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpsertRegistrationResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpsertRegistrationResponse) ProtoMessage() {}

func (x *UpsertRegistrationResponse) ProtoReflect() protoreflect.Message {
	mi := &file_wgtwo_sipbreakout_v1_sipbreakout_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpsertRegistrationResponse.ProtoReflect.Descriptor instead.
func (*UpsertRegistrationResponse) Descriptor() ([]byte, []int) {
	return file_wgtwo_sipbreakout_v1_sipbreakout_proto_rawDescGZIP(), []int{1}
}

func (x *UpsertRegistrationResponse) GetStatusCode() StatusCode {
	if x != nil {
		return x.StatusCode
	}
	return StatusCode_STATUS_CODE_UNSPECIFIED
}

func (x *UpsertRegistrationResponse) GetErrorMessage() string {
	if x != nil {
		return x.ErrorMessage
	}
	return ""
}

func (x *UpsertRegistrationResponse) GetTimeToLive() *durationpb.Duration {
	if x != nil {
		return x.TimeToLive
	}
	return nil
}

type DeleteRegistrationRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Registration *Registration `protobuf:"bytes,1,opt,name=registration,proto3" json:"registration,omitempty"`
}

func (x *DeleteRegistrationRequest) Reset() {
	*x = DeleteRegistrationRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_wgtwo_sipbreakout_v1_sipbreakout_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteRegistrationRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteRegistrationRequest) ProtoMessage() {}

func (x *DeleteRegistrationRequest) ProtoReflect() protoreflect.Message {
	mi := &file_wgtwo_sipbreakout_v1_sipbreakout_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteRegistrationRequest.ProtoReflect.Descriptor instead.
func (*DeleteRegistrationRequest) Descriptor() ([]byte, []int) {
	return file_wgtwo_sipbreakout_v1_sipbreakout_proto_rawDescGZIP(), []int{2}
}

func (x *DeleteRegistrationRequest) GetRegistration() *Registration {
	if x != nil {
		return x.Registration
	}
	return nil
}

type DeleteRegistrationResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The response status for attempting to updating the registration
	StatusCode StatusCode `protobuf:"varint,1,opt,name=status_code,json=statusCode,proto3,enum=wgtwo.sipbreakout.v1.StatusCode" json:"status_code,omitempty"`
	// Human readable description for what failed or rejected the registration.
	ErrorMessage string `protobuf:"bytes,2,opt,name=error_message,json=errorMessage,proto3" json:"error_message,omitempty"`
}

func (x *DeleteRegistrationResponse) Reset() {
	*x = DeleteRegistrationResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_wgtwo_sipbreakout_v1_sipbreakout_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteRegistrationResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteRegistrationResponse) ProtoMessage() {}

func (x *DeleteRegistrationResponse) ProtoReflect() protoreflect.Message {
	mi := &file_wgtwo_sipbreakout_v1_sipbreakout_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteRegistrationResponse.ProtoReflect.Descriptor instead.
func (*DeleteRegistrationResponse) Descriptor() ([]byte, []int) {
	return file_wgtwo_sipbreakout_v1_sipbreakout_proto_rawDescGZIP(), []int{3}
}

func (x *DeleteRegistrationResponse) GetStatusCode() StatusCode {
	if x != nil {
		return x.StatusCode
	}
	return StatusCode_STATUS_CODE_UNSPECIFIED
}

func (x *DeleteRegistrationResponse) GetErrorMessage() string {
	if x != nil {
		return x.ErrorMessage
	}
	return ""
}

type Registration struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// If set to 00 then INVITE sip:+47112334455... becomes INVITE sip:+0047112334455
	// This field is optional
	MobileOriginatingPrefix string `protobuf:"bytes,1,opt,name=mobile_originating_prefix,json=mobileOriginatingPrefix,proto3" json:"mobile_originating_prefix,omitempty"`
	// If set to 00 then INVITE sip:+47112334455... becomes INVITE sip:+0047112334455
	// This field is optional
	MobileTerminatingPrefix string `protobuf:"bytes,2,opt,name=mobile_terminating_prefix,json=mobileTerminatingPrefix,proto3" json:"mobile_terminating_prefix,omitempty"`
	// sips:example.com or sips:example.com:8888
	SipUri    string    `protobuf:"bytes,3,opt,name=sip_uri,json=sipUri,proto3" json:"sip_uri,omitempty"`
	RouteType RouteType `protobuf:"varint,4,opt,name=route_type,json=routeType,proto3,enum=wgtwo.sipbreakout.v1.RouteType" json:"route_type,omitempty"`
	// Must be provided if using client access token
	PhoneNumber *v1.E164 `protobuf:"bytes,5,opt,name=phone_number,json=phoneNumber,proto3" json:"phone_number,omitempty"`
}

func (x *Registration) Reset() {
	*x = Registration{}
	if protoimpl.UnsafeEnabled {
		mi := &file_wgtwo_sipbreakout_v1_sipbreakout_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Registration) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Registration) ProtoMessage() {}

func (x *Registration) ProtoReflect() protoreflect.Message {
	mi := &file_wgtwo_sipbreakout_v1_sipbreakout_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Registration.ProtoReflect.Descriptor instead.
func (*Registration) Descriptor() ([]byte, []int) {
	return file_wgtwo_sipbreakout_v1_sipbreakout_proto_rawDescGZIP(), []int{4}
}

func (x *Registration) GetMobileOriginatingPrefix() string {
	if x != nil {
		return x.MobileOriginatingPrefix
	}
	return ""
}

func (x *Registration) GetMobileTerminatingPrefix() string {
	if x != nil {
		return x.MobileTerminatingPrefix
	}
	return ""
}

func (x *Registration) GetSipUri() string {
	if x != nil {
		return x.SipUri
	}
	return ""
}

func (x *Registration) GetRouteType() RouteType {
	if x != nil {
		return x.RouteType
	}
	return RouteType_ROUTE_TYPE_UNSPECIFIED
}

func (x *Registration) GetPhoneNumber() *v1.E164 {
	if x != nil {
		return x.PhoneNumber
	}
	return nil
}

var File_wgtwo_sipbreakout_v1_sipbreakout_proto protoreflect.FileDescriptor

var file_wgtwo_sipbreakout_v1_sipbreakout_proto_rawDesc = []byte{
	0x0a, 0x26, 0x77, 0x67, 0x74, 0x77, 0x6f, 0x2f, 0x73, 0x69, 0x70, 0x62, 0x72, 0x65, 0x61, 0x6b,
	0x6f, 0x75, 0x74, 0x2f, 0x76, 0x31, 0x2f, 0x73, 0x69, 0x70, 0x62, 0x72, 0x65, 0x61, 0x6b, 0x6f,
	0x75, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x14, 0x77, 0x67, 0x74, 0x77, 0x6f, 0x2e,
	0x73, 0x69, 0x70, 0x62, 0x72, 0x65, 0x61, 0x6b, 0x6f, 0x75, 0x74, 0x2e, 0x76, 0x31, 0x1a, 0x1e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f,
	0x64, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x23,
	0x77, 0x67, 0x74, 0x77, 0x6f, 0x2f, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x73, 0x2f, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x1a, 0x21, 0x77, 0x67, 0x74, 0x77, 0x6f, 0x2f, 0x63, 0x6f, 0x6d, 0x6d, 0x6f,
	0x6e, 0x2f, 0x76, 0x31, 0x2f, 0x70, 0x68, 0x6f, 0x6e, 0x65, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x63, 0x0a, 0x19, 0x55, 0x70, 0x73, 0x65, 0x72, 0x74,
	0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x46, 0x0a, 0x0c, 0x72, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x77, 0x67, 0x74, 0x77,
	0x6f, 0x2e, 0x73, 0x69, 0x70, 0x62, 0x72, 0x65, 0x61, 0x6b, 0x6f, 0x75, 0x74, 0x2e, 0x76, 0x31,
	0x2e, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0c, 0x72,
	0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0xc1, 0x01, 0x0a, 0x1a,
	0x55, 0x70, 0x73, 0x65, 0x72, 0x74, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x41, 0x0a, 0x0b, 0x73, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x20, 0x2e, 0x77, 0x67, 0x74, 0x77, 0x6f, 0x2e, 0x73, 0x69, 0x70, 0x62, 0x72, 0x65, 0x61, 0x6b,
	0x6f, 0x75, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x43, 0x6f, 0x64,
	0x65, 0x52, 0x0a, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x23, 0x0a,
	0x0d, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x4d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x12, 0x3b, 0x0a, 0x0c, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x74, 0x6f, 0x5f, 0x6c, 0x69,
	0x76, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x44, 0x75, 0x72, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x52, 0x0a, 0x74, 0x69, 0x6d, 0x65, 0x54, 0x6f, 0x4c, 0x69, 0x76, 0x65, 0x22,
	0x63, 0x0a, 0x19, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x46, 0x0a, 0x0c,
	0x72, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x22, 0x2e, 0x77, 0x67, 0x74, 0x77, 0x6f, 0x2e, 0x73, 0x69, 0x70, 0x62, 0x72,
	0x65, 0x61, 0x6b, 0x6f, 0x75, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74,
	0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0c, 0x72, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x22, 0x84, 0x01, 0x0a, 0x1a, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x52,
	0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x41, 0x0a, 0x0b, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x5f, 0x63, 0x6f,
	0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x20, 0x2e, 0x77, 0x67, 0x74, 0x77, 0x6f,
	0x2e, 0x73, 0x69, 0x70, 0x62, 0x72, 0x65, 0x61, 0x6b, 0x6f, 0x75, 0x74, 0x2e, 0x76, 0x31, 0x2e,
	0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x43, 0x6f, 0x64, 0x65, 0x52, 0x0a, 0x73, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x23, 0x0a, 0x0d, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x5f,
	0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x65,
	0x72, 0x72, 0x6f, 0x72, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x22, 0x99, 0x02, 0x0a, 0x0c,
	0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x3a, 0x0a, 0x19,
	0x6d, 0x6f, 0x62, 0x69, 0x6c, 0x65, 0x5f, 0x6f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x69,
	0x6e, 0x67, 0x5f, 0x70, 0x72, 0x65, 0x66, 0x69, 0x78, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x17, 0x6d, 0x6f, 0x62, 0x69, 0x6c, 0x65, 0x4f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x69,
	0x6e, 0x67, 0x50, 0x72, 0x65, 0x66, 0x69, 0x78, 0x12, 0x3a, 0x0a, 0x19, 0x6d, 0x6f, 0x62, 0x69,
	0x6c, 0x65, 0x5f, 0x74, 0x65, 0x72, 0x6d, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6e, 0x67, 0x5f, 0x70,
	0x72, 0x65, 0x66, 0x69, 0x78, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x17, 0x6d, 0x6f, 0x62,
	0x69, 0x6c, 0x65, 0x54, 0x65, 0x72, 0x6d, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6e, 0x67, 0x50, 0x72,
	0x65, 0x66, 0x69, 0x78, 0x12, 0x17, 0x0a, 0x07, 0x73, 0x69, 0x70, 0x5f, 0x75, 0x72, 0x69, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x73, 0x69, 0x70, 0x55, 0x72, 0x69, 0x12, 0x3e, 0x0a,
	0x0a, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x1f, 0x2e, 0x77, 0x67, 0x74, 0x77, 0x6f, 0x2e, 0x73, 0x69, 0x70, 0x62, 0x72, 0x65,
	0x61, 0x6b, 0x6f, 0x75, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x54, 0x79,
	0x70, 0x65, 0x52, 0x09, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x38, 0x0a,
	0x0c, 0x70, 0x68, 0x6f, 0x6e, 0x65, 0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x77, 0x67, 0x74, 0x77, 0x6f, 0x2e, 0x63, 0x6f, 0x6d, 0x6d,
	0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x45, 0x31, 0x36, 0x34, 0x52, 0x0b, 0x70, 0x68, 0x6f, 0x6e,
	0x65, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x2a, 0x5d, 0x0a, 0x0a, 0x53, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x1b, 0x0a, 0x17, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f,
	0x43, 0x4f, 0x44, 0x45, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44,
	0x10, 0x00, 0x12, 0x12, 0x0a, 0x0e, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x43, 0x4f, 0x44,
	0x45, 0x5f, 0x4f, 0x4b, 0x10, 0x01, 0x12, 0x1e, 0x0a, 0x1a, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53,
	0x5f, 0x43, 0x4f, 0x44, 0x45, 0x5f, 0x4e, 0x4f, 0x54, 0x5f, 0x41, 0x43, 0x43, 0x45, 0x50, 0x54,
	0x41, 0x42, 0x4c, 0x45, 0x10, 0x02, 0x2a, 0x6a, 0x0a, 0x09, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x54,
	0x79, 0x70, 0x65, 0x12, 0x1a, 0x0a, 0x16, 0x52, 0x4f, 0x55, 0x54, 0x45, 0x5f, 0x54, 0x59, 0x50,
	0x45, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12,
	0x13, 0x0a, 0x0f, 0x52, 0x4f, 0x55, 0x54, 0x45, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x4c, 0x4f,
	0x4f, 0x50, 0x10, 0x01, 0x12, 0x13, 0x0a, 0x0f, 0x52, 0x4f, 0x55, 0x54, 0x45, 0x5f, 0x54, 0x59,
	0x50, 0x45, 0x5f, 0x46, 0x4f, 0x52, 0x4b, 0x10, 0x02, 0x12, 0x17, 0x0a, 0x13, 0x52, 0x4f, 0x55,
	0x54, 0x45, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x46, 0x41, 0x4c, 0x4c, 0x42, 0x41, 0x43, 0x4b,
	0x10, 0x03, 0x32, 0xb8, 0x02, 0x0a, 0x12, 0x53, 0x69, 0x70, 0x42, 0x72, 0x65, 0x61, 0x6b, 0x6f,
	0x75, 0x74, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x8f, 0x01, 0x0a, 0x12, 0x55, 0x70,
	0x73, 0x65, 0x72, 0x74, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x12, 0x2f, 0x2e, 0x77, 0x67, 0x74, 0x77, 0x6f, 0x2e, 0x73, 0x69, 0x70, 0x62, 0x72, 0x65, 0x61,
	0x6b, 0x6f, 0x75, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x55, 0x70, 0x73, 0x65, 0x72, 0x74, 0x52, 0x65,
	0x67, 0x69, 0x73, 0x74, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x30, 0x2e, 0x77, 0x67, 0x74, 0x77, 0x6f, 0x2e, 0x73, 0x69, 0x70, 0x62, 0x72, 0x65,
	0x61, 0x6b, 0x6f, 0x75, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x55, 0x70, 0x73, 0x65, 0x72, 0x74, 0x52,
	0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x22, 0x16, 0xea, 0xb5, 0x18, 0x12, 0x63, 0x61, 0x6c, 0x6c, 0x2e, 0x72, 0x6f,
	0x75, 0x74, 0x69, 0x6e, 0x67, 0x3a, 0x77, 0x72, 0x69, 0x74, 0x65, 0x12, 0x8f, 0x01, 0x0a, 0x12,
	0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x12, 0x2f, 0x2e, 0x77, 0x67, 0x74, 0x77, 0x6f, 0x2e, 0x73, 0x69, 0x70, 0x62, 0x72,
	0x65, 0x61, 0x6b, 0x6f, 0x75, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65,
	0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x30, 0x2e, 0x77, 0x67, 0x74, 0x77, 0x6f, 0x2e, 0x73, 0x69, 0x70, 0x62,
	0x72, 0x65, 0x61, 0x6b, 0x6f, 0x75, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74,
	0x65, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x16, 0xea, 0xb5, 0x18, 0x12, 0x63, 0x61, 0x6c, 0x6c, 0x2e,
	0x72, 0x6f, 0x75, 0x74, 0x69, 0x6e, 0x67, 0x3a, 0x77, 0x72, 0x69, 0x74, 0x65, 0x42, 0x6f, 0x0a,
	0x1c, 0x63, 0x6f, 0x6d, 0x2e, 0x77, 0x67, 0x74, 0x77, 0x6f, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76,
	0x31, 0x2e, 0x73, 0x69, 0x70, 0x62, 0x72, 0x65, 0x61, 0x6b, 0x6f, 0x75, 0x74, 0x42, 0x10, 0x53,
	0x69, 0x70, 0x42, 0x72, 0x65, 0x61, 0x6b, 0x6f, 0x75, 0x74, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x50,
	0x01, 0x5a, 0x3b, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x77, 0x6f,
	0x72, 0x6b, 0x69, 0x6e, 0x67, 0x2d, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x2d, 0x74, 0x77, 0x6f, 0x2f,
	0x77, 0x67, 0x74, 0x77, 0x6f, 0x61, 0x70, 0x69, 0x73, 0x2f, 0x77, 0x67, 0x74, 0x77, 0x6f, 0x2f,
	0x73, 0x69, 0x70, 0x62, 0x72, 0x65, 0x61, 0x6b, 0x6f, 0x75, 0x74, 0x2f, 0x76, 0x31, 0x62, 0x06,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_wgtwo_sipbreakout_v1_sipbreakout_proto_rawDescOnce sync.Once
	file_wgtwo_sipbreakout_v1_sipbreakout_proto_rawDescData = file_wgtwo_sipbreakout_v1_sipbreakout_proto_rawDesc
)

func file_wgtwo_sipbreakout_v1_sipbreakout_proto_rawDescGZIP() []byte {
	file_wgtwo_sipbreakout_v1_sipbreakout_proto_rawDescOnce.Do(func() {
		file_wgtwo_sipbreakout_v1_sipbreakout_proto_rawDescData = protoimpl.X.CompressGZIP(file_wgtwo_sipbreakout_v1_sipbreakout_proto_rawDescData)
	})
	return file_wgtwo_sipbreakout_v1_sipbreakout_proto_rawDescData
}

var file_wgtwo_sipbreakout_v1_sipbreakout_proto_enumTypes = make([]protoimpl.EnumInfo, 2)
var file_wgtwo_sipbreakout_v1_sipbreakout_proto_msgTypes = make([]protoimpl.MessageInfo, 5)
var file_wgtwo_sipbreakout_v1_sipbreakout_proto_goTypes = []interface{}{
	(StatusCode)(0),                    // 0: wgtwo.sipbreakout.v1.StatusCode
	(RouteType)(0),                     // 1: wgtwo.sipbreakout.v1.RouteType
	(*UpsertRegistrationRequest)(nil),  // 2: wgtwo.sipbreakout.v1.UpsertRegistrationRequest
	(*UpsertRegistrationResponse)(nil), // 3: wgtwo.sipbreakout.v1.UpsertRegistrationResponse
	(*DeleteRegistrationRequest)(nil),  // 4: wgtwo.sipbreakout.v1.DeleteRegistrationRequest
	(*DeleteRegistrationResponse)(nil), // 5: wgtwo.sipbreakout.v1.DeleteRegistrationResponse
	(*Registration)(nil),               // 6: wgtwo.sipbreakout.v1.Registration
	(*durationpb.Duration)(nil),        // 7: google.protobuf.Duration
	(*v1.E164)(nil),                    // 8: wgtwo.common.v1.E164
}
var file_wgtwo_sipbreakout_v1_sipbreakout_proto_depIdxs = []int32{
	6, // 0: wgtwo.sipbreakout.v1.UpsertRegistrationRequest.registration:type_name -> wgtwo.sipbreakout.v1.Registration
	0, // 1: wgtwo.sipbreakout.v1.UpsertRegistrationResponse.status_code:type_name -> wgtwo.sipbreakout.v1.StatusCode
	7, // 2: wgtwo.sipbreakout.v1.UpsertRegistrationResponse.time_to_live:type_name -> google.protobuf.Duration
	6, // 3: wgtwo.sipbreakout.v1.DeleteRegistrationRequest.registration:type_name -> wgtwo.sipbreakout.v1.Registration
	0, // 4: wgtwo.sipbreakout.v1.DeleteRegistrationResponse.status_code:type_name -> wgtwo.sipbreakout.v1.StatusCode
	1, // 5: wgtwo.sipbreakout.v1.Registration.route_type:type_name -> wgtwo.sipbreakout.v1.RouteType
	8, // 6: wgtwo.sipbreakout.v1.Registration.phone_number:type_name -> wgtwo.common.v1.E164
	2, // 7: wgtwo.sipbreakout.v1.SipBreakoutService.UpsertRegistration:input_type -> wgtwo.sipbreakout.v1.UpsertRegistrationRequest
	4, // 8: wgtwo.sipbreakout.v1.SipBreakoutService.DeleteRegistration:input_type -> wgtwo.sipbreakout.v1.DeleteRegistrationRequest
	3, // 9: wgtwo.sipbreakout.v1.SipBreakoutService.UpsertRegistration:output_type -> wgtwo.sipbreakout.v1.UpsertRegistrationResponse
	5, // 10: wgtwo.sipbreakout.v1.SipBreakoutService.DeleteRegistration:output_type -> wgtwo.sipbreakout.v1.DeleteRegistrationResponse
	9, // [9:11] is the sub-list for method output_type
	7, // [7:9] is the sub-list for method input_type
	7, // [7:7] is the sub-list for extension type_name
	7, // [7:7] is the sub-list for extension extendee
	0, // [0:7] is the sub-list for field type_name
}

func init() { file_wgtwo_sipbreakout_v1_sipbreakout_proto_init() }
func file_wgtwo_sipbreakout_v1_sipbreakout_proto_init() {
	if File_wgtwo_sipbreakout_v1_sipbreakout_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_wgtwo_sipbreakout_v1_sipbreakout_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpsertRegistrationRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_wgtwo_sipbreakout_v1_sipbreakout_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpsertRegistrationResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_wgtwo_sipbreakout_v1_sipbreakout_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteRegistrationRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_wgtwo_sipbreakout_v1_sipbreakout_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteRegistrationResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_wgtwo_sipbreakout_v1_sipbreakout_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Registration); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_wgtwo_sipbreakout_v1_sipbreakout_proto_rawDesc,
			NumEnums:      2,
			NumMessages:   5,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_wgtwo_sipbreakout_v1_sipbreakout_proto_goTypes,
		DependencyIndexes: file_wgtwo_sipbreakout_v1_sipbreakout_proto_depIdxs,
		EnumInfos:         file_wgtwo_sipbreakout_v1_sipbreakout_proto_enumTypes,
		MessageInfos:      file_wgtwo_sipbreakout_v1_sipbreakout_proto_msgTypes,
	}.Build()
	File_wgtwo_sipbreakout_v1_sipbreakout_proto = out.File
	file_wgtwo_sipbreakout_v1_sipbreakout_proto_rawDesc = nil
	file_wgtwo_sipbreakout_v1_sipbreakout_proto_goTypes = nil
	file_wgtwo_sipbreakout_v1_sipbreakout_proto_depIdxs = nil
}
