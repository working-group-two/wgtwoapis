// Copyright 2022 [Working Group Two]/[Cisco Systems]
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//

// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             (unknown)
// source: wgtwo/sipbreakout/v1/sipbreakout.proto

package v1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	SipBreakoutService_UpsertRegistration_FullMethodName = "/wgtwo.sipbreakout.v1.SipBreakoutService/UpsertRegistration"
	SipBreakoutService_DeleteRegistration_FullMethodName = "/wgtwo.sipbreakout.v1.SipBreakoutService/DeleteRegistration"
)

// SipBreakoutServiceClient is the client API for SipBreakoutService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// Virtual SIP Registration makes Mobility Services' core involve a third party Telephony Application Server (TAS)
// in to the call processing. The Mobility Services' core Session Boarder Controller (SBC) will forward SIP signalling
// to the TAS based on presence of the SIP Registration and its type. The type can be one of "loop", "fork", or
// "fallback".
//
//	┌───────┐                   |    ┌───────┐
//	│ Alice ├───1───────┐       |    │ Alice ├───1───────┐
//	└───────┘           │       |    └───────┘           │
//	                    │       |                        │
//	┌──────┐         ┌──▼───┐   |    ┌───────┐        ┌──▼───┐
//	│ Bob  ◄────4────┤ Core │   |    │ Bob   ◄───2────┤ Core │
//	└──────┘         └─▲───┬┘   |    └───────┘        └──┬───┘
//	                   3   2    |                        3
//	                   │   │    |                        │
//	                  ┌┴───▼┐   |                     ┌──▼──┐
//	                  │ TAS │   |                     │ TAS │
//	                  └─────┘   |                     └─────┘
//	                            |
//	        Loop                VS       Fork / Fallback
//
// For `ROUTE_TYPE_LOOP` leg 4 is not created until call comes back as leg 3.
// In this case, TAS is not obliged to create leg 3, and can itself answer or reject leg 2.
//
// For `ROUTE_TYPE_FORK` registration makes legs 2 and 3 to happen simultaneously.
//
// For `ROUTE_TYPE_FALLBACK` case leg 3 will only be created if leg 2 is not answered.
//
// For better control of the Loop logic, 2 subtypes of LOOP route type exists:
//
// `ROUTE_TYPE_LOOP_MO`: Will loop a call only if direction of the call is mobile originating (outgoing call). This
// means any MT calls for a registration with this route type would not be looped to the sip uri in the registration.
// The use case for using this type would be for example: Call Center for outgoing calls
//
// `ROUTE_TYPE_LOOP_MT`: Will loop a call only if direction of the call is mobile terminating (incoming call). This
// means any MO calls for a registration with this route type would not be looped to the sip uri in the registration.
// The use case for using this type would be for example: Business Phone Systems with BYOD policy (route incoming
// business calls to personal user devices)
//
// `ROUTE_TYPE_INGRESS` allows PBX/TAS to place calls to MSISDN attached to the registration of that type. Regular
// calls to/from that MSISDN are not affected otherwise.
//
// Creating the registration
//
//	SipBreakOutService.UpsertRegistration(Registration) - registration details select its type, prefixes to use
//	on leg 2 (see above drawing), domain name of the TAS server.
//
// Prefix towards TAS
// Cisco can provide prefix in INVITE's URI to help TAS to figure out if call came because
// of the Caller or the Answerer. The prefix is set as follows
//
//	| Caller has Registration       | Answerer has Registration       | Prefix                    |
//	| ------------------------------|---------------------------------|-------------------------- |
//	|          Yes                  | Yes                             | mobile_originating_prefix |
//	|          Yes                  | No                              | mobile_originating_prefix |
//	|          No                   | Yes                             | mobile_terminating_prefix |
//
// Maintaining the registration
//
//	Each SIP Registration has fixed TTL of 3600 seconds since last call to SipBreakOutService.UpsertRegistration()
//	and has to be refreshed by using again SipBreakOutService.UpsertRegistration(Registration) with same parameters.
//
// Deleting the registration
//
//	To remove registration without waiting for TTL to expire use SipBreakOutService.DeleteRegistration()
//	with the same sip uri used in the original registration.
//
// SIP Transport
//
//	TLS is used as SIP transport and TAS shall present valid certificate for SIP URI stated in
//	Registration.sip_uri
//
// Media
//
//	WebRTC style SDPs are used between the core SBC and TAS to encrypt media sessions.
type SipBreakoutServiceClient interface {
	// Add or replace a registration
	UpsertRegistration(ctx context.Context, in *UpsertRegistrationRequest, opts ...grpc.CallOption) (*UpsertRegistrationResponse, error)
	// Delete an existing registration
	DeleteRegistration(ctx context.Context, in *DeleteRegistrationRequest, opts ...grpc.CallOption) (*DeleteRegistrationResponse, error)
}

type sipBreakoutServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewSipBreakoutServiceClient(cc grpc.ClientConnInterface) SipBreakoutServiceClient {
	return &sipBreakoutServiceClient{cc}
}

func (c *sipBreakoutServiceClient) UpsertRegistration(ctx context.Context, in *UpsertRegistrationRequest, opts ...grpc.CallOption) (*UpsertRegistrationResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UpsertRegistrationResponse)
	err := c.cc.Invoke(ctx, SipBreakoutService_UpsertRegistration_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sipBreakoutServiceClient) DeleteRegistration(ctx context.Context, in *DeleteRegistrationRequest, opts ...grpc.CallOption) (*DeleteRegistrationResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DeleteRegistrationResponse)
	err := c.cc.Invoke(ctx, SipBreakoutService_DeleteRegistration_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// SipBreakoutServiceServer is the server API for SipBreakoutService service.
// All implementations should embed UnimplementedSipBreakoutServiceServer
// for forward compatibility.
//
// Virtual SIP Registration makes Mobility Services' core involve a third party Telephony Application Server (TAS)
// in to the call processing. The Mobility Services' core Session Boarder Controller (SBC) will forward SIP signalling
// to the TAS based on presence of the SIP Registration and its type. The type can be one of "loop", "fork", or
// "fallback".
//
//	┌───────┐                   |    ┌───────┐
//	│ Alice ├───1───────┐       |    │ Alice ├───1───────┐
//	└───────┘           │       |    └───────┘           │
//	                    │       |                        │
//	┌──────┐         ┌──▼───┐   |    ┌───────┐        ┌──▼───┐
//	│ Bob  ◄────4────┤ Core │   |    │ Bob   ◄───2────┤ Core │
//	└──────┘         └─▲───┬┘   |    └───────┘        └──┬───┘
//	                   3   2    |                        3
//	                   │   │    |                        │
//	                  ┌┴───▼┐   |                     ┌──▼──┐
//	                  │ TAS │   |                     │ TAS │
//	                  └─────┘   |                     └─────┘
//	                            |
//	        Loop                VS       Fork / Fallback
//
// For `ROUTE_TYPE_LOOP` leg 4 is not created until call comes back as leg 3.
// In this case, TAS is not obliged to create leg 3, and can itself answer or reject leg 2.
//
// For `ROUTE_TYPE_FORK` registration makes legs 2 and 3 to happen simultaneously.
//
// For `ROUTE_TYPE_FALLBACK` case leg 3 will only be created if leg 2 is not answered.
//
// For better control of the Loop logic, 2 subtypes of LOOP route type exists:
//
// `ROUTE_TYPE_LOOP_MO`: Will loop a call only if direction of the call is mobile originating (outgoing call). This
// means any MT calls for a registration with this route type would not be looped to the sip uri in the registration.
// The use case for using this type would be for example: Call Center for outgoing calls
//
// `ROUTE_TYPE_LOOP_MT`: Will loop a call only if direction of the call is mobile terminating (incoming call). This
// means any MO calls for a registration with this route type would not be looped to the sip uri in the registration.
// The use case for using this type would be for example: Business Phone Systems with BYOD policy (route incoming
// business calls to personal user devices)
//
// `ROUTE_TYPE_INGRESS` allows PBX/TAS to place calls to MSISDN attached to the registration of that type. Regular
// calls to/from that MSISDN are not affected otherwise.
//
// Creating the registration
//
//	SipBreakOutService.UpsertRegistration(Registration) - registration details select its type, prefixes to use
//	on leg 2 (see above drawing), domain name of the TAS server.
//
// Prefix towards TAS
// Cisco can provide prefix in INVITE's URI to help TAS to figure out if call came because
// of the Caller or the Answerer. The prefix is set as follows
//
//	| Caller has Registration       | Answerer has Registration       | Prefix                    |
//	| ------------------------------|---------------------------------|-------------------------- |
//	|          Yes                  | Yes                             | mobile_originating_prefix |
//	|          Yes                  | No                              | mobile_originating_prefix |
//	|          No                   | Yes                             | mobile_terminating_prefix |
//
// Maintaining the registration
//
//	Each SIP Registration has fixed TTL of 3600 seconds since last call to SipBreakOutService.UpsertRegistration()
//	and has to be refreshed by using again SipBreakOutService.UpsertRegistration(Registration) with same parameters.
//
// Deleting the registration
//
//	To remove registration without waiting for TTL to expire use SipBreakOutService.DeleteRegistration()
//	with the same sip uri used in the original registration.
//
// SIP Transport
//
//	TLS is used as SIP transport and TAS shall present valid certificate for SIP URI stated in
//	Registration.sip_uri
//
// Media
//
//	WebRTC style SDPs are used between the core SBC and TAS to encrypt media sessions.
type SipBreakoutServiceServer interface {
	// Add or replace a registration
	UpsertRegistration(context.Context, *UpsertRegistrationRequest) (*UpsertRegistrationResponse, error)
	// Delete an existing registration
	DeleteRegistration(context.Context, *DeleteRegistrationRequest) (*DeleteRegistrationResponse, error)
}

// UnimplementedSipBreakoutServiceServer should be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedSipBreakoutServiceServer struct{}

func (UnimplementedSipBreakoutServiceServer) UpsertRegistration(context.Context, *UpsertRegistrationRequest) (*UpsertRegistrationResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpsertRegistration not implemented")
}
func (UnimplementedSipBreakoutServiceServer) DeleteRegistration(context.Context, *DeleteRegistrationRequest) (*DeleteRegistrationResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteRegistration not implemented")
}
func (UnimplementedSipBreakoutServiceServer) testEmbeddedByValue() {}

// UnsafeSipBreakoutServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to SipBreakoutServiceServer will
// result in compilation errors.
type UnsafeSipBreakoutServiceServer interface {
	mustEmbedUnimplementedSipBreakoutServiceServer()
}

func RegisterSipBreakoutServiceServer(s grpc.ServiceRegistrar, srv SipBreakoutServiceServer) {
	// If the following call pancis, it indicates UnimplementedSipBreakoutServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&SipBreakoutService_ServiceDesc, srv)
}

func _SipBreakoutService_UpsertRegistration_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpsertRegistrationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SipBreakoutServiceServer).UpsertRegistration(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SipBreakoutService_UpsertRegistration_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SipBreakoutServiceServer).UpsertRegistration(ctx, req.(*UpsertRegistrationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SipBreakoutService_DeleteRegistration_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteRegistrationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SipBreakoutServiceServer).DeleteRegistration(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SipBreakoutService_DeleteRegistration_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SipBreakoutServiceServer).DeleteRegistration(ctx, req.(*DeleteRegistrationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// SipBreakoutService_ServiceDesc is the grpc.ServiceDesc for SipBreakoutService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var SipBreakoutService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "wgtwo.sipbreakout.v1.SipBreakoutService",
	HandlerType: (*SipBreakoutServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "UpsertRegistration",
			Handler:    _SipBreakoutService_UpsertRegistration_Handler,
		},
		{
			MethodName: "DeleteRegistration",
			Handler:    _SipBreakoutService_DeleteRegistration_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "wgtwo/sipbreakout/v1/sipbreakout.proto",
}
