// Copyright 2024 [Working Group Two]/[Cisco Systems]
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//

// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             (unknown)
// source: wgtwo/ir21/v1/ir21.proto

package v1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	Ir21Service_CreateOrUpdateOrganisation_FullMethodName        = "/wgtwo.ir21.v1.Ir21Service/CreateOrUpdateOrganisation"
	Ir21Service_CreateOrUpdateOrganisationFromXml_FullMethodName = "/wgtwo.ir21.v1.Ir21Service/CreateOrUpdateOrganisationFromXml"
	Ir21Service_DeleteOrganisation_FullMethodName                = "/wgtwo.ir21.v1.Ir21Service/DeleteOrganisation"
	Ir21Service_ListOrganisations_FullMethodName                 = "/wgtwo.ir21.v1.Ir21Service/ListOrganisations"
	Ir21Service_GetOrganisation_FullMethodName                   = "/wgtwo.ir21.v1.Ir21Service/GetOrganisation"
	Ir21Service_ListDatasets_FullMethodName                      = "/wgtwo.ir21.v1.Ir21Service/ListDatasets"
	Ir21Service_CreateDataset_FullMethodName                     = "/wgtwo.ir21.v1.Ir21Service/CreateDataset"
	Ir21Service_DeleteDataset_FullMethodName                     = "/wgtwo.ir21.v1.Ir21Service/DeleteDataset"
	Ir21Service_CopyDataset_FullMethodName                       = "/wgtwo.ir21.v1.Ir21Service/CopyDataset"
	Ir21Service_SetActiveDataset_FullMethodName                  = "/wgtwo.ir21.v1.Ir21Service/SetActiveDataset"
	Ir21Service_GetActiveDatasets_FullMethodName                 = "/wgtwo.ir21.v1.Ir21Service/GetActiveDatasets"
)

// Ir21ServiceClient is the client API for Ir21Service service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// This service is used to import IR.21 data into an IR21 database.
//
// IR21 data consists of organisation information, such as organisation name, country, TADIGs, MCCMNCs, GT prefixes,
// and realms. The data is used when subscribers are roaming.
type Ir21ServiceClient interface {
	// CreateOrUpdateOrganisation is used to import organisation information into the IR21 database. An organisation
	// consists of a name, country, TADIGs, MCCMNCs, GT prefixes, realms, and notes, and is part of a dataset. <br>
	// <br>
	// NOTE: THIS METHOD IS CURRENTLY IN BETA RELEASE
	// See https://developer.cisco.com/docs/mobility-services/api-lifecycle
	CreateOrUpdateOrganisation(ctx context.Context, in *CreateOrUpdateOrganisationRequest, opts ...grpc.CallOption) (*CreateOrUpdateOrganisationResponse, error)
	// CreateOrUpdateOrganisationFromXml is used to import organisation information from an XML file into the IR21
	// database. The XML file should contain the organisation data. <br>
	// <br>
	// NOTE: THIS METHOD IS CURRENTLY IN BETA RELEASE
	// See https://developer.cisco.com/docs/mobility-services/api-lifecycle
	CreateOrUpdateOrganisationFromXml(ctx context.Context, in *CreateOrUpdateOrganisationFromXmlRequest, opts ...grpc.CallOption) (*CreateOrUpdateOrganisationFromXmlResponse, error)
	// DeleteOrganisation is used to delete an organisation from the IR21 database. The organisation is identified by its
	// UUID and is part of a dataset. <br>
	// <br>
	// NOTE: THIS METHOD IS CURRENTLY IN BETA RELEASE
	// See https://developer.cisco.com/docs/mobility-services/api-lifecycle
	DeleteOrganisation(ctx context.Context, in *DeleteOrganisationRequest, opts ...grpc.CallOption) (*DeleteOrganisationResponse, error)
	// ListOrganisations is used to list organisations from a dataset in the IR21 database. <br>
	// <br>
	// NOTE: THIS METHOD IS CURRENTLY IN BETA RELEASE
	// See https://developer.cisco.com/docs/mobility-services/api-lifecycle
	ListOrganisations(ctx context.Context, in *ListOrganisationsRequest, opts ...grpc.CallOption) (*ListOrganisationsResponse, error)
	// GetOrganisation is used to get an organisation from the IR21 database. The organisation is identified by its UUID. <br>
	// <br>
	// NOTE: THIS METHOD IS CURRENTLY IN BETA RELEASE
	// See https://developer.cisco.com/docs/mobility-services/api-lifecycle
	GetOrganisation(ctx context.Context, in *GetOrganisationRequest, opts ...grpc.CallOption) (*GetOrganisationResponse, error)
	// ListDatasets is used to list datasets from the IR21 database. <br>
	// <br>
	// NOTE: THIS METHOD IS CURRENTLY IN BETA RELEASE
	// See https://developer.cisco.com/docs/mobility-services/api-lifecycle
	ListDatasets(ctx context.Context, in *ListDatasetsRequest, opts ...grpc.CallOption) (*ListDatasetsResponse, error)
	// CreateDataset is used to create a dataset in the IR21 database. A dataset has a name and a UUID. <br>
	// <br>
	// NOTE: THIS METHOD IS CURRENTLY IN BETA RELEASE
	// See https://developer.cisco.com/docs/mobility-services/api-lifecycle
	CreateDataset(ctx context.Context, in *CreateDatasetRequest, opts ...grpc.CallOption) (*CreateDatasetResponse, error)
	// DeleteDataset is used to delete a dataset from the IR21 database. The dataset is identified by its UUID. <br>
	// <br>
	// NOTE: THIS METHOD IS CURRENTLY IN BETA RELEASE
	// See https://developer.cisco.com/docs/mobility-services/api-lifecycle
	DeleteDataset(ctx context.Context, in *DeleteDatasetRequest, opts ...grpc.CallOption) (*DeleteDatasetResponse, error)
	// CopyDataset is used to copy a dataset in the IR21 database. <br>
	// <br>
	// NOTE: THIS METHOD IS CURRENTLY IN BETA RELEASE
	// See https://developer.cisco.com/docs/mobility-services/api-lifecycle
	CopyDataset(ctx context.Context, in *CopyDatasetRequest, opts ...grpc.CallOption) (*CopyDatasetResponse, error)
	// SetCurrentDatasetForTenant is used to set the active dataset for a tenant in the IR21 database. <br>
	// <br>
	// NOTE: THIS METHOD IS CURRENTLY IN BETA RELEASE
	// See https://developer.cisco.com/docs/mobility-services/api-lifecycle
	SetActiveDataset(ctx context.Context, in *SetActiveDatasetRequest, opts ...grpc.CallOption) (*SetActiveDatasetResponse, error)
	// GetActiveDatasets gets a list of pairs where each pair contains a dataset UUID and a tenant UUID. <br>
	// <br>
	// NOTE: THIS METHOD IS CURRENTLY IN BETA RELEASE
	// See https://developer.cisco.com/docs/mobility-services/api-lifecycle
	GetActiveDatasets(ctx context.Context, in *GetActiveDatasetsRequest, opts ...grpc.CallOption) (*GetActiveDatasetsResponse, error)
}

type ir21ServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewIr21ServiceClient(cc grpc.ClientConnInterface) Ir21ServiceClient {
	return &ir21ServiceClient{cc}
}

func (c *ir21ServiceClient) CreateOrUpdateOrganisation(ctx context.Context, in *CreateOrUpdateOrganisationRequest, opts ...grpc.CallOption) (*CreateOrUpdateOrganisationResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CreateOrUpdateOrganisationResponse)
	err := c.cc.Invoke(ctx, Ir21Service_CreateOrUpdateOrganisation_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ir21ServiceClient) CreateOrUpdateOrganisationFromXml(ctx context.Context, in *CreateOrUpdateOrganisationFromXmlRequest, opts ...grpc.CallOption) (*CreateOrUpdateOrganisationFromXmlResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CreateOrUpdateOrganisationFromXmlResponse)
	err := c.cc.Invoke(ctx, Ir21Service_CreateOrUpdateOrganisationFromXml_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ir21ServiceClient) DeleteOrganisation(ctx context.Context, in *DeleteOrganisationRequest, opts ...grpc.CallOption) (*DeleteOrganisationResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DeleteOrganisationResponse)
	err := c.cc.Invoke(ctx, Ir21Service_DeleteOrganisation_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ir21ServiceClient) ListOrganisations(ctx context.Context, in *ListOrganisationsRequest, opts ...grpc.CallOption) (*ListOrganisationsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListOrganisationsResponse)
	err := c.cc.Invoke(ctx, Ir21Service_ListOrganisations_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ir21ServiceClient) GetOrganisation(ctx context.Context, in *GetOrganisationRequest, opts ...grpc.CallOption) (*GetOrganisationResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetOrganisationResponse)
	err := c.cc.Invoke(ctx, Ir21Service_GetOrganisation_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ir21ServiceClient) ListDatasets(ctx context.Context, in *ListDatasetsRequest, opts ...grpc.CallOption) (*ListDatasetsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListDatasetsResponse)
	err := c.cc.Invoke(ctx, Ir21Service_ListDatasets_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ir21ServiceClient) CreateDataset(ctx context.Context, in *CreateDatasetRequest, opts ...grpc.CallOption) (*CreateDatasetResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CreateDatasetResponse)
	err := c.cc.Invoke(ctx, Ir21Service_CreateDataset_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ir21ServiceClient) DeleteDataset(ctx context.Context, in *DeleteDatasetRequest, opts ...grpc.CallOption) (*DeleteDatasetResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DeleteDatasetResponse)
	err := c.cc.Invoke(ctx, Ir21Service_DeleteDataset_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ir21ServiceClient) CopyDataset(ctx context.Context, in *CopyDatasetRequest, opts ...grpc.CallOption) (*CopyDatasetResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CopyDatasetResponse)
	err := c.cc.Invoke(ctx, Ir21Service_CopyDataset_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ir21ServiceClient) SetActiveDataset(ctx context.Context, in *SetActiveDatasetRequest, opts ...grpc.CallOption) (*SetActiveDatasetResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SetActiveDatasetResponse)
	err := c.cc.Invoke(ctx, Ir21Service_SetActiveDataset_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ir21ServiceClient) GetActiveDatasets(ctx context.Context, in *GetActiveDatasetsRequest, opts ...grpc.CallOption) (*GetActiveDatasetsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetActiveDatasetsResponse)
	err := c.cc.Invoke(ctx, Ir21Service_GetActiveDatasets_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Ir21ServiceServer is the server API for Ir21Service service.
// All implementations should embed UnimplementedIr21ServiceServer
// for forward compatibility.
//
// This service is used to import IR.21 data into an IR21 database.
//
// IR21 data consists of organisation information, such as organisation name, country, TADIGs, MCCMNCs, GT prefixes,
// and realms. The data is used when subscribers are roaming.
type Ir21ServiceServer interface {
	// CreateOrUpdateOrganisation is used to import organisation information into the IR21 database. An organisation
	// consists of a name, country, TADIGs, MCCMNCs, GT prefixes, realms, and notes, and is part of a dataset. <br>
	// <br>
	// NOTE: THIS METHOD IS CURRENTLY IN BETA RELEASE
	// See https://developer.cisco.com/docs/mobility-services/api-lifecycle
	CreateOrUpdateOrganisation(context.Context, *CreateOrUpdateOrganisationRequest) (*CreateOrUpdateOrganisationResponse, error)
	// CreateOrUpdateOrganisationFromXml is used to import organisation information from an XML file into the IR21
	// database. The XML file should contain the organisation data. <br>
	// <br>
	// NOTE: THIS METHOD IS CURRENTLY IN BETA RELEASE
	// See https://developer.cisco.com/docs/mobility-services/api-lifecycle
	CreateOrUpdateOrganisationFromXml(context.Context, *CreateOrUpdateOrganisationFromXmlRequest) (*CreateOrUpdateOrganisationFromXmlResponse, error)
	// DeleteOrganisation is used to delete an organisation from the IR21 database. The organisation is identified by its
	// UUID and is part of a dataset. <br>
	// <br>
	// NOTE: THIS METHOD IS CURRENTLY IN BETA RELEASE
	// See https://developer.cisco.com/docs/mobility-services/api-lifecycle
	DeleteOrganisation(context.Context, *DeleteOrganisationRequest) (*DeleteOrganisationResponse, error)
	// ListOrganisations is used to list organisations from a dataset in the IR21 database. <br>
	// <br>
	// NOTE: THIS METHOD IS CURRENTLY IN BETA RELEASE
	// See https://developer.cisco.com/docs/mobility-services/api-lifecycle
	ListOrganisations(context.Context, *ListOrganisationsRequest) (*ListOrganisationsResponse, error)
	// GetOrganisation is used to get an organisation from the IR21 database. The organisation is identified by its UUID. <br>
	// <br>
	// NOTE: THIS METHOD IS CURRENTLY IN BETA RELEASE
	// See https://developer.cisco.com/docs/mobility-services/api-lifecycle
	GetOrganisation(context.Context, *GetOrganisationRequest) (*GetOrganisationResponse, error)
	// ListDatasets is used to list datasets from the IR21 database. <br>
	// <br>
	// NOTE: THIS METHOD IS CURRENTLY IN BETA RELEASE
	// See https://developer.cisco.com/docs/mobility-services/api-lifecycle
	ListDatasets(context.Context, *ListDatasetsRequest) (*ListDatasetsResponse, error)
	// CreateDataset is used to create a dataset in the IR21 database. A dataset has a name and a UUID. <br>
	// <br>
	// NOTE: THIS METHOD IS CURRENTLY IN BETA RELEASE
	// See https://developer.cisco.com/docs/mobility-services/api-lifecycle
	CreateDataset(context.Context, *CreateDatasetRequest) (*CreateDatasetResponse, error)
	// DeleteDataset is used to delete a dataset from the IR21 database. The dataset is identified by its UUID. <br>
	// <br>
	// NOTE: THIS METHOD IS CURRENTLY IN BETA RELEASE
	// See https://developer.cisco.com/docs/mobility-services/api-lifecycle
	DeleteDataset(context.Context, *DeleteDatasetRequest) (*DeleteDatasetResponse, error)
	// CopyDataset is used to copy a dataset in the IR21 database. <br>
	// <br>
	// NOTE: THIS METHOD IS CURRENTLY IN BETA RELEASE
	// See https://developer.cisco.com/docs/mobility-services/api-lifecycle
	CopyDataset(context.Context, *CopyDatasetRequest) (*CopyDatasetResponse, error)
	// SetCurrentDatasetForTenant is used to set the active dataset for a tenant in the IR21 database. <br>
	// <br>
	// NOTE: THIS METHOD IS CURRENTLY IN BETA RELEASE
	// See https://developer.cisco.com/docs/mobility-services/api-lifecycle
	SetActiveDataset(context.Context, *SetActiveDatasetRequest) (*SetActiveDatasetResponse, error)
	// GetActiveDatasets gets a list of pairs where each pair contains a dataset UUID and a tenant UUID. <br>
	// <br>
	// NOTE: THIS METHOD IS CURRENTLY IN BETA RELEASE
	// See https://developer.cisco.com/docs/mobility-services/api-lifecycle
	GetActiveDatasets(context.Context, *GetActiveDatasetsRequest) (*GetActiveDatasetsResponse, error)
}

// UnimplementedIr21ServiceServer should be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedIr21ServiceServer struct{}

func (UnimplementedIr21ServiceServer) CreateOrUpdateOrganisation(context.Context, *CreateOrUpdateOrganisationRequest) (*CreateOrUpdateOrganisationResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateOrUpdateOrganisation not implemented")
}
func (UnimplementedIr21ServiceServer) CreateOrUpdateOrganisationFromXml(context.Context, *CreateOrUpdateOrganisationFromXmlRequest) (*CreateOrUpdateOrganisationFromXmlResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateOrUpdateOrganisationFromXml not implemented")
}
func (UnimplementedIr21ServiceServer) DeleteOrganisation(context.Context, *DeleteOrganisationRequest) (*DeleteOrganisationResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteOrganisation not implemented")
}
func (UnimplementedIr21ServiceServer) ListOrganisations(context.Context, *ListOrganisationsRequest) (*ListOrganisationsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListOrganisations not implemented")
}
func (UnimplementedIr21ServiceServer) GetOrganisation(context.Context, *GetOrganisationRequest) (*GetOrganisationResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetOrganisation not implemented")
}
func (UnimplementedIr21ServiceServer) ListDatasets(context.Context, *ListDatasetsRequest) (*ListDatasetsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListDatasets not implemented")
}
func (UnimplementedIr21ServiceServer) CreateDataset(context.Context, *CreateDatasetRequest) (*CreateDatasetResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateDataset not implemented")
}
func (UnimplementedIr21ServiceServer) DeleteDataset(context.Context, *DeleteDatasetRequest) (*DeleteDatasetResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteDataset not implemented")
}
func (UnimplementedIr21ServiceServer) CopyDataset(context.Context, *CopyDatasetRequest) (*CopyDatasetResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CopyDataset not implemented")
}
func (UnimplementedIr21ServiceServer) SetActiveDataset(context.Context, *SetActiveDatasetRequest) (*SetActiveDatasetResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetActiveDataset not implemented")
}
func (UnimplementedIr21ServiceServer) GetActiveDatasets(context.Context, *GetActiveDatasetsRequest) (*GetActiveDatasetsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetActiveDatasets not implemented")
}
func (UnimplementedIr21ServiceServer) testEmbeddedByValue() {}

// UnsafeIr21ServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to Ir21ServiceServer will
// result in compilation errors.
type UnsafeIr21ServiceServer interface {
	mustEmbedUnimplementedIr21ServiceServer()
}

func RegisterIr21ServiceServer(s grpc.ServiceRegistrar, srv Ir21ServiceServer) {
	// If the following call pancis, it indicates UnimplementedIr21ServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&Ir21Service_ServiceDesc, srv)
}

func _Ir21Service_CreateOrUpdateOrganisation_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateOrUpdateOrganisationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(Ir21ServiceServer).CreateOrUpdateOrganisation(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Ir21Service_CreateOrUpdateOrganisation_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(Ir21ServiceServer).CreateOrUpdateOrganisation(ctx, req.(*CreateOrUpdateOrganisationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Ir21Service_CreateOrUpdateOrganisationFromXml_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateOrUpdateOrganisationFromXmlRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(Ir21ServiceServer).CreateOrUpdateOrganisationFromXml(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Ir21Service_CreateOrUpdateOrganisationFromXml_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(Ir21ServiceServer).CreateOrUpdateOrganisationFromXml(ctx, req.(*CreateOrUpdateOrganisationFromXmlRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Ir21Service_DeleteOrganisation_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteOrganisationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(Ir21ServiceServer).DeleteOrganisation(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Ir21Service_DeleteOrganisation_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(Ir21ServiceServer).DeleteOrganisation(ctx, req.(*DeleteOrganisationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Ir21Service_ListOrganisations_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListOrganisationsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(Ir21ServiceServer).ListOrganisations(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Ir21Service_ListOrganisations_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(Ir21ServiceServer).ListOrganisations(ctx, req.(*ListOrganisationsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Ir21Service_GetOrganisation_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetOrganisationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(Ir21ServiceServer).GetOrganisation(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Ir21Service_GetOrganisation_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(Ir21ServiceServer).GetOrganisation(ctx, req.(*GetOrganisationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Ir21Service_ListDatasets_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListDatasetsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(Ir21ServiceServer).ListDatasets(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Ir21Service_ListDatasets_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(Ir21ServiceServer).ListDatasets(ctx, req.(*ListDatasetsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Ir21Service_CreateDataset_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateDatasetRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(Ir21ServiceServer).CreateDataset(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Ir21Service_CreateDataset_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(Ir21ServiceServer).CreateDataset(ctx, req.(*CreateDatasetRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Ir21Service_DeleteDataset_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteDatasetRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(Ir21ServiceServer).DeleteDataset(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Ir21Service_DeleteDataset_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(Ir21ServiceServer).DeleteDataset(ctx, req.(*DeleteDatasetRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Ir21Service_CopyDataset_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CopyDatasetRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(Ir21ServiceServer).CopyDataset(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Ir21Service_CopyDataset_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(Ir21ServiceServer).CopyDataset(ctx, req.(*CopyDatasetRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Ir21Service_SetActiveDataset_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetActiveDatasetRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(Ir21ServiceServer).SetActiveDataset(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Ir21Service_SetActiveDataset_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(Ir21ServiceServer).SetActiveDataset(ctx, req.(*SetActiveDatasetRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Ir21Service_GetActiveDatasets_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetActiveDatasetsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(Ir21ServiceServer).GetActiveDatasets(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Ir21Service_GetActiveDatasets_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(Ir21ServiceServer).GetActiveDatasets(ctx, req.(*GetActiveDatasetsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Ir21Service_ServiceDesc is the grpc.ServiceDesc for Ir21Service service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Ir21Service_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "wgtwo.ir21.v1.Ir21Service",
	HandlerType: (*Ir21ServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateOrUpdateOrganisation",
			Handler:    _Ir21Service_CreateOrUpdateOrganisation_Handler,
		},
		{
			MethodName: "CreateOrUpdateOrganisationFromXml",
			Handler:    _Ir21Service_CreateOrUpdateOrganisationFromXml_Handler,
		},
		{
			MethodName: "DeleteOrganisation",
			Handler:    _Ir21Service_DeleteOrganisation_Handler,
		},
		{
			MethodName: "ListOrganisations",
			Handler:    _Ir21Service_ListOrganisations_Handler,
		},
		{
			MethodName: "GetOrganisation",
			Handler:    _Ir21Service_GetOrganisation_Handler,
		},
		{
			MethodName: "ListDatasets",
			Handler:    _Ir21Service_ListDatasets_Handler,
		},
		{
			MethodName: "CreateDataset",
			Handler:    _Ir21Service_CreateDataset_Handler,
		},
		{
			MethodName: "DeleteDataset",
			Handler:    _Ir21Service_DeleteDataset_Handler,
		},
		{
			MethodName: "CopyDataset",
			Handler:    _Ir21Service_CopyDataset_Handler,
		},
		{
			MethodName: "SetActiveDataset",
			Handler:    _Ir21Service_SetActiveDataset_Handler,
		},
		{
			MethodName: "GetActiveDatasets",
			Handler:    _Ir21Service_GetActiveDatasets_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "wgtwo/ir21/v1/ir21.proto",
}
