// Copyright 2023 [Working Group Two]/[Cisco Systems]
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//

// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             (unknown)
// source: wgtwo/lookup/v0/number_lookup.proto

package v0

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	NumberLookupService_NumberLookup_FullMethodName = "/wgtwo.lookup.v0.NumberLookupService/NumberLookup"
)

// NumberLookupServiceClient is the client API for NumberLookupService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type NumberLookupServiceClient interface {
	NumberLookup(ctx context.Context, opts ...grpc.CallOption) (grpc.BidiStreamingClient[NumberLookupResponse, NumberLookupRequest], error)
}

type numberLookupServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewNumberLookupServiceClient(cc grpc.ClientConnInterface) NumberLookupServiceClient {
	return &numberLookupServiceClient{cc}
}

func (c *numberLookupServiceClient) NumberLookup(ctx context.Context, opts ...grpc.CallOption) (grpc.BidiStreamingClient[NumberLookupResponse, NumberLookupRequest], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &NumberLookupService_ServiceDesc.Streams[0], NumberLookupService_NumberLookup_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[NumberLookupResponse, NumberLookupRequest]{ClientStream: stream}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type NumberLookupService_NumberLookupClient = grpc.BidiStreamingClient[NumberLookupResponse, NumberLookupRequest]

// NumberLookupServiceServer is the server API for NumberLookupService service.
// All implementations should embed UnimplementedNumberLookupServiceServer
// for forward compatibility.
type NumberLookupServiceServer interface {
	NumberLookup(grpc.BidiStreamingServer[NumberLookupResponse, NumberLookupRequest]) error
}

// UnimplementedNumberLookupServiceServer should be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedNumberLookupServiceServer struct{}

func (UnimplementedNumberLookupServiceServer) NumberLookup(grpc.BidiStreamingServer[NumberLookupResponse, NumberLookupRequest]) error {
	return status.Errorf(codes.Unimplemented, "method NumberLookup not implemented")
}
func (UnimplementedNumberLookupServiceServer) testEmbeddedByValue() {}

// UnsafeNumberLookupServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to NumberLookupServiceServer will
// result in compilation errors.
type UnsafeNumberLookupServiceServer interface {
	mustEmbedUnimplementedNumberLookupServiceServer()
}

func RegisterNumberLookupServiceServer(s grpc.ServiceRegistrar, srv NumberLookupServiceServer) {
	// If the following call pancis, it indicates UnimplementedNumberLookupServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&NumberLookupService_ServiceDesc, srv)
}

func _NumberLookupService_NumberLookup_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(NumberLookupServiceServer).NumberLookup(&grpc.GenericServerStream[NumberLookupResponse, NumberLookupRequest]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type NumberLookupService_NumberLookupServer = grpc.BidiStreamingServer[NumberLookupResponse, NumberLookupRequest]

// NumberLookupService_ServiceDesc is the grpc.ServiceDesc for NumberLookupService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var NumberLookupService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "wgtwo.lookup.v0.NumberLookupService",
	HandlerType: (*NumberLookupServiceServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "NumberLookup",
			Handler:       _NumberLookupService_NumberLookup_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "wgtwo/lookup/v0/number_lookup.proto",
}
