// Copyright 2023 Working Group Two AS
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//

// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             (unknown)
// source: wgtwo/lookup/v0/number_lookup.proto

package v0

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	NumberLookupService_NumberLookup_FullMethodName = "/wgtwo.lookup.v0.NumberLookupService/NumberLookup"
)

// NumberLookupServiceClient is the client API for NumberLookupService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type NumberLookupServiceClient interface {
	NumberLookup(ctx context.Context, opts ...grpc.CallOption) (NumberLookupService_NumberLookupClient, error)
}

type numberLookupServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewNumberLookupServiceClient(cc grpc.ClientConnInterface) NumberLookupServiceClient {
	return &numberLookupServiceClient{cc}
}

func (c *numberLookupServiceClient) NumberLookup(ctx context.Context, opts ...grpc.CallOption) (NumberLookupService_NumberLookupClient, error) {
	stream, err := c.cc.NewStream(ctx, &NumberLookupService_ServiceDesc.Streams[0], NumberLookupService_NumberLookup_FullMethodName, opts...)
	if err != nil {
		return nil, err
	}
	x := &numberLookupServiceNumberLookupClient{stream}
	return x, nil
}

type NumberLookupService_NumberLookupClient interface {
	Send(*NumberLookupResponse) error
	Recv() (*NumberLookupRequest, error)
	grpc.ClientStream
}

type numberLookupServiceNumberLookupClient struct {
	grpc.ClientStream
}

func (x *numberLookupServiceNumberLookupClient) Send(m *NumberLookupResponse) error {
	return x.ClientStream.SendMsg(m)
}

func (x *numberLookupServiceNumberLookupClient) Recv() (*NumberLookupRequest, error) {
	m := new(NumberLookupRequest)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// NumberLookupServiceServer is the server API for NumberLookupService service.
// All implementations should embed UnimplementedNumberLookupServiceServer
// for forward compatibility
type NumberLookupServiceServer interface {
	NumberLookup(NumberLookupService_NumberLookupServer) error
}

// UnimplementedNumberLookupServiceServer should be embedded to have forward compatible implementations.
type UnimplementedNumberLookupServiceServer struct {
}

func (UnimplementedNumberLookupServiceServer) NumberLookup(NumberLookupService_NumberLookupServer) error {
	return status.Errorf(codes.Unimplemented, "method NumberLookup not implemented")
}

// UnsafeNumberLookupServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to NumberLookupServiceServer will
// result in compilation errors.
type UnsafeNumberLookupServiceServer interface {
	mustEmbedUnimplementedNumberLookupServiceServer()
}

func RegisterNumberLookupServiceServer(s grpc.ServiceRegistrar, srv NumberLookupServiceServer) {
	s.RegisterService(&NumberLookupService_ServiceDesc, srv)
}

func _NumberLookupService_NumberLookup_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(NumberLookupServiceServer).NumberLookup(&numberLookupServiceNumberLookupServer{stream})
}

type NumberLookupService_NumberLookupServer interface {
	Send(*NumberLookupRequest) error
	Recv() (*NumberLookupResponse, error)
	grpc.ServerStream
}

type numberLookupServiceNumberLookupServer struct {
	grpc.ServerStream
}

func (x *numberLookupServiceNumberLookupServer) Send(m *NumberLookupRequest) error {
	return x.ServerStream.SendMsg(m)
}

func (x *numberLookupServiceNumberLookupServer) Recv() (*NumberLookupResponse, error) {
	m := new(NumberLookupResponse)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// NumberLookupService_ServiceDesc is the grpc.ServiceDesc for NumberLookupService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var NumberLookupService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "wgtwo.lookup.v0.NumberLookupService",
	HandlerType: (*NumberLookupServiceServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "NumberLookup",
			Handler:       _NumberLookupService_NumberLookup_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "wgtwo/lookup/v0/number_lookup.proto",
}
