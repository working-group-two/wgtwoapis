// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             (unknown)
// source: wgtwo/webterminal/v0/webterminal.proto

package v0

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// WebTerminalServiceClient is the client API for WebTerminalService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type WebTerminalServiceClient interface {
	Pipe(ctx context.Context, opts ...grpc.CallOption) (WebTerminalService_PipeClient, error)
	MultiPipe(ctx context.Context, opts ...grpc.CallOption) (WebTerminalService_MultiPipeClient, error)
}

type webTerminalServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewWebTerminalServiceClient(cc grpc.ClientConnInterface) WebTerminalServiceClient {
	return &webTerminalServiceClient{cc}
}

func (c *webTerminalServiceClient) Pipe(ctx context.Context, opts ...grpc.CallOption) (WebTerminalService_PipeClient, error) {
	stream, err := c.cc.NewStream(ctx, &WebTerminalService_ServiceDesc.Streams[0], "/wgtwo.webterminal.v0.WebTerminalService/Pipe", opts...)
	if err != nil {
		return nil, err
	}
	x := &webTerminalServicePipeClient{stream}
	return x, nil
}

type WebTerminalService_PipeClient interface {
	Send(*WebTerminalMessage) error
	Recv() (*WebTerminalMessage, error)
	grpc.ClientStream
}

type webTerminalServicePipeClient struct {
	grpc.ClientStream
}

func (x *webTerminalServicePipeClient) Send(m *WebTerminalMessage) error {
	return x.ClientStream.SendMsg(m)
}

func (x *webTerminalServicePipeClient) Recv() (*WebTerminalMessage, error) {
	m := new(WebTerminalMessage)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *webTerminalServiceClient) MultiPipe(ctx context.Context, opts ...grpc.CallOption) (WebTerminalService_MultiPipeClient, error) {
	stream, err := c.cc.NewStream(ctx, &WebTerminalService_ServiceDesc.Streams[1], "/wgtwo.webterminal.v0.WebTerminalService/MultiPipe", opts...)
	if err != nil {
		return nil, err
	}
	x := &webTerminalServiceMultiPipeClient{stream}
	return x, nil
}

type WebTerminalService_MultiPipeClient interface {
	Send(*WebTerminalMessage) error
	Recv() (*WebTerminalMessage, error)
	grpc.ClientStream
}

type webTerminalServiceMultiPipeClient struct {
	grpc.ClientStream
}

func (x *webTerminalServiceMultiPipeClient) Send(m *WebTerminalMessage) error {
	return x.ClientStream.SendMsg(m)
}

func (x *webTerminalServiceMultiPipeClient) Recv() (*WebTerminalMessage, error) {
	m := new(WebTerminalMessage)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// WebTerminalServiceServer is the server API for WebTerminalService service.
// All implementations should embed UnimplementedWebTerminalServiceServer
// for forward compatibility
type WebTerminalServiceServer interface {
	Pipe(WebTerminalService_PipeServer) error
	MultiPipe(WebTerminalService_MultiPipeServer) error
}

// UnimplementedWebTerminalServiceServer should be embedded to have forward compatible implementations.
type UnimplementedWebTerminalServiceServer struct {
}

func (UnimplementedWebTerminalServiceServer) Pipe(WebTerminalService_PipeServer) error {
	return status.Errorf(codes.Unimplemented, "method Pipe not implemented")
}
func (UnimplementedWebTerminalServiceServer) MultiPipe(WebTerminalService_MultiPipeServer) error {
	return status.Errorf(codes.Unimplemented, "method MultiPipe not implemented")
}

// UnsafeWebTerminalServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to WebTerminalServiceServer will
// result in compilation errors.
type UnsafeWebTerminalServiceServer interface {
	mustEmbedUnimplementedWebTerminalServiceServer()
}

func RegisterWebTerminalServiceServer(s grpc.ServiceRegistrar, srv WebTerminalServiceServer) {
	s.RegisterService(&WebTerminalService_ServiceDesc, srv)
}

func _WebTerminalService_Pipe_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(WebTerminalServiceServer).Pipe(&webTerminalServicePipeServer{stream})
}

type WebTerminalService_PipeServer interface {
	Send(*WebTerminalMessage) error
	Recv() (*WebTerminalMessage, error)
	grpc.ServerStream
}

type webTerminalServicePipeServer struct {
	grpc.ServerStream
}

func (x *webTerminalServicePipeServer) Send(m *WebTerminalMessage) error {
	return x.ServerStream.SendMsg(m)
}

func (x *webTerminalServicePipeServer) Recv() (*WebTerminalMessage, error) {
	m := new(WebTerminalMessage)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _WebTerminalService_MultiPipe_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(WebTerminalServiceServer).MultiPipe(&webTerminalServiceMultiPipeServer{stream})
}

type WebTerminalService_MultiPipeServer interface {
	Send(*WebTerminalMessage) error
	Recv() (*WebTerminalMessage, error)
	grpc.ServerStream
}

type webTerminalServiceMultiPipeServer struct {
	grpc.ServerStream
}

func (x *webTerminalServiceMultiPipeServer) Send(m *WebTerminalMessage) error {
	return x.ServerStream.SendMsg(m)
}

func (x *webTerminalServiceMultiPipeServer) Recv() (*WebTerminalMessage, error) {
	m := new(WebTerminalMessage)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// WebTerminalService_ServiceDesc is the grpc.ServiceDesc for WebTerminalService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var WebTerminalService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "wgtwo.webterminal.v0.WebTerminalService",
	HandlerType: (*WebTerminalServiceServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Pipe",
			Handler:       _WebTerminalService_Pipe_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
		{
			StreamName:    "MultiPipe",
			Handler:       _WebTerminalService_MultiPipe_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "wgtwo/webterminal/v0/webterminal.proto",
}
