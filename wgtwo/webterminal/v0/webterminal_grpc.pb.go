// Copyright 2020 [Working Group Two]/[Cisco Systems]
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//

// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             (unknown)
// source: wgtwo/webterminal/v0/webterminal.proto

package v0

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	WebTerminalService_Pipe_FullMethodName      = "/wgtwo.webterminal.v0.WebTerminalService/Pipe"
	WebTerminalService_MultiPipe_FullMethodName = "/wgtwo.webterminal.v0.WebTerminalService/MultiPipe"
)

// WebTerminalServiceClient is the client API for WebTerminalService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// Gateway for WebTerminalProtocol. Requires user's consent to answer and initiate calls.
type WebTerminalServiceClient interface {
	Pipe(ctx context.Context, opts ...grpc.CallOption) (grpc.BidiStreamingClient[WebTerminalMessage, WebTerminalMessage], error)
	MultiPipe(ctx context.Context, opts ...grpc.CallOption) (grpc.BidiStreamingClient[WebTerminalMessage, WebTerminalMessage], error)
}

type webTerminalServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewWebTerminalServiceClient(cc grpc.ClientConnInterface) WebTerminalServiceClient {
	return &webTerminalServiceClient{cc}
}

func (c *webTerminalServiceClient) Pipe(ctx context.Context, opts ...grpc.CallOption) (grpc.BidiStreamingClient[WebTerminalMessage, WebTerminalMessage], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &WebTerminalService_ServiceDesc.Streams[0], WebTerminalService_Pipe_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[WebTerminalMessage, WebTerminalMessage]{ClientStream: stream}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type WebTerminalService_PipeClient = grpc.BidiStreamingClient[WebTerminalMessage, WebTerminalMessage]

func (c *webTerminalServiceClient) MultiPipe(ctx context.Context, opts ...grpc.CallOption) (grpc.BidiStreamingClient[WebTerminalMessage, WebTerminalMessage], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &WebTerminalService_ServiceDesc.Streams[1], WebTerminalService_MultiPipe_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[WebTerminalMessage, WebTerminalMessage]{ClientStream: stream}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type WebTerminalService_MultiPipeClient = grpc.BidiStreamingClient[WebTerminalMessage, WebTerminalMessage]

// WebTerminalServiceServer is the server API for WebTerminalService service.
// All implementations should embed UnimplementedWebTerminalServiceServer
// for forward compatibility.
//
// Gateway for WebTerminalProtocol. Requires user's consent to answer and initiate calls.
type WebTerminalServiceServer interface {
	Pipe(grpc.BidiStreamingServer[WebTerminalMessage, WebTerminalMessage]) error
	MultiPipe(grpc.BidiStreamingServer[WebTerminalMessage, WebTerminalMessage]) error
}

// UnimplementedWebTerminalServiceServer should be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedWebTerminalServiceServer struct{}

func (UnimplementedWebTerminalServiceServer) Pipe(grpc.BidiStreamingServer[WebTerminalMessage, WebTerminalMessage]) error {
	return status.Errorf(codes.Unimplemented, "method Pipe not implemented")
}
func (UnimplementedWebTerminalServiceServer) MultiPipe(grpc.BidiStreamingServer[WebTerminalMessage, WebTerminalMessage]) error {
	return status.Errorf(codes.Unimplemented, "method MultiPipe not implemented")
}
func (UnimplementedWebTerminalServiceServer) testEmbeddedByValue() {}

// UnsafeWebTerminalServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to WebTerminalServiceServer will
// result in compilation errors.
type UnsafeWebTerminalServiceServer interface {
	mustEmbedUnimplementedWebTerminalServiceServer()
}

func RegisterWebTerminalServiceServer(s grpc.ServiceRegistrar, srv WebTerminalServiceServer) {
	// If the following call pancis, it indicates UnimplementedWebTerminalServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&WebTerminalService_ServiceDesc, srv)
}

func _WebTerminalService_Pipe_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(WebTerminalServiceServer).Pipe(&grpc.GenericServerStream[WebTerminalMessage, WebTerminalMessage]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type WebTerminalService_PipeServer = grpc.BidiStreamingServer[WebTerminalMessage, WebTerminalMessage]

func _WebTerminalService_MultiPipe_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(WebTerminalServiceServer).MultiPipe(&grpc.GenericServerStream[WebTerminalMessage, WebTerminalMessage]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type WebTerminalService_MultiPipeServer = grpc.BidiStreamingServer[WebTerminalMessage, WebTerminalMessage]

// WebTerminalService_ServiceDesc is the grpc.ServiceDesc for WebTerminalService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var WebTerminalService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "wgtwo.webterminal.v0.WebTerminalService",
	HandlerType: (*WebTerminalServiceServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Pipe",
			Handler:       _WebTerminalService_Pipe_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
		{
			StreamName:    "MultiPipe",
			Handler:       _WebTerminalService_MultiPipe_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "wgtwo/webterminal/v0/webterminal.proto",
}
