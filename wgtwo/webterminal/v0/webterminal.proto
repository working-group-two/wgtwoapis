// Copyright 2020 Working Group Two AS
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//

syntax = "proto3";

package wgtwo.webterminal.v0;

import "wgtwo/annotations/annotations.proto";
import "wgtwo/common/v0/phonenumber.proto";

option java_outer_classname = "WebTerminalProto";
option java_multiple_files = true;
option java_package = "com.wgtwo.api.v0.webterminal";
option go_package = "github.com/working-group-two/wgtwoapis/wgtwo/webterminal/v0";

// Gateway for WebTerminalProtocol. Requires user's consent to answer and initiate calls.
service WebTerminalService {
  rpc Pipe (stream WebTerminalMessage) returns (stream WebTerminalMessage) {
    option (scope) = "call.control.answer_and_initiate";
  };

  rpc MultiPipe (stream WebTerminalMessage) returns (stream WebTerminalMessage) {
    option (scope) = "call.control.answer_and_initiate";
  };
}

// WebTerminalProtocol used to initiate and control real time media sessions
// between WebRTC enabled endpoints and WG2 Voice Core. Behind WG2 Core can be
// a mobile terminal, or PBX, or SIP Trunk, or another WebRTC endpoint.

// Endpoint can initiate or answer a new call. It can transfer an ongoing call to itself or to
// a mobile terminal. MSISDN of the mobile terminal where call can be transferred to is bound
// to the authentication token used to reach WebTerminalProtocolGateway. The same MSISDN will
// be used as caller ID on the calls made from the endpoint.
//
// There are two types of endpoints, single call pipes operated through the Pipe() rpc method
// and multiple call pipes operated through the MultiPipe() rpc method. The main difference between
// them is that there could be no more than one active call in the single call pipes scenario. That's
// why the call_id parameter is ignored for this scenario. For the ongoing calls, there could be
// multiple calls going on simultaneously and then the call_id in UUID string representation
// is a mandatory parameter. All the differences between the two pipes are listed below:
//  - Pipe ignores call_id and assumes all offer/answers are for the current call
//  - MultiPipe expects call_id as a UUID string representation
//  - when a new Pipe() is opened, an active calls lookup will be performed and
//    INCALL or IDLE message will be sent over the new Pipe() depending whether there is an existing
//    call or not. This is not done in the MultiPipe() case
//
// Initiating a call from the endpoint
//   Endpoint -> {Offer{sdp, msisdn}, call_id} - endpoint sends to Offer with new uuid as call_id and MSISDN of the
//                                               answering party
//   Endpoint <- {Answer{sdp}, call_id} | {Bye{}, call_id} - core sends sdp answer in Answer or rejects call with Bye
//   Endpoint <-> {Bye{}, call_id} - to end the call Endpoint sends Bye, or receives Bye when peer hangs up
//   Note: Endpoint must be prepared to handle multiple Offers from core and Answer them with SDP answer
//         call_id is ignored in the Pipe() scenario
//
// Receiving an incoming call by the endpoint
//   Endpoint <- {Offer{sdp, msisdn}, call_id} - endpoint receives Offer from core with new call_id, sdp, and caller's MSISDN
//   Endpoint -> {Ringing{}, call_id}    - (optional) endpoint tells core it is alerting the user
//   Endpoint -> {Answer{sdp}, call_id}|{Bye{}, call_id} - endpoint sends sdp answer in Answer or rejects with Bye
//   Endpoint <-> {Bye{}, call_id}       - to end the call Endpoint sends Bye, or receives Bye when peer hangs up
//
// Observing MSISDN status
//   State of MSISDN associated with access token can be monitored over WebTerminalProtocol
//   Endpoint <- {Incall{msisdn}, call_id} - endpoint receives Incall indication when its MSISDN making calls using
//                                           other terminals
//   Endpoint <- {Idle{msisdn}, call_id}   - endpoint receives Idle indication when its MSISDN is not part in the call
//   Note: Incall/Idle indications are given to the endpoint upon connecting to the
//   WebTerminalProtocolGateway or call being established/terminated
//   for the Pipe() scenario. For the MultiPipe() scenario the only possible indicator is INCALL for
//   already established MultiPipe() during a call establishment in another MultiPipe() registration.
//
// Transferring call to the endpoint
//   After receiving Incall indication endpoint can transfer call to self by sending a new Offer to the core
//   Endpoint -> {Offer{sdp}, call_id} - call_id is the id of the ongoing call given by Incall indication
//   Endpoint <- {Answer{sdp}, call_id} | {Bye{}, call_id} - core sends sdp answer in Answer or rejects transfer with Bye
//   Endpoint <-> {Bye{}, call_id}       - to end the call Endpoint sends Bye, or receives Bye when peer hangs up
//
// Transferring call to the mobile terminal
//   When endpoint is active party of the ongoing call it can transfer call to the mobile terminal. For that it
//   sends {Action{ToPhone{}}, call_id} message. Example sequence:
//   Endpoint -> {Offer{sdp, msisdn}, call_id} - endpoint sends to Offer with new uuid as call_id and MSISDN of the
//                                               answering party
//   Endpoint <- {Answer{sdp}, call_id} | {Bye{}, call_id} - core sends sdp answer in Answer or rejects call with Bye
//   Endpoint -> {Action{ToPhone{}}, call_id} - handover endpoint's leg to the mobile terminal
//   Endpoint <- {Incall{}, call_id}     - endpoint's leg is transferred to mobile, call still going on
//   Endpoint <- {Idle{}, call_id}       - call ended
//
// ICE
//   Endpoint may send ICE candidates in the SDP
//
// SDP renegotiation
//   Endpoint must be prepared to receive new Offer{call_id, sdp} with updated SDP from the core after initial
//   Offer/Answer exchange has completed. Offer message is used by the core to update SDP.

message WebTerminalMessage {
  oneof message {
    Offer offer = 1;
    Answer answer = 2;
    Ringing ringing = 3;
    Bye bye = 4;
    Idle idle = 5;
    InCall in_call = 6;
    Error error = 7;
    Action action = 9;
  }
  string call_id = 10;
}

message Offer {
  string sdp = 1;
  wgtwo.common.v0.PhoneNumber msisdn = 2;
}

message Answer {
  string sdp = 1;
}

message Ringing {
}

message Bye {
}

message Idle {
}

message InCall {
  wgtwo.common.v0.PhoneNumber msisdn = 1;
}

message Error {
  Code err = 1;
  enum Code {
    UNKNOWN = 0;
    NOT_INCALL = 1;
    TRY_AGAIN = 2;
    INVALID_CALL_ID = 3;
    RATE_LIMIT_HIT = 4;
  }
}

message ToPhone {
}

message Action {
  oneof message {
      ToPhone toPhone = 1;
  }
}
