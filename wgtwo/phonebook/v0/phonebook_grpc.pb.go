// Copyright 2022 Working Group Two AS
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//

// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             (unknown)
// source: wgtwo/phonebook/v0/phonebook.proto

package v0

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	PhonebookService_Update_FullMethodName = "/wgtwo.phonebook.v0.PhonebookService/Update"
	PhonebookService_Toggle_FullMethodName = "/wgtwo.phonebook.v0.PhonebookService/Toggle"
)

// PhonebookServiceClient is the client API for PhonebookService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type PhonebookServiceClient interface {
	// Add/Delete or Replace a msisdn->text pair(s)
	Update(ctx context.Context, in *UpdateRequest, opts ...grpc.CallOption) (*UpdateResponse, error)
	// Turn given phonebook on/off for a subscriber
	Toggle(ctx context.Context, in *ToggleRequest, opts ...grpc.CallOption) (*ToggleResponse, error)
}

type phonebookServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewPhonebookServiceClient(cc grpc.ClientConnInterface) PhonebookServiceClient {
	return &phonebookServiceClient{cc}
}

func (c *phonebookServiceClient) Update(ctx context.Context, in *UpdateRequest, opts ...grpc.CallOption) (*UpdateResponse, error) {
	out := new(UpdateResponse)
	err := c.cc.Invoke(ctx, PhonebookService_Update_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *phonebookServiceClient) Toggle(ctx context.Context, in *ToggleRequest, opts ...grpc.CallOption) (*ToggleResponse, error) {
	out := new(ToggleResponse)
	err := c.cc.Invoke(ctx, PhonebookService_Toggle_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// PhonebookServiceServer is the server API for PhonebookService service.
// All implementations should embed UnimplementedPhonebookServiceServer
// for forward compatibility
type PhonebookServiceServer interface {
	// Add/Delete or Replace a msisdn->text pair(s)
	Update(context.Context, *UpdateRequest) (*UpdateResponse, error)
	// Turn given phonebook on/off for a subscriber
	Toggle(context.Context, *ToggleRequest) (*ToggleResponse, error)
}

// UnimplementedPhonebookServiceServer should be embedded to have forward compatible implementations.
type UnimplementedPhonebookServiceServer struct {
}

func (UnimplementedPhonebookServiceServer) Update(context.Context, *UpdateRequest) (*UpdateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Update not implemented")
}
func (UnimplementedPhonebookServiceServer) Toggle(context.Context, *ToggleRequest) (*ToggleResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Toggle not implemented")
}

// UnsafePhonebookServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to PhonebookServiceServer will
// result in compilation errors.
type UnsafePhonebookServiceServer interface {
	mustEmbedUnimplementedPhonebookServiceServer()
}

func RegisterPhonebookServiceServer(s grpc.ServiceRegistrar, srv PhonebookServiceServer) {
	s.RegisterService(&PhonebookService_ServiceDesc, srv)
}

func _PhonebookService_Update_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PhonebookServiceServer).Update(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PhonebookService_Update_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PhonebookServiceServer).Update(ctx, req.(*UpdateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PhonebookService_Toggle_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ToggleRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PhonebookServiceServer).Toggle(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PhonebookService_Toggle_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PhonebookServiceServer).Toggle(ctx, req.(*ToggleRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// PhonebookService_ServiceDesc is the grpc.ServiceDesc for PhonebookService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var PhonebookService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "wgtwo.phonebook.v0.PhonebookService",
	HandlerType: (*PhonebookServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Update",
			Handler:    _PhonebookService_Update_Handler,
		},
		{
			MethodName: "Toggle",
			Handler:    _PhonebookService_Toggle_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "wgtwo/phonebook/v0/phonebook.proto",
}
