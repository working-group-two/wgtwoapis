// Copyright 2020 Working Group Two AS
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//

syntax = "proto3";

package wgtwo.sms.v0;

import "wgtwo/annotations/annotations.proto";
import "wgtwo/common/v0/phonenumber.proto";

option go_package = "github.com/working-group-two/wgtwoapis/wgtwo/sms/v0";

option java_package = "com.wgtwo.api.v0.sms";
option java_outer_classname = "SmsProto";

service SmsService {
  rpc SendTextFromSubscriber (SendTextFromSubscriberRequest) returns (SendResponse) {
    option (scope) = "sms.send.from_subscriber";
  }
  rpc SendBinaryToSubscriber (SendBinaryToSubscriberRequest) returns (SendResponse) {
    option (scope) = "sms.send.to_subscriber";
  }
  rpc SendTextToSubscriber (SendTextToSubscriberRequest) returns (SendResponse) {
    option (scope) = "sms.send.to_subscriber";
  }
  rpc SendTextToSubscriberAsOperator (SendTextAsOperatorRequest) returns (SendResponse) {
    option (scope) = "sms.send.to_subscriber_as_operator";
  }
  rpc SendTextToSubscriberAsProduct (SendTextAsProductRequest) returns (SendResponse) {
    option (scope) = "sms.send.to_subscriber_as_product";
  }
}

message SendTextAsOperatorRequest {
  string content = 1;
  wgtwo.common.v0.TextAddress from_operator_address = 2;
  wgtwo.common.v0.PhoneNumber to_subscriber = 3;
}

message SendTextAsProductRequest {
  string content = 1;
  wgtwo.common.v0.TextAddress from_product_address = 2;
  wgtwo.common.v0.PhoneNumber to_subscriber = 3;
}

message SendTextToSubscriberRequest {
  string content = 1;

  oneof from_address {
    wgtwo.common.v0.PhoneNumber from_e164 = 2;
    wgtwo.common.v0.TextAddress from_text_address = 3;
    wgtwo.common.v0.NationalPhoneNumber from_short_number = 5;
  }

  wgtwo.common.v0.PhoneNumber to_subscriber = 4;
}

message SendTextFromSubscriberRequest {
  string content = 1;

  wgtwo.common.v0.PhoneNumber from_subscriber = 2;
  oneof to_address {
    wgtwo.common.v0.PhoneNumber to_e164 = 3;
    wgtwo.common.v0.NationalPhoneNumber to_short_number = 5;
  }
}


message SendBinaryToSubscriberRequest {
  bytes content = 1;

  oneof from_address {
    wgtwo.common.v0.PhoneNumber from_e164 = 2;
    wgtwo.common.v0.TextAddress from_text_address = 3;
    wgtwo.common.v0.NationalPhoneNumber from_short_number = 7;
  }

  wgtwo.common.v0.PhoneNumber to_subscriber = 4;

  /**
   * The class of the message. See https://en.wikipedia.org/wiki/Data_Coding_Scheme#Message_Classes
   */
  enum MessageClass {
    MESSAGE_CLASS_NOT_SET = 0;
    CLASS0 = 1;
    CLASS1 = 2;
    CLASS2 = 3;
    CLASS3 = 4;
  }

  MessageClass message_class = 5;

  message ApplicationPort {
    uint32 originatorPort = 1;
    uint32 destinationPort = 2;
  }
  ApplicationPort applicationPort = 6;
}

message SendResponse {
  string request_id = 1;

  enum SendStatus {
    UNKNOWN = 0;
    SEND_OK = 1;
    SEND_REJECT = 2;
    SEND_ERROR = 3;
  }
  SendStatus status = 2;

  string description = 3;
}
